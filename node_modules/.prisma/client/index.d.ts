
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    messages: MessagesPayload<ExtArgs>[]
    savedAnnouncement: SavedAnnouncementsPayload<ExtArgs>[]
    sell: SellPayload<ExtArgs>[]
    valuate: ValuatePayload<ExtArgs>[]
    savedSearch: SavedSearchesPayload<ExtArgs>[]
    hiddenAnnouncement: HiddenAnnouncementsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    email: string
    password: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type MessagesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Messages"
  objects: {
    user: UserPayload<ExtArgs>
    buy: BuyPayload<ExtArgs>
    rent: RentPayload<ExtArgs>
    auction: AuctionPayload<ExtArgs>
    agency: AgencyPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    message: string
    name: string
    email: string
    phone: string
    userId: number
    buyId: number
    rentId: number
    auctionId: number
    agencyId: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["messages"]>
  composites: {}
}

/**
 * Model Messages
 * 
 */
export type Messages = runtime.Types.DefaultSelection<MessagesPayload>
export type SavedAnnouncementsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "SavedAnnouncements"
  objects: {
    user: UserPayload<ExtArgs>
    buy: BuyPayload<ExtArgs> | null
    rent: RentPayload<ExtArgs> | null
    auction: AuctionPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: number
    email: string
    userId: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["savedAnnouncements"]>
  composites: {}
}

/**
 * Model SavedAnnouncements
 * 
 */
export type SavedAnnouncements = runtime.Types.DefaultSelection<SavedAnnouncementsPayload>
export type SellPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Sell"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    image: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    userId: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["sell"]>
  composites: {}
}

/**
 * Model Sell
 * 
 */
export type Sell = runtime.Types.DefaultSelection<SellPayload>
export type ValuatePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Valuate"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    userId: number
    image: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["valuate"]>
  composites: {}
}

/**
 * Model Valuate
 * 
 */
export type Valuate = runtime.Types.DefaultSelection<ValuatePayload>
export type SavedSearchesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "SavedSearches"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    userId: number
    searchBar: string
    aquireType: string
    houseType: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["savedSearches"]>
  composites: {}
}

/**
 * Model SavedSearches
 * 
 */
export type SavedSearches = runtime.Types.DefaultSelection<SavedSearchesPayload>
export type HiddenAnnouncementsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "HiddenAnnouncements"
  objects: {
    user: UserPayload<ExtArgs>
    buy: BuyPayload<ExtArgs> | null
    rent: RentPayload<ExtArgs> | null
    auction: AuctionPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: number
    userId: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["hiddenAnnouncements"]>
  composites: {}
}

/**
 * Model HiddenAnnouncements
 * 
 */
export type HiddenAnnouncements = runtime.Types.DefaultSelection<HiddenAnnouncementsPayload>
export type BuyPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Buy"
  objects: {
    messages: MessagesPayload<ExtArgs>[]
    savedAnnouncement: SavedAnnouncementsPayload<ExtArgs> | null
    hiddenAnnouncement: HiddenAnnouncementsPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: number
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["buy"]>
  composites: {}
}

/**
 * Model Buy
 * 
 */
export type Buy = runtime.Types.DefaultSelection<BuyPayload>
export type RentPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Rent"
  objects: {
    messages: MessagesPayload<ExtArgs>[]
    savedAnnouncement: SavedAnnouncementsPayload<ExtArgs> | null
    hiddenAnnouncement: HiddenAnnouncementsPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: number
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["rent"]>
  composites: {}
}

/**
 * Model Rent
 * 
 */
export type Rent = runtime.Types.DefaultSelection<RentPayload>
export type AuctionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Auction"
  objects: {
    messages: MessagesPayload<ExtArgs>[]
    savedAnnouncement: SavedAnnouncementsPayload<ExtArgs> | null
    hiddenAnnouncement: HiddenAnnouncementsPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: number
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["auction"]>
  composites: {}
}

/**
 * Model Auction
 * 
 */
export type Auction = runtime.Types.DefaultSelection<AuctionPayload>
export type AgencyPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Agency"
  objects: {
    messages: MessagesPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    image: string
    name: string
    address: string
    history: number
    phone: string
    announcements: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["agency"]>
  composites: {}
}

/**
 * Model Agency
 * 
 */
export type Agency = runtime.Types.DefaultSelection<AgencyPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.messages`: Exposes CRUD operations for the **Messages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.messages.findMany()
    * ```
    */
  get messages(): Prisma.MessagesDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.savedAnnouncements`: Exposes CRUD operations for the **SavedAnnouncements** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SavedAnnouncements
    * const savedAnnouncements = await prisma.savedAnnouncements.findMany()
    * ```
    */
  get savedAnnouncements(): Prisma.SavedAnnouncementsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.sell`: Exposes CRUD operations for the **Sell** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sells
    * const sells = await prisma.sell.findMany()
    * ```
    */
  get sell(): Prisma.SellDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.valuate`: Exposes CRUD operations for the **Valuate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Valuates
    * const valuates = await prisma.valuate.findMany()
    * ```
    */
  get valuate(): Prisma.ValuateDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.savedSearches`: Exposes CRUD operations for the **SavedSearches** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SavedSearches
    * const savedSearches = await prisma.savedSearches.findMany()
    * ```
    */
  get savedSearches(): Prisma.SavedSearchesDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.hiddenAnnouncements`: Exposes CRUD operations for the **HiddenAnnouncements** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HiddenAnnouncements
    * const hiddenAnnouncements = await prisma.hiddenAnnouncements.findMany()
    * ```
    */
  get hiddenAnnouncements(): Prisma.HiddenAnnouncementsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.buy`: Exposes CRUD operations for the **Buy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Buys
    * const buys = await prisma.buy.findMany()
    * ```
    */
  get buy(): Prisma.BuyDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.rent`: Exposes CRUD operations for the **Rent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rents
    * const rents = await prisma.rent.findMany()
    * ```
    */
  get rent(): Prisma.RentDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.auction`: Exposes CRUD operations for the **Auction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Auctions
    * const auctions = await prisma.auction.findMany()
    * ```
    */
  get auction(): Prisma.AuctionDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.agency`: Exposes CRUD operations for the **Agency** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agencies
    * const agencies = await prisma.agency.findMany()
    * ```
    */
  get agency(): Prisma.AgencyDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Messages: 'Messages',
    SavedAnnouncements: 'SavedAnnouncements',
    Sell: 'Sell',
    Valuate: 'Valuate',
    SavedSearches: 'SavedSearches',
    HiddenAnnouncements: 'HiddenAnnouncements',
    Buy: 'Buy',
    Rent: 'Rent',
    Auction: 'Auction',
    Agency: 'Agency'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'messages' | 'savedAnnouncements' | 'sell' | 'valuate' | 'savedSearches' | 'hiddenAnnouncements' | 'buy' | 'rent' | 'auction' | 'agency'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: UserPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Messages: {
        payload: MessagesPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.MessagesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessagesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagesPayload>
          }
          findFirst: {
            args: Prisma.MessagesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessagesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagesPayload>
          }
          findMany: {
            args: Prisma.MessagesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagesPayload>[]
          }
          create: {
            args: Prisma.MessagesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagesPayload>
          }
          createMany: {
            args: Prisma.MessagesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MessagesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagesPayload>
          }
          update: {
            args: Prisma.MessagesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagesPayload>
          }
          deleteMany: {
            args: Prisma.MessagesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MessagesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MessagesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagesPayload>
          }
          aggregate: {
            args: Prisma.MessagesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMessages>
          }
          groupBy: {
            args: Prisma.MessagesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MessagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessagesCountArgs<ExtArgs>,
            result: $Utils.Optional<MessagesCountAggregateOutputType> | number
          }
        }
      }
      SavedAnnouncements: {
        payload: SavedAnnouncementsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SavedAnnouncementsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedAnnouncementsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SavedAnnouncementsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedAnnouncementsPayload>
          }
          findFirst: {
            args: Prisma.SavedAnnouncementsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedAnnouncementsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SavedAnnouncementsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedAnnouncementsPayload>
          }
          findMany: {
            args: Prisma.SavedAnnouncementsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedAnnouncementsPayload>[]
          }
          create: {
            args: Prisma.SavedAnnouncementsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedAnnouncementsPayload>
          }
          createMany: {
            args: Prisma.SavedAnnouncementsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SavedAnnouncementsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedAnnouncementsPayload>
          }
          update: {
            args: Prisma.SavedAnnouncementsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedAnnouncementsPayload>
          }
          deleteMany: {
            args: Prisma.SavedAnnouncementsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SavedAnnouncementsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SavedAnnouncementsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedAnnouncementsPayload>
          }
          aggregate: {
            args: Prisma.SavedAnnouncementsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSavedAnnouncements>
          }
          groupBy: {
            args: Prisma.SavedAnnouncementsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SavedAnnouncementsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SavedAnnouncementsCountArgs<ExtArgs>,
            result: $Utils.Optional<SavedAnnouncementsCountAggregateOutputType> | number
          }
        }
      }
      Sell: {
        payload: SellPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SellFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SellPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SellFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SellPayload>
          }
          findFirst: {
            args: Prisma.SellFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SellPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SellFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SellPayload>
          }
          findMany: {
            args: Prisma.SellFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SellPayload>[]
          }
          create: {
            args: Prisma.SellCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SellPayload>
          }
          createMany: {
            args: Prisma.SellCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SellDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SellPayload>
          }
          update: {
            args: Prisma.SellUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SellPayload>
          }
          deleteMany: {
            args: Prisma.SellDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SellUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SellUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SellPayload>
          }
          aggregate: {
            args: Prisma.SellAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSell>
          }
          groupBy: {
            args: Prisma.SellGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SellGroupByOutputType>[]
          }
          count: {
            args: Prisma.SellCountArgs<ExtArgs>,
            result: $Utils.Optional<SellCountAggregateOutputType> | number
          }
        }
      }
      Valuate: {
        payload: ValuatePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ValuateFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ValuatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ValuateFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ValuatePayload>
          }
          findFirst: {
            args: Prisma.ValuateFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ValuatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ValuateFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ValuatePayload>
          }
          findMany: {
            args: Prisma.ValuateFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ValuatePayload>[]
          }
          create: {
            args: Prisma.ValuateCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ValuatePayload>
          }
          createMany: {
            args: Prisma.ValuateCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ValuateDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ValuatePayload>
          }
          update: {
            args: Prisma.ValuateUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ValuatePayload>
          }
          deleteMany: {
            args: Prisma.ValuateDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ValuateUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ValuateUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ValuatePayload>
          }
          aggregate: {
            args: Prisma.ValuateAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateValuate>
          }
          groupBy: {
            args: Prisma.ValuateGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ValuateGroupByOutputType>[]
          }
          count: {
            args: Prisma.ValuateCountArgs<ExtArgs>,
            result: $Utils.Optional<ValuateCountAggregateOutputType> | number
          }
        }
      }
      SavedSearches: {
        payload: SavedSearchesPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SavedSearchesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedSearchesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SavedSearchesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedSearchesPayload>
          }
          findFirst: {
            args: Prisma.SavedSearchesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedSearchesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SavedSearchesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedSearchesPayload>
          }
          findMany: {
            args: Prisma.SavedSearchesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedSearchesPayload>[]
          }
          create: {
            args: Prisma.SavedSearchesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedSearchesPayload>
          }
          createMany: {
            args: Prisma.SavedSearchesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SavedSearchesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedSearchesPayload>
          }
          update: {
            args: Prisma.SavedSearchesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedSearchesPayload>
          }
          deleteMany: {
            args: Prisma.SavedSearchesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SavedSearchesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SavedSearchesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SavedSearchesPayload>
          }
          aggregate: {
            args: Prisma.SavedSearchesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSavedSearches>
          }
          groupBy: {
            args: Prisma.SavedSearchesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SavedSearchesGroupByOutputType>[]
          }
          count: {
            args: Prisma.SavedSearchesCountArgs<ExtArgs>,
            result: $Utils.Optional<SavedSearchesCountAggregateOutputType> | number
          }
        }
      }
      HiddenAnnouncements: {
        payload: HiddenAnnouncementsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.HiddenAnnouncementsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HiddenAnnouncementsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HiddenAnnouncementsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HiddenAnnouncementsPayload>
          }
          findFirst: {
            args: Prisma.HiddenAnnouncementsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HiddenAnnouncementsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HiddenAnnouncementsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HiddenAnnouncementsPayload>
          }
          findMany: {
            args: Prisma.HiddenAnnouncementsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HiddenAnnouncementsPayload>[]
          }
          create: {
            args: Prisma.HiddenAnnouncementsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HiddenAnnouncementsPayload>
          }
          createMany: {
            args: Prisma.HiddenAnnouncementsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HiddenAnnouncementsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HiddenAnnouncementsPayload>
          }
          update: {
            args: Prisma.HiddenAnnouncementsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HiddenAnnouncementsPayload>
          }
          deleteMany: {
            args: Prisma.HiddenAnnouncementsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HiddenAnnouncementsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HiddenAnnouncementsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<HiddenAnnouncementsPayload>
          }
          aggregate: {
            args: Prisma.HiddenAnnouncementsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHiddenAnnouncements>
          }
          groupBy: {
            args: Prisma.HiddenAnnouncementsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HiddenAnnouncementsGroupByOutputType>[]
          }
          count: {
            args: Prisma.HiddenAnnouncementsCountArgs<ExtArgs>,
            result: $Utils.Optional<HiddenAnnouncementsCountAggregateOutputType> | number
          }
        }
      }
      Buy: {
        payload: BuyPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.BuyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BuyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BuyPayload>
          }
          findFirst: {
            args: Prisma.BuyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BuyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BuyPayload>
          }
          findMany: {
            args: Prisma.BuyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BuyPayload>[]
          }
          create: {
            args: Prisma.BuyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BuyPayload>
          }
          createMany: {
            args: Prisma.BuyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BuyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BuyPayload>
          }
          update: {
            args: Prisma.BuyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BuyPayload>
          }
          deleteMany: {
            args: Prisma.BuyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BuyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BuyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BuyPayload>
          }
          aggregate: {
            args: Prisma.BuyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBuy>
          }
          groupBy: {
            args: Prisma.BuyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BuyGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuyCountArgs<ExtArgs>,
            result: $Utils.Optional<BuyCountAggregateOutputType> | number
          }
        }
      }
      Rent: {
        payload: RentPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.RentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RentPayload>
          }
          findFirst: {
            args: Prisma.RentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RentPayload>
          }
          findMany: {
            args: Prisma.RentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RentPayload>[]
          }
          create: {
            args: Prisma.RentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RentPayload>
          }
          createMany: {
            args: Prisma.RentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RentPayload>
          }
          update: {
            args: Prisma.RentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RentPayload>
          }
          deleteMany: {
            args: Prisma.RentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RentPayload>
          }
          aggregate: {
            args: Prisma.RentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRent>
          }
          groupBy: {
            args: Prisma.RentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RentGroupByOutputType>[]
          }
          count: {
            args: Prisma.RentCountArgs<ExtArgs>,
            result: $Utils.Optional<RentCountAggregateOutputType> | number
          }
        }
      }
      Auction: {
        payload: AuctionPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AuctionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuctionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuctionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuctionPayload>
          }
          findFirst: {
            args: Prisma.AuctionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuctionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuctionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuctionPayload>
          }
          findMany: {
            args: Prisma.AuctionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuctionPayload>[]
          }
          create: {
            args: Prisma.AuctionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuctionPayload>
          }
          createMany: {
            args: Prisma.AuctionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AuctionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuctionPayload>
          }
          update: {
            args: Prisma.AuctionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuctionPayload>
          }
          deleteMany: {
            args: Prisma.AuctionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AuctionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AuctionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuctionPayload>
          }
          aggregate: {
            args: Prisma.AuctionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAuction>
          }
          groupBy: {
            args: Prisma.AuctionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AuctionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuctionCountArgs<ExtArgs>,
            result: $Utils.Optional<AuctionCountAggregateOutputType> | number
          }
        }
      }
      Agency: {
        payload: AgencyPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AgencyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgencyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload>
          }
          findFirst: {
            args: Prisma.AgencyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgencyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload>
          }
          findMany: {
            args: Prisma.AgencyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload>[]
          }
          create: {
            args: Prisma.AgencyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload>
          }
          createMany: {
            args: Prisma.AgencyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AgencyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload>
          }
          update: {
            args: Prisma.AgencyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload>
          }
          deleteMany: {
            args: Prisma.AgencyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AgencyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AgencyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload>
          }
          aggregate: {
            args: Prisma.AgencyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAgency>
          }
          groupBy: {
            args: Prisma.AgencyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AgencyGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgencyCountArgs<ExtArgs>,
            result: $Utils.Optional<AgencyCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    messages: number
    savedAnnouncement: number
    sell: number
    valuate: number
    savedSearch: number
    hiddenAnnouncement: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    messages?: boolean
    savedAnnouncement?: boolean
    sell?: boolean
    valuate?: boolean
    savedSearch?: boolean
    hiddenAnnouncement?: boolean
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }



  /**
   * Count Type BuyCountOutputType
   */


  export type BuyCountOutputType = {
    messages: number
  }

  export type BuyCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    messages?: boolean
  }

  // Custom InputTypes

  /**
   * BuyCountOutputType without action
   */
  export type BuyCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyCountOutputType
     */
    select?: BuyCountOutputTypeSelect<ExtArgs> | null
  }



  /**
   * Count Type RentCountOutputType
   */


  export type RentCountOutputType = {
    messages: number
  }

  export type RentCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    messages?: boolean
  }

  // Custom InputTypes

  /**
   * RentCountOutputType without action
   */
  export type RentCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RentCountOutputType
     */
    select?: RentCountOutputTypeSelect<ExtArgs> | null
  }



  /**
   * Count Type AuctionCountOutputType
   */


  export type AuctionCountOutputType = {
    messages: number
  }

  export type AuctionCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    messages?: boolean
  }

  // Custom InputTypes

  /**
   * AuctionCountOutputType without action
   */
  export type AuctionCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionCountOutputType
     */
    select?: AuctionCountOutputTypeSelect<ExtArgs> | null
  }



  /**
   * Count Type AgencyCountOutputType
   */


  export type AgencyCountOutputType = {
    messages: number
  }

  export type AgencyCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    messages?: boolean
  }

  // Custom InputTypes

  /**
   * AgencyCountOutputType without action
   */
  export type AgencyCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyCountOutputType
     */
    select?: AgencyCountOutputTypeSelect<ExtArgs> | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    messages?: boolean | User$messagesArgs<ExtArgs>
    savedAnnouncement?: boolean | User$savedAnnouncementArgs<ExtArgs>
    sell?: boolean | User$sellArgs<ExtArgs>
    valuate?: boolean | User$valuateArgs<ExtArgs>
    savedSearch?: boolean | User$savedSearchArgs<ExtArgs>
    hiddenAnnouncement?: boolean | User$hiddenAnnouncementArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    messages?: boolean | User$messagesArgs<ExtArgs>
    savedAnnouncement?: boolean | User$savedAnnouncementArgs<ExtArgs>
    sell?: boolean | User$sellArgs<ExtArgs>
    valuate?: boolean | User$valuateArgs<ExtArgs>
    savedSearch?: boolean | User$savedSearchArgs<ExtArgs>
    hiddenAnnouncement?: boolean | User$hiddenAnnouncementArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    messages<T extends User$messagesArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MessagesPayload<ExtArgs>, T, 'findMany', never>| Null>;

    savedAnnouncement<T extends User$savedAnnouncementArgs<ExtArgs> = {}>(args?: Subset<T, User$savedAnnouncementArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SavedAnnouncementsPayload<ExtArgs>, T, 'findMany', never>| Null>;

    sell<T extends User$sellArgs<ExtArgs> = {}>(args?: Subset<T, User$sellArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SellPayload<ExtArgs>, T, 'findMany', never>| Null>;

    valuate<T extends User$valuateArgs<ExtArgs> = {}>(args?: Subset<T, User$valuateArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ValuatePayload<ExtArgs>, T, 'findMany', never>| Null>;

    savedSearch<T extends User$savedSearchArgs<ExtArgs> = {}>(args?: Subset<T, User$savedSearchArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SavedSearchesPayload<ExtArgs>, T, 'findMany', never>| Null>;

    hiddenAnnouncement<T extends User$hiddenAnnouncementArgs<ExtArgs> = {}>(args?: Subset<T, User$hiddenAnnouncementArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<HiddenAnnouncementsPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.messages
   */
  export type User$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    where?: MessagesWhereInput
    orderBy?: Enumerable<MessagesOrderByWithRelationInput>
    cursor?: MessagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessagesScalarFieldEnum>
  }


  /**
   * User.savedAnnouncement
   */
  export type User$savedAnnouncementArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedAnnouncements
     */
    select?: SavedAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedAnnouncementsInclude<ExtArgs> | null
    where?: SavedAnnouncementsWhereInput
    orderBy?: Enumerable<SavedAnnouncementsOrderByWithRelationInput>
    cursor?: SavedAnnouncementsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SavedAnnouncementsScalarFieldEnum>
  }


  /**
   * User.sell
   */
  export type User$sellArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sell
     */
    select?: SellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellInclude<ExtArgs> | null
    where?: SellWhereInput
    orderBy?: Enumerable<SellOrderByWithRelationInput>
    cursor?: SellWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SellScalarFieldEnum>
  }


  /**
   * User.valuate
   */
  export type User$valuateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Valuate
     */
    select?: ValuateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuateInclude<ExtArgs> | null
    where?: ValuateWhereInput
    orderBy?: Enumerable<ValuateOrderByWithRelationInput>
    cursor?: ValuateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ValuateScalarFieldEnum>
  }


  /**
   * User.savedSearch
   */
  export type User$savedSearchArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedSearches
     */
    select?: SavedSearchesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedSearchesInclude<ExtArgs> | null
    where?: SavedSearchesWhereInput
    orderBy?: Enumerable<SavedSearchesOrderByWithRelationInput>
    cursor?: SavedSearchesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SavedSearchesScalarFieldEnum>
  }


  /**
   * User.hiddenAnnouncement
   */
  export type User$hiddenAnnouncementArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HiddenAnnouncements
     */
    select?: HiddenAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HiddenAnnouncementsInclude<ExtArgs> | null
    where?: HiddenAnnouncementsWhereInput
    orderBy?: Enumerable<HiddenAnnouncementsOrderByWithRelationInput>
    cursor?: HiddenAnnouncementsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<HiddenAnnouncementsScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Messages
   */


  export type AggregateMessages = {
    _count: MessagesCountAggregateOutputType | null
    _avg: MessagesAvgAggregateOutputType | null
    _sum: MessagesSumAggregateOutputType | null
    _min: MessagesMinAggregateOutputType | null
    _max: MessagesMaxAggregateOutputType | null
  }

  export type MessagesAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    buyId: number | null
    rentId: number | null
    auctionId: number | null
    agencyId: number | null
  }

  export type MessagesSumAggregateOutputType = {
    id: number | null
    userId: number | null
    buyId: number | null
    rentId: number | null
    auctionId: number | null
    agencyId: number | null
  }

  export type MessagesMinAggregateOutputType = {
    id: number | null
    message: string | null
    name: string | null
    email: string | null
    phone: string | null
    userId: number | null
    buyId: number | null
    rentId: number | null
    auctionId: number | null
    agencyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MessagesMaxAggregateOutputType = {
    id: number | null
    message: string | null
    name: string | null
    email: string | null
    phone: string | null
    userId: number | null
    buyId: number | null
    rentId: number | null
    auctionId: number | null
    agencyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MessagesCountAggregateOutputType = {
    id: number
    message: number
    name: number
    email: number
    phone: number
    userId: number
    buyId: number
    rentId: number
    auctionId: number
    agencyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MessagesAvgAggregateInputType = {
    id?: true
    userId?: true
    buyId?: true
    rentId?: true
    auctionId?: true
    agencyId?: true
  }

  export type MessagesSumAggregateInputType = {
    id?: true
    userId?: true
    buyId?: true
    rentId?: true
    auctionId?: true
    agencyId?: true
  }

  export type MessagesMinAggregateInputType = {
    id?: true
    message?: true
    name?: true
    email?: true
    phone?: true
    userId?: true
    buyId?: true
    rentId?: true
    auctionId?: true
    agencyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MessagesMaxAggregateInputType = {
    id?: true
    message?: true
    name?: true
    email?: true
    phone?: true
    userId?: true
    buyId?: true
    rentId?: true
    auctionId?: true
    agencyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MessagesCountAggregateInputType = {
    id?: true
    message?: true
    name?: true
    email?: true
    phone?: true
    userId?: true
    buyId?: true
    rentId?: true
    auctionId?: true
    agencyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MessagesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to aggregate.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessagesMaxAggregateInputType
  }

  export type GetMessagesAggregateType<T extends MessagesAggregateArgs> = {
        [P in keyof T & keyof AggregateMessages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessages[P]>
      : GetScalarType<T[P], AggregateMessages[P]>
  }




  export type MessagesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessagesWhereInput
    orderBy?: Enumerable<MessagesOrderByWithAggregationInput>
    by: MessagesScalarFieldEnum[]
    having?: MessagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessagesCountAggregateInputType | true
    _avg?: MessagesAvgAggregateInputType
    _sum?: MessagesSumAggregateInputType
    _min?: MessagesMinAggregateInputType
    _max?: MessagesMaxAggregateInputType
  }


  export type MessagesGroupByOutputType = {
    id: number
    message: string
    name: string
    email: string
    phone: string
    userId: number
    buyId: number
    rentId: number
    auctionId: number
    agencyId: number
    createdAt: Date
    updatedAt: Date
    _count: MessagesCountAggregateOutputType | null
    _avg: MessagesAvgAggregateOutputType | null
    _sum: MessagesSumAggregateOutputType | null
    _min: MessagesMinAggregateOutputType | null
    _max: MessagesMaxAggregateOutputType | null
  }

  type GetMessagesGroupByPayload<T extends MessagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MessagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessagesGroupByOutputType[P]>
            : GetScalarType<T[P], MessagesGroupByOutputType[P]>
        }
      >
    >


  export type MessagesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    userId?: boolean
    buyId?: boolean
    rentId?: boolean
    auctionId?: boolean
    agencyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
    buy?: boolean | BuyArgs<ExtArgs>
    rent?: boolean | RentArgs<ExtArgs>
    auction?: boolean | AuctionArgs<ExtArgs>
    agency?: boolean | AgencyArgs<ExtArgs>
  }, ExtArgs["result"]["messages"]>

  export type MessagesSelectScalar = {
    id?: boolean
    message?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    userId?: boolean
    buyId?: boolean
    rentId?: boolean
    auctionId?: boolean
    agencyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MessagesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    buy?: boolean | BuyArgs<ExtArgs>
    rent?: boolean | RentArgs<ExtArgs>
    auction?: boolean | AuctionArgs<ExtArgs>
    agency?: boolean | AgencyArgs<ExtArgs>
  }


  type MessagesGetPayload<S extends boolean | null | undefined | MessagesArgs> = $Types.GetResult<MessagesPayload, S>

  type MessagesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MessagesFindManyArgs, 'select' | 'include'> & {
      select?: MessagesCountAggregateInputType | true
    }

  export interface MessagesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Messages'], meta: { name: 'Messages' } }
    /**
     * Find zero or one Messages that matches the filter.
     * @param {MessagesFindUniqueArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessagesFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MessagesFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Messages'> extends True ? Prisma__MessagesClient<$Types.GetResult<MessagesPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__MessagesClient<$Types.GetResult<MessagesPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Messages that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessagesFindUniqueOrThrowArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessagesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessagesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Types.GetResult<MessagesPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesFindFirstArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessagesFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MessagesFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Messages'> extends True ? Prisma__MessagesClient<$Types.GetResult<MessagesPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__MessagesClient<$Types.GetResult<MessagesPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Messages that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesFindFirstOrThrowArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessagesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessagesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Types.GetResult<MessagesPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.messages.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.messages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messagesWithIdOnly = await prisma.messages.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MessagesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessagesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<MessagesPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Messages.
     * @param {MessagesCreateArgs} args - Arguments to create a Messages.
     * @example
     * // Create one Messages
     * const Messages = await prisma.messages.create({
     *   data: {
     *     // ... data to create a Messages
     *   }
     * })
     * 
    **/
    create<T extends MessagesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MessagesCreateArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Types.GetResult<MessagesPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Messages.
     *     @param {MessagesCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const messages = await prisma.messages.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessagesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessagesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Messages.
     * @param {MessagesDeleteArgs} args - Arguments to delete one Messages.
     * @example
     * // Delete one Messages
     * const Messages = await prisma.messages.delete({
     *   where: {
     *     // ... filter to delete one Messages
     *   }
     * })
     * 
    **/
    delete<T extends MessagesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MessagesDeleteArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Types.GetResult<MessagesPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Messages.
     * @param {MessagesUpdateArgs} args - Arguments to update one Messages.
     * @example
     * // Update one Messages
     * const messages = await prisma.messages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessagesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MessagesUpdateArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Types.GetResult<MessagesPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessagesDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.messages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessagesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessagesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const messages = await prisma.messages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessagesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MessagesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Messages.
     * @param {MessagesUpsertArgs} args - Arguments to update or create a Messages.
     * @example
     * // Update or create a Messages
     * const messages = await prisma.messages.upsert({
     *   create: {
     *     // ... data to create a Messages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Messages we want to update
     *   }
     * })
    **/
    upsert<T extends MessagesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MessagesUpsertArgs<ExtArgs>>
    ): Prisma__MessagesClient<$Types.GetResult<MessagesPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.messages.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessagesCountArgs>(
      args?: Subset<T, MessagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessagesAggregateArgs>(args: Subset<T, MessagesAggregateArgs>): Prisma.PrismaPromise<GetMessagesAggregateType<T>>

    /**
     * Group by Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessagesGroupByArgs['orderBy'] }
        : { orderBy?: MessagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Messages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MessagesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    buy<T extends BuyArgs<ExtArgs> = {}>(args?: Subset<T, BuyArgs<ExtArgs>>): Prisma__BuyClient<$Types.GetResult<BuyPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    rent<T extends RentArgs<ExtArgs> = {}>(args?: Subset<T, RentArgs<ExtArgs>>): Prisma__RentClient<$Types.GetResult<RentPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    auction<T extends AuctionArgs<ExtArgs> = {}>(args?: Subset<T, AuctionArgs<ExtArgs>>): Prisma__AuctionClient<$Types.GetResult<AuctionPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    agency<T extends AgencyArgs<ExtArgs> = {}>(args?: Subset<T, AgencyArgs<ExtArgs>>): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Messages base type for findUnique actions
   */
  export type MessagesFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where: MessagesWhereUniqueInput
  }

  /**
   * Messages findUnique
   */
  export interface MessagesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MessagesFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Messages findUniqueOrThrow
   */
  export type MessagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where: MessagesWhereUniqueInput
  }


  /**
   * Messages base type for findFirst actions
   */
  export type MessagesFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: Enumerable<MessagesScalarFieldEnum>
  }

  /**
   * Messages findFirst
   */
  export interface MessagesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MessagesFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Messages findFirstOrThrow
   */
  export type MessagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: Enumerable<MessagesScalarFieldEnum>
  }


  /**
   * Messages findMany
   */
  export type MessagesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: Enumerable<MessagesScalarFieldEnum>
  }


  /**
   * Messages create
   */
  export type MessagesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * The data needed to create a Messages.
     */
    data: XOR<MessagesCreateInput, MessagesUncheckedCreateInput>
  }


  /**
   * Messages createMany
   */
  export type MessagesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: Enumerable<MessagesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Messages update
   */
  export type MessagesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * The data needed to update a Messages.
     */
    data: XOR<MessagesUpdateInput, MessagesUncheckedUpdateInput>
    /**
     * Choose, which Messages to update.
     */
    where: MessagesWhereUniqueInput
  }


  /**
   * Messages updateMany
   */
  export type MessagesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessagesUpdateManyMutationInput, MessagesUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessagesWhereInput
  }


  /**
   * Messages upsert
   */
  export type MessagesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * The filter to search for the Messages to update in case it exists.
     */
    where: MessagesWhereUniqueInput
    /**
     * In case the Messages found by the `where` argument doesn't exist, create a new Messages with this data.
     */
    create: XOR<MessagesCreateInput, MessagesUncheckedCreateInput>
    /**
     * In case the Messages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessagesUpdateInput, MessagesUncheckedUpdateInput>
  }


  /**
   * Messages delete
   */
  export type MessagesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    /**
     * Filter which Messages to delete.
     */
    where: MessagesWhereUniqueInput
  }


  /**
   * Messages deleteMany
   */
  export type MessagesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessagesWhereInput
  }


  /**
   * Messages without action
   */
  export type MessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
  }



  /**
   * Model SavedAnnouncements
   */


  export type AggregateSavedAnnouncements = {
    _count: SavedAnnouncementsCountAggregateOutputType | null
    _avg: SavedAnnouncementsAvgAggregateOutputType | null
    _sum: SavedAnnouncementsSumAggregateOutputType | null
    _min: SavedAnnouncementsMinAggregateOutputType | null
    _max: SavedAnnouncementsMaxAggregateOutputType | null
  }

  export type SavedAnnouncementsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SavedAnnouncementsSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SavedAnnouncementsMinAggregateOutputType = {
    id: number | null
    email: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SavedAnnouncementsMaxAggregateOutputType = {
    id: number | null
    email: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SavedAnnouncementsCountAggregateOutputType = {
    id: number
    email: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SavedAnnouncementsAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SavedAnnouncementsSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SavedAnnouncementsMinAggregateInputType = {
    id?: true
    email?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SavedAnnouncementsMaxAggregateInputType = {
    id?: true
    email?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SavedAnnouncementsCountAggregateInputType = {
    id?: true
    email?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SavedAnnouncementsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedAnnouncements to aggregate.
     */
    where?: SavedAnnouncementsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedAnnouncements to fetch.
     */
    orderBy?: Enumerable<SavedAnnouncementsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SavedAnnouncementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedAnnouncements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedAnnouncements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SavedAnnouncements
    **/
    _count?: true | SavedAnnouncementsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SavedAnnouncementsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SavedAnnouncementsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SavedAnnouncementsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SavedAnnouncementsMaxAggregateInputType
  }

  export type GetSavedAnnouncementsAggregateType<T extends SavedAnnouncementsAggregateArgs> = {
        [P in keyof T & keyof AggregateSavedAnnouncements]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSavedAnnouncements[P]>
      : GetScalarType<T[P], AggregateSavedAnnouncements[P]>
  }




  export type SavedAnnouncementsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SavedAnnouncementsWhereInput
    orderBy?: Enumerable<SavedAnnouncementsOrderByWithAggregationInput>
    by: SavedAnnouncementsScalarFieldEnum[]
    having?: SavedAnnouncementsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SavedAnnouncementsCountAggregateInputType | true
    _avg?: SavedAnnouncementsAvgAggregateInputType
    _sum?: SavedAnnouncementsSumAggregateInputType
    _min?: SavedAnnouncementsMinAggregateInputType
    _max?: SavedAnnouncementsMaxAggregateInputType
  }


  export type SavedAnnouncementsGroupByOutputType = {
    id: number
    email: string
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: SavedAnnouncementsCountAggregateOutputType | null
    _avg: SavedAnnouncementsAvgAggregateOutputType | null
    _sum: SavedAnnouncementsSumAggregateOutputType | null
    _min: SavedAnnouncementsMinAggregateOutputType | null
    _max: SavedAnnouncementsMaxAggregateOutputType | null
  }

  type GetSavedAnnouncementsGroupByPayload<T extends SavedAnnouncementsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SavedAnnouncementsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SavedAnnouncementsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SavedAnnouncementsGroupByOutputType[P]>
            : GetScalarType<T[P], SavedAnnouncementsGroupByOutputType[P]>
        }
      >
    >


  export type SavedAnnouncementsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
    buy?: boolean | BuyArgs<ExtArgs>
    rent?: boolean | RentArgs<ExtArgs>
    auction?: boolean | AuctionArgs<ExtArgs>
  }, ExtArgs["result"]["savedAnnouncements"]>

  export type SavedAnnouncementsSelectScalar = {
    id?: boolean
    email?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SavedAnnouncementsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    buy?: boolean | BuyArgs<ExtArgs>
    rent?: boolean | RentArgs<ExtArgs>
    auction?: boolean | AuctionArgs<ExtArgs>
  }


  type SavedAnnouncementsGetPayload<S extends boolean | null | undefined | SavedAnnouncementsArgs> = $Types.GetResult<SavedAnnouncementsPayload, S>

  type SavedAnnouncementsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SavedAnnouncementsFindManyArgs, 'select' | 'include'> & {
      select?: SavedAnnouncementsCountAggregateInputType | true
    }

  export interface SavedAnnouncementsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SavedAnnouncements'], meta: { name: 'SavedAnnouncements' } }
    /**
     * Find zero or one SavedAnnouncements that matches the filter.
     * @param {SavedAnnouncementsFindUniqueArgs} args - Arguments to find a SavedAnnouncements
     * @example
     * // Get one SavedAnnouncements
     * const savedAnnouncements = await prisma.savedAnnouncements.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SavedAnnouncementsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SavedAnnouncementsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SavedAnnouncements'> extends True ? Prisma__SavedAnnouncementsClient<$Types.GetResult<SavedAnnouncementsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SavedAnnouncementsClient<$Types.GetResult<SavedAnnouncementsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one SavedAnnouncements that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SavedAnnouncementsFindUniqueOrThrowArgs} args - Arguments to find a SavedAnnouncements
     * @example
     * // Get one SavedAnnouncements
     * const savedAnnouncements = await prisma.savedAnnouncements.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SavedAnnouncementsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SavedAnnouncementsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SavedAnnouncementsClient<$Types.GetResult<SavedAnnouncementsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first SavedAnnouncements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedAnnouncementsFindFirstArgs} args - Arguments to find a SavedAnnouncements
     * @example
     * // Get one SavedAnnouncements
     * const savedAnnouncements = await prisma.savedAnnouncements.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SavedAnnouncementsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SavedAnnouncementsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SavedAnnouncements'> extends True ? Prisma__SavedAnnouncementsClient<$Types.GetResult<SavedAnnouncementsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SavedAnnouncementsClient<$Types.GetResult<SavedAnnouncementsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first SavedAnnouncements that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedAnnouncementsFindFirstOrThrowArgs} args - Arguments to find a SavedAnnouncements
     * @example
     * // Get one SavedAnnouncements
     * const savedAnnouncements = await prisma.savedAnnouncements.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SavedAnnouncementsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SavedAnnouncementsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SavedAnnouncementsClient<$Types.GetResult<SavedAnnouncementsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more SavedAnnouncements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedAnnouncementsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SavedAnnouncements
     * const savedAnnouncements = await prisma.savedAnnouncements.findMany()
     * 
     * // Get first 10 SavedAnnouncements
     * const savedAnnouncements = await prisma.savedAnnouncements.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const savedAnnouncementsWithIdOnly = await prisma.savedAnnouncements.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SavedAnnouncementsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SavedAnnouncementsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SavedAnnouncementsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a SavedAnnouncements.
     * @param {SavedAnnouncementsCreateArgs} args - Arguments to create a SavedAnnouncements.
     * @example
     * // Create one SavedAnnouncements
     * const SavedAnnouncements = await prisma.savedAnnouncements.create({
     *   data: {
     *     // ... data to create a SavedAnnouncements
     *   }
     * })
     * 
    **/
    create<T extends SavedAnnouncementsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SavedAnnouncementsCreateArgs<ExtArgs>>
    ): Prisma__SavedAnnouncementsClient<$Types.GetResult<SavedAnnouncementsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many SavedAnnouncements.
     *     @param {SavedAnnouncementsCreateManyArgs} args - Arguments to create many SavedAnnouncements.
     *     @example
     *     // Create many SavedAnnouncements
     *     const savedAnnouncements = await prisma.savedAnnouncements.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SavedAnnouncementsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SavedAnnouncementsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SavedAnnouncements.
     * @param {SavedAnnouncementsDeleteArgs} args - Arguments to delete one SavedAnnouncements.
     * @example
     * // Delete one SavedAnnouncements
     * const SavedAnnouncements = await prisma.savedAnnouncements.delete({
     *   where: {
     *     // ... filter to delete one SavedAnnouncements
     *   }
     * })
     * 
    **/
    delete<T extends SavedAnnouncementsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SavedAnnouncementsDeleteArgs<ExtArgs>>
    ): Prisma__SavedAnnouncementsClient<$Types.GetResult<SavedAnnouncementsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one SavedAnnouncements.
     * @param {SavedAnnouncementsUpdateArgs} args - Arguments to update one SavedAnnouncements.
     * @example
     * // Update one SavedAnnouncements
     * const savedAnnouncements = await prisma.savedAnnouncements.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SavedAnnouncementsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SavedAnnouncementsUpdateArgs<ExtArgs>>
    ): Prisma__SavedAnnouncementsClient<$Types.GetResult<SavedAnnouncementsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more SavedAnnouncements.
     * @param {SavedAnnouncementsDeleteManyArgs} args - Arguments to filter SavedAnnouncements to delete.
     * @example
     * // Delete a few SavedAnnouncements
     * const { count } = await prisma.savedAnnouncements.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SavedAnnouncementsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SavedAnnouncementsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SavedAnnouncements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedAnnouncementsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SavedAnnouncements
     * const savedAnnouncements = await prisma.savedAnnouncements.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SavedAnnouncementsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SavedAnnouncementsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SavedAnnouncements.
     * @param {SavedAnnouncementsUpsertArgs} args - Arguments to update or create a SavedAnnouncements.
     * @example
     * // Update or create a SavedAnnouncements
     * const savedAnnouncements = await prisma.savedAnnouncements.upsert({
     *   create: {
     *     // ... data to create a SavedAnnouncements
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SavedAnnouncements we want to update
     *   }
     * })
    **/
    upsert<T extends SavedAnnouncementsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SavedAnnouncementsUpsertArgs<ExtArgs>>
    ): Prisma__SavedAnnouncementsClient<$Types.GetResult<SavedAnnouncementsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of SavedAnnouncements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedAnnouncementsCountArgs} args - Arguments to filter SavedAnnouncements to count.
     * @example
     * // Count the number of SavedAnnouncements
     * const count = await prisma.savedAnnouncements.count({
     *   where: {
     *     // ... the filter for the SavedAnnouncements we want to count
     *   }
     * })
    **/
    count<T extends SavedAnnouncementsCountArgs>(
      args?: Subset<T, SavedAnnouncementsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SavedAnnouncementsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SavedAnnouncements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedAnnouncementsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SavedAnnouncementsAggregateArgs>(args: Subset<T, SavedAnnouncementsAggregateArgs>): Prisma.PrismaPromise<GetSavedAnnouncementsAggregateType<T>>

    /**
     * Group by SavedAnnouncements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedAnnouncementsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SavedAnnouncementsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SavedAnnouncementsGroupByArgs['orderBy'] }
        : { orderBy?: SavedAnnouncementsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SavedAnnouncementsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSavedAnnouncementsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SavedAnnouncements.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SavedAnnouncementsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    buy<T extends BuyArgs<ExtArgs> = {}>(args?: Subset<T, BuyArgs<ExtArgs>>): Prisma__BuyClient<$Types.GetResult<BuyPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    rent<T extends RentArgs<ExtArgs> = {}>(args?: Subset<T, RentArgs<ExtArgs>>): Prisma__RentClient<$Types.GetResult<RentPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    auction<T extends AuctionArgs<ExtArgs> = {}>(args?: Subset<T, AuctionArgs<ExtArgs>>): Prisma__AuctionClient<$Types.GetResult<AuctionPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SavedAnnouncements base type for findUnique actions
   */
  export type SavedAnnouncementsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedAnnouncements
     */
    select?: SavedAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedAnnouncementsInclude<ExtArgs> | null
    /**
     * Filter, which SavedAnnouncements to fetch.
     */
    where: SavedAnnouncementsWhereUniqueInput
  }

  /**
   * SavedAnnouncements findUnique
   */
  export interface SavedAnnouncementsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SavedAnnouncementsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SavedAnnouncements findUniqueOrThrow
   */
  export type SavedAnnouncementsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedAnnouncements
     */
    select?: SavedAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedAnnouncementsInclude<ExtArgs> | null
    /**
     * Filter, which SavedAnnouncements to fetch.
     */
    where: SavedAnnouncementsWhereUniqueInput
  }


  /**
   * SavedAnnouncements base type for findFirst actions
   */
  export type SavedAnnouncementsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedAnnouncements
     */
    select?: SavedAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedAnnouncementsInclude<ExtArgs> | null
    /**
     * Filter, which SavedAnnouncements to fetch.
     */
    where?: SavedAnnouncementsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedAnnouncements to fetch.
     */
    orderBy?: Enumerable<SavedAnnouncementsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedAnnouncements.
     */
    cursor?: SavedAnnouncementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedAnnouncements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedAnnouncements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedAnnouncements.
     */
    distinct?: Enumerable<SavedAnnouncementsScalarFieldEnum>
  }

  /**
   * SavedAnnouncements findFirst
   */
  export interface SavedAnnouncementsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SavedAnnouncementsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SavedAnnouncements findFirstOrThrow
   */
  export type SavedAnnouncementsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedAnnouncements
     */
    select?: SavedAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedAnnouncementsInclude<ExtArgs> | null
    /**
     * Filter, which SavedAnnouncements to fetch.
     */
    where?: SavedAnnouncementsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedAnnouncements to fetch.
     */
    orderBy?: Enumerable<SavedAnnouncementsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedAnnouncements.
     */
    cursor?: SavedAnnouncementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedAnnouncements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedAnnouncements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedAnnouncements.
     */
    distinct?: Enumerable<SavedAnnouncementsScalarFieldEnum>
  }


  /**
   * SavedAnnouncements findMany
   */
  export type SavedAnnouncementsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedAnnouncements
     */
    select?: SavedAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedAnnouncementsInclude<ExtArgs> | null
    /**
     * Filter, which SavedAnnouncements to fetch.
     */
    where?: SavedAnnouncementsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedAnnouncements to fetch.
     */
    orderBy?: Enumerable<SavedAnnouncementsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SavedAnnouncements.
     */
    cursor?: SavedAnnouncementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedAnnouncements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedAnnouncements.
     */
    skip?: number
    distinct?: Enumerable<SavedAnnouncementsScalarFieldEnum>
  }


  /**
   * SavedAnnouncements create
   */
  export type SavedAnnouncementsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedAnnouncements
     */
    select?: SavedAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedAnnouncementsInclude<ExtArgs> | null
    /**
     * The data needed to create a SavedAnnouncements.
     */
    data: XOR<SavedAnnouncementsCreateInput, SavedAnnouncementsUncheckedCreateInput>
  }


  /**
   * SavedAnnouncements createMany
   */
  export type SavedAnnouncementsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SavedAnnouncements.
     */
    data: Enumerable<SavedAnnouncementsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SavedAnnouncements update
   */
  export type SavedAnnouncementsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedAnnouncements
     */
    select?: SavedAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedAnnouncementsInclude<ExtArgs> | null
    /**
     * The data needed to update a SavedAnnouncements.
     */
    data: XOR<SavedAnnouncementsUpdateInput, SavedAnnouncementsUncheckedUpdateInput>
    /**
     * Choose, which SavedAnnouncements to update.
     */
    where: SavedAnnouncementsWhereUniqueInput
  }


  /**
   * SavedAnnouncements updateMany
   */
  export type SavedAnnouncementsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SavedAnnouncements.
     */
    data: XOR<SavedAnnouncementsUpdateManyMutationInput, SavedAnnouncementsUncheckedUpdateManyInput>
    /**
     * Filter which SavedAnnouncements to update
     */
    where?: SavedAnnouncementsWhereInput
  }


  /**
   * SavedAnnouncements upsert
   */
  export type SavedAnnouncementsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedAnnouncements
     */
    select?: SavedAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedAnnouncementsInclude<ExtArgs> | null
    /**
     * The filter to search for the SavedAnnouncements to update in case it exists.
     */
    where: SavedAnnouncementsWhereUniqueInput
    /**
     * In case the SavedAnnouncements found by the `where` argument doesn't exist, create a new SavedAnnouncements with this data.
     */
    create: XOR<SavedAnnouncementsCreateInput, SavedAnnouncementsUncheckedCreateInput>
    /**
     * In case the SavedAnnouncements was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SavedAnnouncementsUpdateInput, SavedAnnouncementsUncheckedUpdateInput>
  }


  /**
   * SavedAnnouncements delete
   */
  export type SavedAnnouncementsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedAnnouncements
     */
    select?: SavedAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedAnnouncementsInclude<ExtArgs> | null
    /**
     * Filter which SavedAnnouncements to delete.
     */
    where: SavedAnnouncementsWhereUniqueInput
  }


  /**
   * SavedAnnouncements deleteMany
   */
  export type SavedAnnouncementsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedAnnouncements to delete
     */
    where?: SavedAnnouncementsWhereInput
  }


  /**
   * SavedAnnouncements without action
   */
  export type SavedAnnouncementsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedAnnouncements
     */
    select?: SavedAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedAnnouncementsInclude<ExtArgs> | null
  }



  /**
   * Model Sell
   */


  export type AggregateSell = {
    _count: SellCountAggregateOutputType | null
    _avg: SellAvgAggregateOutputType | null
    _sum: SellSumAggregateOutputType | null
    _min: SellMinAggregateOutputType | null
    _max: SellMaxAggregateOutputType | null
  }

  export type SellAvgAggregateOutputType = {
    id: number | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
    userId: number | null
  }

  export type SellSumAggregateOutputType = {
    id: number | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
    userId: number | null
  }

  export type SellMinAggregateOutputType = {
    id: number | null
    image: string | null
    address: string | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SellMaxAggregateOutputType = {
    id: number | null
    image: string | null
    address: string | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SellCountAggregateOutputType = {
    id: number
    image: number
    address: number
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SellAvgAggregateInputType = {
    id?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
    userId?: true
  }

  export type SellSumAggregateInputType = {
    id?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
    userId?: true
  }

  export type SellMinAggregateInputType = {
    id?: true
    image?: true
    address?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SellMaxAggregateInputType = {
    id?: true
    image?: true
    address?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SellCountAggregateInputType = {
    id?: true
    image?: true
    address?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SellAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sell to aggregate.
     */
    where?: SellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sells to fetch.
     */
    orderBy?: Enumerable<SellOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sells
    **/
    _count?: true | SellCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SellAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SellSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SellMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SellMaxAggregateInputType
  }

  export type GetSellAggregateType<T extends SellAggregateArgs> = {
        [P in keyof T & keyof AggregateSell]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSell[P]>
      : GetScalarType<T[P], AggregateSell[P]>
  }




  export type SellGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SellWhereInput
    orderBy?: Enumerable<SellOrderByWithAggregationInput>
    by: SellScalarFieldEnum[]
    having?: SellScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SellCountAggregateInputType | true
    _avg?: SellAvgAggregateInputType
    _sum?: SellSumAggregateInputType
    _min?: SellMinAggregateInputType
    _max?: SellMaxAggregateInputType
  }


  export type SellGroupByOutputType = {
    id: number
    image: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: SellCountAggregateOutputType | null
    _avg: SellAvgAggregateOutputType | null
    _sum: SellSumAggregateOutputType | null
    _min: SellMinAggregateOutputType | null
    _max: SellMaxAggregateOutputType | null
  }

  type GetSellGroupByPayload<T extends SellGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SellGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SellGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SellGroupByOutputType[P]>
            : GetScalarType<T[P], SellGroupByOutputType[P]>
        }
      >
    >


  export type SellSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image?: boolean
    address?: boolean
    bedrooms?: boolean
    sqFootage?: boolean
    bathrooms?: boolean
    floors?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["sell"]>

  export type SellSelectScalar = {
    id?: boolean
    image?: boolean
    address?: boolean
    bedrooms?: boolean
    sqFootage?: boolean
    bathrooms?: boolean
    floors?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SellInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type SellGetPayload<S extends boolean | null | undefined | SellArgs> = $Types.GetResult<SellPayload, S>

  type SellCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SellFindManyArgs, 'select' | 'include'> & {
      select?: SellCountAggregateInputType | true
    }

  export interface SellDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sell'], meta: { name: 'Sell' } }
    /**
     * Find zero or one Sell that matches the filter.
     * @param {SellFindUniqueArgs} args - Arguments to find a Sell
     * @example
     * // Get one Sell
     * const sell = await prisma.sell.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SellFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SellFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Sell'> extends True ? Prisma__SellClient<$Types.GetResult<SellPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SellClient<$Types.GetResult<SellPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Sell that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SellFindUniqueOrThrowArgs} args - Arguments to find a Sell
     * @example
     * // Get one Sell
     * const sell = await prisma.sell.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SellFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SellFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SellClient<$Types.GetResult<SellPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Sell that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellFindFirstArgs} args - Arguments to find a Sell
     * @example
     * // Get one Sell
     * const sell = await prisma.sell.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SellFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SellFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Sell'> extends True ? Prisma__SellClient<$Types.GetResult<SellPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SellClient<$Types.GetResult<SellPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Sell that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellFindFirstOrThrowArgs} args - Arguments to find a Sell
     * @example
     * // Get one Sell
     * const sell = await prisma.sell.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SellFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SellFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SellClient<$Types.GetResult<SellPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Sells that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sells
     * const sells = await prisma.sell.findMany()
     * 
     * // Get first 10 Sells
     * const sells = await prisma.sell.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sellWithIdOnly = await prisma.sell.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SellFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SellFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SellPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Sell.
     * @param {SellCreateArgs} args - Arguments to create a Sell.
     * @example
     * // Create one Sell
     * const Sell = await prisma.sell.create({
     *   data: {
     *     // ... data to create a Sell
     *   }
     * })
     * 
    **/
    create<T extends SellCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SellCreateArgs<ExtArgs>>
    ): Prisma__SellClient<$Types.GetResult<SellPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Sells.
     *     @param {SellCreateManyArgs} args - Arguments to create many Sells.
     *     @example
     *     // Create many Sells
     *     const sell = await prisma.sell.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SellCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SellCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sell.
     * @param {SellDeleteArgs} args - Arguments to delete one Sell.
     * @example
     * // Delete one Sell
     * const Sell = await prisma.sell.delete({
     *   where: {
     *     // ... filter to delete one Sell
     *   }
     * })
     * 
    **/
    delete<T extends SellDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SellDeleteArgs<ExtArgs>>
    ): Prisma__SellClient<$Types.GetResult<SellPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Sell.
     * @param {SellUpdateArgs} args - Arguments to update one Sell.
     * @example
     * // Update one Sell
     * const sell = await prisma.sell.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SellUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SellUpdateArgs<ExtArgs>>
    ): Prisma__SellClient<$Types.GetResult<SellPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Sells.
     * @param {SellDeleteManyArgs} args - Arguments to filter Sells to delete.
     * @example
     * // Delete a few Sells
     * const { count } = await prisma.sell.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SellDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SellDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sells
     * const sell = await prisma.sell.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SellUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SellUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sell.
     * @param {SellUpsertArgs} args - Arguments to update or create a Sell.
     * @example
     * // Update or create a Sell
     * const sell = await prisma.sell.upsert({
     *   create: {
     *     // ... data to create a Sell
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sell we want to update
     *   }
     * })
    **/
    upsert<T extends SellUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SellUpsertArgs<ExtArgs>>
    ): Prisma__SellClient<$Types.GetResult<SellPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Sells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellCountArgs} args - Arguments to filter Sells to count.
     * @example
     * // Count the number of Sells
     * const count = await prisma.sell.count({
     *   where: {
     *     // ... the filter for the Sells we want to count
     *   }
     * })
    **/
    count<T extends SellCountArgs>(
      args?: Subset<T, SellCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SellCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sell.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SellAggregateArgs>(args: Subset<T, SellAggregateArgs>): Prisma.PrismaPromise<GetSellAggregateType<T>>

    /**
     * Group by Sell.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SellGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SellGroupByArgs['orderBy'] }
        : { orderBy?: SellGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SellGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSellGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Sell.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SellClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Sell base type for findUnique actions
   */
  export type SellFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sell
     */
    select?: SellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellInclude<ExtArgs> | null
    /**
     * Filter, which Sell to fetch.
     */
    where: SellWhereUniqueInput
  }

  /**
   * Sell findUnique
   */
  export interface SellFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SellFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Sell findUniqueOrThrow
   */
  export type SellFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sell
     */
    select?: SellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellInclude<ExtArgs> | null
    /**
     * Filter, which Sell to fetch.
     */
    where: SellWhereUniqueInput
  }


  /**
   * Sell base type for findFirst actions
   */
  export type SellFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sell
     */
    select?: SellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellInclude<ExtArgs> | null
    /**
     * Filter, which Sell to fetch.
     */
    where?: SellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sells to fetch.
     */
    orderBy?: Enumerable<SellOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sells.
     */
    cursor?: SellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sells.
     */
    distinct?: Enumerable<SellScalarFieldEnum>
  }

  /**
   * Sell findFirst
   */
  export interface SellFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SellFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Sell findFirstOrThrow
   */
  export type SellFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sell
     */
    select?: SellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellInclude<ExtArgs> | null
    /**
     * Filter, which Sell to fetch.
     */
    where?: SellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sells to fetch.
     */
    orderBy?: Enumerable<SellOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sells.
     */
    cursor?: SellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sells.
     */
    distinct?: Enumerable<SellScalarFieldEnum>
  }


  /**
   * Sell findMany
   */
  export type SellFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sell
     */
    select?: SellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellInclude<ExtArgs> | null
    /**
     * Filter, which Sells to fetch.
     */
    where?: SellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sells to fetch.
     */
    orderBy?: Enumerable<SellOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sells.
     */
    cursor?: SellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sells.
     */
    skip?: number
    distinct?: Enumerable<SellScalarFieldEnum>
  }


  /**
   * Sell create
   */
  export type SellCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sell
     */
    select?: SellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellInclude<ExtArgs> | null
    /**
     * The data needed to create a Sell.
     */
    data: XOR<SellCreateInput, SellUncheckedCreateInput>
  }


  /**
   * Sell createMany
   */
  export type SellCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sells.
     */
    data: Enumerable<SellCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Sell update
   */
  export type SellUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sell
     */
    select?: SellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellInclude<ExtArgs> | null
    /**
     * The data needed to update a Sell.
     */
    data: XOR<SellUpdateInput, SellUncheckedUpdateInput>
    /**
     * Choose, which Sell to update.
     */
    where: SellWhereUniqueInput
  }


  /**
   * Sell updateMany
   */
  export type SellUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sells.
     */
    data: XOR<SellUpdateManyMutationInput, SellUncheckedUpdateManyInput>
    /**
     * Filter which Sells to update
     */
    where?: SellWhereInput
  }


  /**
   * Sell upsert
   */
  export type SellUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sell
     */
    select?: SellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellInclude<ExtArgs> | null
    /**
     * The filter to search for the Sell to update in case it exists.
     */
    where: SellWhereUniqueInput
    /**
     * In case the Sell found by the `where` argument doesn't exist, create a new Sell with this data.
     */
    create: XOR<SellCreateInput, SellUncheckedCreateInput>
    /**
     * In case the Sell was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SellUpdateInput, SellUncheckedUpdateInput>
  }


  /**
   * Sell delete
   */
  export type SellDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sell
     */
    select?: SellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellInclude<ExtArgs> | null
    /**
     * Filter which Sell to delete.
     */
    where: SellWhereUniqueInput
  }


  /**
   * Sell deleteMany
   */
  export type SellDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sells to delete
     */
    where?: SellWhereInput
  }


  /**
   * Sell without action
   */
  export type SellArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sell
     */
    select?: SellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SellInclude<ExtArgs> | null
  }



  /**
   * Model Valuate
   */


  export type AggregateValuate = {
    _count: ValuateCountAggregateOutputType | null
    _avg: ValuateAvgAggregateOutputType | null
    _sum: ValuateSumAggregateOutputType | null
    _min: ValuateMinAggregateOutputType | null
    _max: ValuateMaxAggregateOutputType | null
  }

  export type ValuateAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
  }

  export type ValuateSumAggregateOutputType = {
    id: number | null
    userId: number | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
  }

  export type ValuateMinAggregateOutputType = {
    id: number | null
    userId: number | null
    image: string | null
    address: string | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ValuateMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    image: string | null
    address: string | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ValuateCountAggregateOutputType = {
    id: number
    userId: number
    image: number
    address: number
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ValuateAvgAggregateInputType = {
    id?: true
    userId?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
  }

  export type ValuateSumAggregateInputType = {
    id?: true
    userId?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
  }

  export type ValuateMinAggregateInputType = {
    id?: true
    userId?: true
    image?: true
    address?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ValuateMaxAggregateInputType = {
    id?: true
    userId?: true
    image?: true
    address?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ValuateCountAggregateInputType = {
    id?: true
    userId?: true
    image?: true
    address?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ValuateAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Valuate to aggregate.
     */
    where?: ValuateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Valuates to fetch.
     */
    orderBy?: Enumerable<ValuateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ValuateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Valuates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Valuates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Valuates
    **/
    _count?: true | ValuateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ValuateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ValuateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ValuateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ValuateMaxAggregateInputType
  }

  export type GetValuateAggregateType<T extends ValuateAggregateArgs> = {
        [P in keyof T & keyof AggregateValuate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateValuate[P]>
      : GetScalarType<T[P], AggregateValuate[P]>
  }




  export type ValuateGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ValuateWhereInput
    orderBy?: Enumerable<ValuateOrderByWithAggregationInput>
    by: ValuateScalarFieldEnum[]
    having?: ValuateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ValuateCountAggregateInputType | true
    _avg?: ValuateAvgAggregateInputType
    _sum?: ValuateSumAggregateInputType
    _min?: ValuateMinAggregateInputType
    _max?: ValuateMaxAggregateInputType
  }


  export type ValuateGroupByOutputType = {
    id: number
    userId: number
    image: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    createdAt: Date
    updatedAt: Date
    _count: ValuateCountAggregateOutputType | null
    _avg: ValuateAvgAggregateOutputType | null
    _sum: ValuateSumAggregateOutputType | null
    _min: ValuateMinAggregateOutputType | null
    _max: ValuateMaxAggregateOutputType | null
  }

  type GetValuateGroupByPayload<T extends ValuateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ValuateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ValuateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ValuateGroupByOutputType[P]>
            : GetScalarType<T[P], ValuateGroupByOutputType[P]>
        }
      >
    >


  export type ValuateSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    image?: boolean
    address?: boolean
    bedrooms?: boolean
    sqFootage?: boolean
    bathrooms?: boolean
    floors?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["valuate"]>

  export type ValuateSelectScalar = {
    id?: boolean
    userId?: boolean
    image?: boolean
    address?: boolean
    bedrooms?: boolean
    sqFootage?: boolean
    bathrooms?: boolean
    floors?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ValuateInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type ValuateGetPayload<S extends boolean | null | undefined | ValuateArgs> = $Types.GetResult<ValuatePayload, S>

  type ValuateCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ValuateFindManyArgs, 'select' | 'include'> & {
      select?: ValuateCountAggregateInputType | true
    }

  export interface ValuateDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Valuate'], meta: { name: 'Valuate' } }
    /**
     * Find zero or one Valuate that matches the filter.
     * @param {ValuateFindUniqueArgs} args - Arguments to find a Valuate
     * @example
     * // Get one Valuate
     * const valuate = await prisma.valuate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ValuateFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ValuateFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Valuate'> extends True ? Prisma__ValuateClient<$Types.GetResult<ValuatePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ValuateClient<$Types.GetResult<ValuatePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Valuate that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ValuateFindUniqueOrThrowArgs} args - Arguments to find a Valuate
     * @example
     * // Get one Valuate
     * const valuate = await prisma.valuate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ValuateFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ValuateFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ValuateClient<$Types.GetResult<ValuatePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Valuate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuateFindFirstArgs} args - Arguments to find a Valuate
     * @example
     * // Get one Valuate
     * const valuate = await prisma.valuate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ValuateFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ValuateFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Valuate'> extends True ? Prisma__ValuateClient<$Types.GetResult<ValuatePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ValuateClient<$Types.GetResult<ValuatePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Valuate that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuateFindFirstOrThrowArgs} args - Arguments to find a Valuate
     * @example
     * // Get one Valuate
     * const valuate = await prisma.valuate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ValuateFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ValuateFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ValuateClient<$Types.GetResult<ValuatePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Valuates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Valuates
     * const valuates = await prisma.valuate.findMany()
     * 
     * // Get first 10 Valuates
     * const valuates = await prisma.valuate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const valuateWithIdOnly = await prisma.valuate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ValuateFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ValuateFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ValuatePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Valuate.
     * @param {ValuateCreateArgs} args - Arguments to create a Valuate.
     * @example
     * // Create one Valuate
     * const Valuate = await prisma.valuate.create({
     *   data: {
     *     // ... data to create a Valuate
     *   }
     * })
     * 
    **/
    create<T extends ValuateCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ValuateCreateArgs<ExtArgs>>
    ): Prisma__ValuateClient<$Types.GetResult<ValuatePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Valuates.
     *     @param {ValuateCreateManyArgs} args - Arguments to create many Valuates.
     *     @example
     *     // Create many Valuates
     *     const valuate = await prisma.valuate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ValuateCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ValuateCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Valuate.
     * @param {ValuateDeleteArgs} args - Arguments to delete one Valuate.
     * @example
     * // Delete one Valuate
     * const Valuate = await prisma.valuate.delete({
     *   where: {
     *     // ... filter to delete one Valuate
     *   }
     * })
     * 
    **/
    delete<T extends ValuateDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ValuateDeleteArgs<ExtArgs>>
    ): Prisma__ValuateClient<$Types.GetResult<ValuatePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Valuate.
     * @param {ValuateUpdateArgs} args - Arguments to update one Valuate.
     * @example
     * // Update one Valuate
     * const valuate = await prisma.valuate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ValuateUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ValuateUpdateArgs<ExtArgs>>
    ): Prisma__ValuateClient<$Types.GetResult<ValuatePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Valuates.
     * @param {ValuateDeleteManyArgs} args - Arguments to filter Valuates to delete.
     * @example
     * // Delete a few Valuates
     * const { count } = await prisma.valuate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ValuateDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ValuateDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Valuates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Valuates
     * const valuate = await prisma.valuate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ValuateUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ValuateUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Valuate.
     * @param {ValuateUpsertArgs} args - Arguments to update or create a Valuate.
     * @example
     * // Update or create a Valuate
     * const valuate = await prisma.valuate.upsert({
     *   create: {
     *     // ... data to create a Valuate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Valuate we want to update
     *   }
     * })
    **/
    upsert<T extends ValuateUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ValuateUpsertArgs<ExtArgs>>
    ): Prisma__ValuateClient<$Types.GetResult<ValuatePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Valuates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuateCountArgs} args - Arguments to filter Valuates to count.
     * @example
     * // Count the number of Valuates
     * const count = await prisma.valuate.count({
     *   where: {
     *     // ... the filter for the Valuates we want to count
     *   }
     * })
    **/
    count<T extends ValuateCountArgs>(
      args?: Subset<T, ValuateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ValuateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Valuate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ValuateAggregateArgs>(args: Subset<T, ValuateAggregateArgs>): Prisma.PrismaPromise<GetValuateAggregateType<T>>

    /**
     * Group by Valuate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ValuateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ValuateGroupByArgs['orderBy'] }
        : { orderBy?: ValuateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ValuateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetValuateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Valuate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ValuateClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Valuate base type for findUnique actions
   */
  export type ValuateFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Valuate
     */
    select?: ValuateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuateInclude<ExtArgs> | null
    /**
     * Filter, which Valuate to fetch.
     */
    where: ValuateWhereUniqueInput
  }

  /**
   * Valuate findUnique
   */
  export interface ValuateFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ValuateFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Valuate findUniqueOrThrow
   */
  export type ValuateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Valuate
     */
    select?: ValuateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuateInclude<ExtArgs> | null
    /**
     * Filter, which Valuate to fetch.
     */
    where: ValuateWhereUniqueInput
  }


  /**
   * Valuate base type for findFirst actions
   */
  export type ValuateFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Valuate
     */
    select?: ValuateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuateInclude<ExtArgs> | null
    /**
     * Filter, which Valuate to fetch.
     */
    where?: ValuateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Valuates to fetch.
     */
    orderBy?: Enumerable<ValuateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Valuates.
     */
    cursor?: ValuateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Valuates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Valuates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Valuates.
     */
    distinct?: Enumerable<ValuateScalarFieldEnum>
  }

  /**
   * Valuate findFirst
   */
  export interface ValuateFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ValuateFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Valuate findFirstOrThrow
   */
  export type ValuateFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Valuate
     */
    select?: ValuateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuateInclude<ExtArgs> | null
    /**
     * Filter, which Valuate to fetch.
     */
    where?: ValuateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Valuates to fetch.
     */
    orderBy?: Enumerable<ValuateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Valuates.
     */
    cursor?: ValuateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Valuates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Valuates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Valuates.
     */
    distinct?: Enumerable<ValuateScalarFieldEnum>
  }


  /**
   * Valuate findMany
   */
  export type ValuateFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Valuate
     */
    select?: ValuateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuateInclude<ExtArgs> | null
    /**
     * Filter, which Valuates to fetch.
     */
    where?: ValuateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Valuates to fetch.
     */
    orderBy?: Enumerable<ValuateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Valuates.
     */
    cursor?: ValuateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Valuates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Valuates.
     */
    skip?: number
    distinct?: Enumerable<ValuateScalarFieldEnum>
  }


  /**
   * Valuate create
   */
  export type ValuateCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Valuate
     */
    select?: ValuateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuateInclude<ExtArgs> | null
    /**
     * The data needed to create a Valuate.
     */
    data: XOR<ValuateCreateInput, ValuateUncheckedCreateInput>
  }


  /**
   * Valuate createMany
   */
  export type ValuateCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Valuates.
     */
    data: Enumerable<ValuateCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Valuate update
   */
  export type ValuateUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Valuate
     */
    select?: ValuateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuateInclude<ExtArgs> | null
    /**
     * The data needed to update a Valuate.
     */
    data: XOR<ValuateUpdateInput, ValuateUncheckedUpdateInput>
    /**
     * Choose, which Valuate to update.
     */
    where: ValuateWhereUniqueInput
  }


  /**
   * Valuate updateMany
   */
  export type ValuateUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Valuates.
     */
    data: XOR<ValuateUpdateManyMutationInput, ValuateUncheckedUpdateManyInput>
    /**
     * Filter which Valuates to update
     */
    where?: ValuateWhereInput
  }


  /**
   * Valuate upsert
   */
  export type ValuateUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Valuate
     */
    select?: ValuateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuateInclude<ExtArgs> | null
    /**
     * The filter to search for the Valuate to update in case it exists.
     */
    where: ValuateWhereUniqueInput
    /**
     * In case the Valuate found by the `where` argument doesn't exist, create a new Valuate with this data.
     */
    create: XOR<ValuateCreateInput, ValuateUncheckedCreateInput>
    /**
     * In case the Valuate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ValuateUpdateInput, ValuateUncheckedUpdateInput>
  }


  /**
   * Valuate delete
   */
  export type ValuateDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Valuate
     */
    select?: ValuateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuateInclude<ExtArgs> | null
    /**
     * Filter which Valuate to delete.
     */
    where: ValuateWhereUniqueInput
  }


  /**
   * Valuate deleteMany
   */
  export type ValuateDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Valuates to delete
     */
    where?: ValuateWhereInput
  }


  /**
   * Valuate without action
   */
  export type ValuateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Valuate
     */
    select?: ValuateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuateInclude<ExtArgs> | null
  }



  /**
   * Model SavedSearches
   */


  export type AggregateSavedSearches = {
    _count: SavedSearchesCountAggregateOutputType | null
    _avg: SavedSearchesAvgAggregateOutputType | null
    _sum: SavedSearchesSumAggregateOutputType | null
    _min: SavedSearchesMinAggregateOutputType | null
    _max: SavedSearchesMaxAggregateOutputType | null
  }

  export type SavedSearchesAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SavedSearchesSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SavedSearchesMinAggregateOutputType = {
    id: number | null
    userId: number | null
    searchBar: string | null
    aquireType: string | null
    houseType: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SavedSearchesMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    searchBar: string | null
    aquireType: string | null
    houseType: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SavedSearchesCountAggregateOutputType = {
    id: number
    userId: number
    searchBar: number
    aquireType: number
    houseType: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SavedSearchesAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SavedSearchesSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SavedSearchesMinAggregateInputType = {
    id?: true
    userId?: true
    searchBar?: true
    aquireType?: true
    houseType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SavedSearchesMaxAggregateInputType = {
    id?: true
    userId?: true
    searchBar?: true
    aquireType?: true
    houseType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SavedSearchesCountAggregateInputType = {
    id?: true
    userId?: true
    searchBar?: true
    aquireType?: true
    houseType?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SavedSearchesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedSearches to aggregate.
     */
    where?: SavedSearchesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedSearches to fetch.
     */
    orderBy?: Enumerable<SavedSearchesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SavedSearchesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedSearches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedSearches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SavedSearches
    **/
    _count?: true | SavedSearchesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SavedSearchesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SavedSearchesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SavedSearchesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SavedSearchesMaxAggregateInputType
  }

  export type GetSavedSearchesAggregateType<T extends SavedSearchesAggregateArgs> = {
        [P in keyof T & keyof AggregateSavedSearches]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSavedSearches[P]>
      : GetScalarType<T[P], AggregateSavedSearches[P]>
  }




  export type SavedSearchesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SavedSearchesWhereInput
    orderBy?: Enumerable<SavedSearchesOrderByWithAggregationInput>
    by: SavedSearchesScalarFieldEnum[]
    having?: SavedSearchesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SavedSearchesCountAggregateInputType | true
    _avg?: SavedSearchesAvgAggregateInputType
    _sum?: SavedSearchesSumAggregateInputType
    _min?: SavedSearchesMinAggregateInputType
    _max?: SavedSearchesMaxAggregateInputType
  }


  export type SavedSearchesGroupByOutputType = {
    id: number
    userId: number
    searchBar: string
    aquireType: string
    houseType: string
    createdAt: Date
    updatedAt: Date
    _count: SavedSearchesCountAggregateOutputType | null
    _avg: SavedSearchesAvgAggregateOutputType | null
    _sum: SavedSearchesSumAggregateOutputType | null
    _min: SavedSearchesMinAggregateOutputType | null
    _max: SavedSearchesMaxAggregateOutputType | null
  }

  type GetSavedSearchesGroupByPayload<T extends SavedSearchesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SavedSearchesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SavedSearchesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SavedSearchesGroupByOutputType[P]>
            : GetScalarType<T[P], SavedSearchesGroupByOutputType[P]>
        }
      >
    >


  export type SavedSearchesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    searchBar?: boolean
    aquireType?: boolean
    houseType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["savedSearches"]>

  export type SavedSearchesSelectScalar = {
    id?: boolean
    userId?: boolean
    searchBar?: boolean
    aquireType?: boolean
    houseType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SavedSearchesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type SavedSearchesGetPayload<S extends boolean | null | undefined | SavedSearchesArgs> = $Types.GetResult<SavedSearchesPayload, S>

  type SavedSearchesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SavedSearchesFindManyArgs, 'select' | 'include'> & {
      select?: SavedSearchesCountAggregateInputType | true
    }

  export interface SavedSearchesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SavedSearches'], meta: { name: 'SavedSearches' } }
    /**
     * Find zero or one SavedSearches that matches the filter.
     * @param {SavedSearchesFindUniqueArgs} args - Arguments to find a SavedSearches
     * @example
     * // Get one SavedSearches
     * const savedSearches = await prisma.savedSearches.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SavedSearchesFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SavedSearchesFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SavedSearches'> extends True ? Prisma__SavedSearchesClient<$Types.GetResult<SavedSearchesPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SavedSearchesClient<$Types.GetResult<SavedSearchesPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one SavedSearches that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SavedSearchesFindUniqueOrThrowArgs} args - Arguments to find a SavedSearches
     * @example
     * // Get one SavedSearches
     * const savedSearches = await prisma.savedSearches.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SavedSearchesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SavedSearchesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SavedSearchesClient<$Types.GetResult<SavedSearchesPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first SavedSearches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedSearchesFindFirstArgs} args - Arguments to find a SavedSearches
     * @example
     * // Get one SavedSearches
     * const savedSearches = await prisma.savedSearches.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SavedSearchesFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SavedSearchesFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SavedSearches'> extends True ? Prisma__SavedSearchesClient<$Types.GetResult<SavedSearchesPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SavedSearchesClient<$Types.GetResult<SavedSearchesPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first SavedSearches that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedSearchesFindFirstOrThrowArgs} args - Arguments to find a SavedSearches
     * @example
     * // Get one SavedSearches
     * const savedSearches = await prisma.savedSearches.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SavedSearchesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SavedSearchesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SavedSearchesClient<$Types.GetResult<SavedSearchesPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more SavedSearches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedSearchesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SavedSearches
     * const savedSearches = await prisma.savedSearches.findMany()
     * 
     * // Get first 10 SavedSearches
     * const savedSearches = await prisma.savedSearches.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const savedSearchesWithIdOnly = await prisma.savedSearches.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SavedSearchesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SavedSearchesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SavedSearchesPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a SavedSearches.
     * @param {SavedSearchesCreateArgs} args - Arguments to create a SavedSearches.
     * @example
     * // Create one SavedSearches
     * const SavedSearches = await prisma.savedSearches.create({
     *   data: {
     *     // ... data to create a SavedSearches
     *   }
     * })
     * 
    **/
    create<T extends SavedSearchesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SavedSearchesCreateArgs<ExtArgs>>
    ): Prisma__SavedSearchesClient<$Types.GetResult<SavedSearchesPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many SavedSearches.
     *     @param {SavedSearchesCreateManyArgs} args - Arguments to create many SavedSearches.
     *     @example
     *     // Create many SavedSearches
     *     const savedSearches = await prisma.savedSearches.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SavedSearchesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SavedSearchesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SavedSearches.
     * @param {SavedSearchesDeleteArgs} args - Arguments to delete one SavedSearches.
     * @example
     * // Delete one SavedSearches
     * const SavedSearches = await prisma.savedSearches.delete({
     *   where: {
     *     // ... filter to delete one SavedSearches
     *   }
     * })
     * 
    **/
    delete<T extends SavedSearchesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SavedSearchesDeleteArgs<ExtArgs>>
    ): Prisma__SavedSearchesClient<$Types.GetResult<SavedSearchesPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one SavedSearches.
     * @param {SavedSearchesUpdateArgs} args - Arguments to update one SavedSearches.
     * @example
     * // Update one SavedSearches
     * const savedSearches = await prisma.savedSearches.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SavedSearchesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SavedSearchesUpdateArgs<ExtArgs>>
    ): Prisma__SavedSearchesClient<$Types.GetResult<SavedSearchesPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more SavedSearches.
     * @param {SavedSearchesDeleteManyArgs} args - Arguments to filter SavedSearches to delete.
     * @example
     * // Delete a few SavedSearches
     * const { count } = await prisma.savedSearches.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SavedSearchesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SavedSearchesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SavedSearches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedSearchesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SavedSearches
     * const savedSearches = await prisma.savedSearches.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SavedSearchesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SavedSearchesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SavedSearches.
     * @param {SavedSearchesUpsertArgs} args - Arguments to update or create a SavedSearches.
     * @example
     * // Update or create a SavedSearches
     * const savedSearches = await prisma.savedSearches.upsert({
     *   create: {
     *     // ... data to create a SavedSearches
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SavedSearches we want to update
     *   }
     * })
    **/
    upsert<T extends SavedSearchesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SavedSearchesUpsertArgs<ExtArgs>>
    ): Prisma__SavedSearchesClient<$Types.GetResult<SavedSearchesPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of SavedSearches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedSearchesCountArgs} args - Arguments to filter SavedSearches to count.
     * @example
     * // Count the number of SavedSearches
     * const count = await prisma.savedSearches.count({
     *   where: {
     *     // ... the filter for the SavedSearches we want to count
     *   }
     * })
    **/
    count<T extends SavedSearchesCountArgs>(
      args?: Subset<T, SavedSearchesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SavedSearchesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SavedSearches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedSearchesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SavedSearchesAggregateArgs>(args: Subset<T, SavedSearchesAggregateArgs>): Prisma.PrismaPromise<GetSavedSearchesAggregateType<T>>

    /**
     * Group by SavedSearches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedSearchesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SavedSearchesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SavedSearchesGroupByArgs['orderBy'] }
        : { orderBy?: SavedSearchesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SavedSearchesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSavedSearchesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SavedSearches.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SavedSearchesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SavedSearches base type for findUnique actions
   */
  export type SavedSearchesFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedSearches
     */
    select?: SavedSearchesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedSearchesInclude<ExtArgs> | null
    /**
     * Filter, which SavedSearches to fetch.
     */
    where: SavedSearchesWhereUniqueInput
  }

  /**
   * SavedSearches findUnique
   */
  export interface SavedSearchesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SavedSearchesFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SavedSearches findUniqueOrThrow
   */
  export type SavedSearchesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedSearches
     */
    select?: SavedSearchesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedSearchesInclude<ExtArgs> | null
    /**
     * Filter, which SavedSearches to fetch.
     */
    where: SavedSearchesWhereUniqueInput
  }


  /**
   * SavedSearches base type for findFirst actions
   */
  export type SavedSearchesFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedSearches
     */
    select?: SavedSearchesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedSearchesInclude<ExtArgs> | null
    /**
     * Filter, which SavedSearches to fetch.
     */
    where?: SavedSearchesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedSearches to fetch.
     */
    orderBy?: Enumerable<SavedSearchesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedSearches.
     */
    cursor?: SavedSearchesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedSearches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedSearches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedSearches.
     */
    distinct?: Enumerable<SavedSearchesScalarFieldEnum>
  }

  /**
   * SavedSearches findFirst
   */
  export interface SavedSearchesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SavedSearchesFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SavedSearches findFirstOrThrow
   */
  export type SavedSearchesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedSearches
     */
    select?: SavedSearchesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedSearchesInclude<ExtArgs> | null
    /**
     * Filter, which SavedSearches to fetch.
     */
    where?: SavedSearchesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedSearches to fetch.
     */
    orderBy?: Enumerable<SavedSearchesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedSearches.
     */
    cursor?: SavedSearchesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedSearches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedSearches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedSearches.
     */
    distinct?: Enumerable<SavedSearchesScalarFieldEnum>
  }


  /**
   * SavedSearches findMany
   */
  export type SavedSearchesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedSearches
     */
    select?: SavedSearchesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedSearchesInclude<ExtArgs> | null
    /**
     * Filter, which SavedSearches to fetch.
     */
    where?: SavedSearchesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedSearches to fetch.
     */
    orderBy?: Enumerable<SavedSearchesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SavedSearches.
     */
    cursor?: SavedSearchesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedSearches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedSearches.
     */
    skip?: number
    distinct?: Enumerable<SavedSearchesScalarFieldEnum>
  }


  /**
   * SavedSearches create
   */
  export type SavedSearchesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedSearches
     */
    select?: SavedSearchesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedSearchesInclude<ExtArgs> | null
    /**
     * The data needed to create a SavedSearches.
     */
    data: XOR<SavedSearchesCreateInput, SavedSearchesUncheckedCreateInput>
  }


  /**
   * SavedSearches createMany
   */
  export type SavedSearchesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SavedSearches.
     */
    data: Enumerable<SavedSearchesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SavedSearches update
   */
  export type SavedSearchesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedSearches
     */
    select?: SavedSearchesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedSearchesInclude<ExtArgs> | null
    /**
     * The data needed to update a SavedSearches.
     */
    data: XOR<SavedSearchesUpdateInput, SavedSearchesUncheckedUpdateInput>
    /**
     * Choose, which SavedSearches to update.
     */
    where: SavedSearchesWhereUniqueInput
  }


  /**
   * SavedSearches updateMany
   */
  export type SavedSearchesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SavedSearches.
     */
    data: XOR<SavedSearchesUpdateManyMutationInput, SavedSearchesUncheckedUpdateManyInput>
    /**
     * Filter which SavedSearches to update
     */
    where?: SavedSearchesWhereInput
  }


  /**
   * SavedSearches upsert
   */
  export type SavedSearchesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedSearches
     */
    select?: SavedSearchesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedSearchesInclude<ExtArgs> | null
    /**
     * The filter to search for the SavedSearches to update in case it exists.
     */
    where: SavedSearchesWhereUniqueInput
    /**
     * In case the SavedSearches found by the `where` argument doesn't exist, create a new SavedSearches with this data.
     */
    create: XOR<SavedSearchesCreateInput, SavedSearchesUncheckedCreateInput>
    /**
     * In case the SavedSearches was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SavedSearchesUpdateInput, SavedSearchesUncheckedUpdateInput>
  }


  /**
   * SavedSearches delete
   */
  export type SavedSearchesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedSearches
     */
    select?: SavedSearchesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedSearchesInclude<ExtArgs> | null
    /**
     * Filter which SavedSearches to delete.
     */
    where: SavedSearchesWhereUniqueInput
  }


  /**
   * SavedSearches deleteMany
   */
  export type SavedSearchesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedSearches to delete
     */
    where?: SavedSearchesWhereInput
  }


  /**
   * SavedSearches without action
   */
  export type SavedSearchesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedSearches
     */
    select?: SavedSearchesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedSearchesInclude<ExtArgs> | null
  }



  /**
   * Model HiddenAnnouncements
   */


  export type AggregateHiddenAnnouncements = {
    _count: HiddenAnnouncementsCountAggregateOutputType | null
    _avg: HiddenAnnouncementsAvgAggregateOutputType | null
    _sum: HiddenAnnouncementsSumAggregateOutputType | null
    _min: HiddenAnnouncementsMinAggregateOutputType | null
    _max: HiddenAnnouncementsMaxAggregateOutputType | null
  }

  export type HiddenAnnouncementsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type HiddenAnnouncementsSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type HiddenAnnouncementsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HiddenAnnouncementsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HiddenAnnouncementsCountAggregateOutputType = {
    id: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HiddenAnnouncementsAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type HiddenAnnouncementsSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type HiddenAnnouncementsMinAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HiddenAnnouncementsMaxAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HiddenAnnouncementsCountAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HiddenAnnouncementsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which HiddenAnnouncements to aggregate.
     */
    where?: HiddenAnnouncementsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HiddenAnnouncements to fetch.
     */
    orderBy?: Enumerable<HiddenAnnouncementsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HiddenAnnouncementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HiddenAnnouncements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HiddenAnnouncements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HiddenAnnouncements
    **/
    _count?: true | HiddenAnnouncementsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HiddenAnnouncementsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HiddenAnnouncementsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HiddenAnnouncementsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HiddenAnnouncementsMaxAggregateInputType
  }

  export type GetHiddenAnnouncementsAggregateType<T extends HiddenAnnouncementsAggregateArgs> = {
        [P in keyof T & keyof AggregateHiddenAnnouncements]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHiddenAnnouncements[P]>
      : GetScalarType<T[P], AggregateHiddenAnnouncements[P]>
  }




  export type HiddenAnnouncementsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: HiddenAnnouncementsWhereInput
    orderBy?: Enumerable<HiddenAnnouncementsOrderByWithAggregationInput>
    by: HiddenAnnouncementsScalarFieldEnum[]
    having?: HiddenAnnouncementsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HiddenAnnouncementsCountAggregateInputType | true
    _avg?: HiddenAnnouncementsAvgAggregateInputType
    _sum?: HiddenAnnouncementsSumAggregateInputType
    _min?: HiddenAnnouncementsMinAggregateInputType
    _max?: HiddenAnnouncementsMaxAggregateInputType
  }


  export type HiddenAnnouncementsGroupByOutputType = {
    id: number
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: HiddenAnnouncementsCountAggregateOutputType | null
    _avg: HiddenAnnouncementsAvgAggregateOutputType | null
    _sum: HiddenAnnouncementsSumAggregateOutputType | null
    _min: HiddenAnnouncementsMinAggregateOutputType | null
    _max: HiddenAnnouncementsMaxAggregateOutputType | null
  }

  type GetHiddenAnnouncementsGroupByPayload<T extends HiddenAnnouncementsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<HiddenAnnouncementsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HiddenAnnouncementsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HiddenAnnouncementsGroupByOutputType[P]>
            : GetScalarType<T[P], HiddenAnnouncementsGroupByOutputType[P]>
        }
      >
    >


  export type HiddenAnnouncementsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
    buy?: boolean | BuyArgs<ExtArgs>
    rent?: boolean | RentArgs<ExtArgs>
    auction?: boolean | AuctionArgs<ExtArgs>
  }, ExtArgs["result"]["hiddenAnnouncements"]>

  export type HiddenAnnouncementsSelectScalar = {
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HiddenAnnouncementsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    buy?: boolean | BuyArgs<ExtArgs>
    rent?: boolean | RentArgs<ExtArgs>
    auction?: boolean | AuctionArgs<ExtArgs>
  }


  type HiddenAnnouncementsGetPayload<S extends boolean | null | undefined | HiddenAnnouncementsArgs> = $Types.GetResult<HiddenAnnouncementsPayload, S>

  type HiddenAnnouncementsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<HiddenAnnouncementsFindManyArgs, 'select' | 'include'> & {
      select?: HiddenAnnouncementsCountAggregateInputType | true
    }

  export interface HiddenAnnouncementsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HiddenAnnouncements'], meta: { name: 'HiddenAnnouncements' } }
    /**
     * Find zero or one HiddenAnnouncements that matches the filter.
     * @param {HiddenAnnouncementsFindUniqueArgs} args - Arguments to find a HiddenAnnouncements
     * @example
     * // Get one HiddenAnnouncements
     * const hiddenAnnouncements = await prisma.hiddenAnnouncements.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HiddenAnnouncementsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HiddenAnnouncementsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'HiddenAnnouncements'> extends True ? Prisma__HiddenAnnouncementsClient<$Types.GetResult<HiddenAnnouncementsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__HiddenAnnouncementsClient<$Types.GetResult<HiddenAnnouncementsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one HiddenAnnouncements that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HiddenAnnouncementsFindUniqueOrThrowArgs} args - Arguments to find a HiddenAnnouncements
     * @example
     * // Get one HiddenAnnouncements
     * const hiddenAnnouncements = await prisma.hiddenAnnouncements.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HiddenAnnouncementsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HiddenAnnouncementsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HiddenAnnouncementsClient<$Types.GetResult<HiddenAnnouncementsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first HiddenAnnouncements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HiddenAnnouncementsFindFirstArgs} args - Arguments to find a HiddenAnnouncements
     * @example
     * // Get one HiddenAnnouncements
     * const hiddenAnnouncements = await prisma.hiddenAnnouncements.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HiddenAnnouncementsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HiddenAnnouncementsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'HiddenAnnouncements'> extends True ? Prisma__HiddenAnnouncementsClient<$Types.GetResult<HiddenAnnouncementsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__HiddenAnnouncementsClient<$Types.GetResult<HiddenAnnouncementsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first HiddenAnnouncements that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HiddenAnnouncementsFindFirstOrThrowArgs} args - Arguments to find a HiddenAnnouncements
     * @example
     * // Get one HiddenAnnouncements
     * const hiddenAnnouncements = await prisma.hiddenAnnouncements.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HiddenAnnouncementsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HiddenAnnouncementsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HiddenAnnouncementsClient<$Types.GetResult<HiddenAnnouncementsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more HiddenAnnouncements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HiddenAnnouncementsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HiddenAnnouncements
     * const hiddenAnnouncements = await prisma.hiddenAnnouncements.findMany()
     * 
     * // Get first 10 HiddenAnnouncements
     * const hiddenAnnouncements = await prisma.hiddenAnnouncements.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hiddenAnnouncementsWithIdOnly = await prisma.hiddenAnnouncements.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HiddenAnnouncementsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HiddenAnnouncementsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<HiddenAnnouncementsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a HiddenAnnouncements.
     * @param {HiddenAnnouncementsCreateArgs} args - Arguments to create a HiddenAnnouncements.
     * @example
     * // Create one HiddenAnnouncements
     * const HiddenAnnouncements = await prisma.hiddenAnnouncements.create({
     *   data: {
     *     // ... data to create a HiddenAnnouncements
     *   }
     * })
     * 
    **/
    create<T extends HiddenAnnouncementsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HiddenAnnouncementsCreateArgs<ExtArgs>>
    ): Prisma__HiddenAnnouncementsClient<$Types.GetResult<HiddenAnnouncementsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many HiddenAnnouncements.
     *     @param {HiddenAnnouncementsCreateManyArgs} args - Arguments to create many HiddenAnnouncements.
     *     @example
     *     // Create many HiddenAnnouncements
     *     const hiddenAnnouncements = await prisma.hiddenAnnouncements.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HiddenAnnouncementsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HiddenAnnouncementsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HiddenAnnouncements.
     * @param {HiddenAnnouncementsDeleteArgs} args - Arguments to delete one HiddenAnnouncements.
     * @example
     * // Delete one HiddenAnnouncements
     * const HiddenAnnouncements = await prisma.hiddenAnnouncements.delete({
     *   where: {
     *     // ... filter to delete one HiddenAnnouncements
     *   }
     * })
     * 
    **/
    delete<T extends HiddenAnnouncementsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HiddenAnnouncementsDeleteArgs<ExtArgs>>
    ): Prisma__HiddenAnnouncementsClient<$Types.GetResult<HiddenAnnouncementsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one HiddenAnnouncements.
     * @param {HiddenAnnouncementsUpdateArgs} args - Arguments to update one HiddenAnnouncements.
     * @example
     * // Update one HiddenAnnouncements
     * const hiddenAnnouncements = await prisma.hiddenAnnouncements.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HiddenAnnouncementsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HiddenAnnouncementsUpdateArgs<ExtArgs>>
    ): Prisma__HiddenAnnouncementsClient<$Types.GetResult<HiddenAnnouncementsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more HiddenAnnouncements.
     * @param {HiddenAnnouncementsDeleteManyArgs} args - Arguments to filter HiddenAnnouncements to delete.
     * @example
     * // Delete a few HiddenAnnouncements
     * const { count } = await prisma.hiddenAnnouncements.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HiddenAnnouncementsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HiddenAnnouncementsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HiddenAnnouncements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HiddenAnnouncementsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HiddenAnnouncements
     * const hiddenAnnouncements = await prisma.hiddenAnnouncements.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HiddenAnnouncementsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HiddenAnnouncementsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HiddenAnnouncements.
     * @param {HiddenAnnouncementsUpsertArgs} args - Arguments to update or create a HiddenAnnouncements.
     * @example
     * // Update or create a HiddenAnnouncements
     * const hiddenAnnouncements = await prisma.hiddenAnnouncements.upsert({
     *   create: {
     *     // ... data to create a HiddenAnnouncements
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HiddenAnnouncements we want to update
     *   }
     * })
    **/
    upsert<T extends HiddenAnnouncementsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HiddenAnnouncementsUpsertArgs<ExtArgs>>
    ): Prisma__HiddenAnnouncementsClient<$Types.GetResult<HiddenAnnouncementsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of HiddenAnnouncements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HiddenAnnouncementsCountArgs} args - Arguments to filter HiddenAnnouncements to count.
     * @example
     * // Count the number of HiddenAnnouncements
     * const count = await prisma.hiddenAnnouncements.count({
     *   where: {
     *     // ... the filter for the HiddenAnnouncements we want to count
     *   }
     * })
    **/
    count<T extends HiddenAnnouncementsCountArgs>(
      args?: Subset<T, HiddenAnnouncementsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HiddenAnnouncementsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HiddenAnnouncements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HiddenAnnouncementsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HiddenAnnouncementsAggregateArgs>(args: Subset<T, HiddenAnnouncementsAggregateArgs>): Prisma.PrismaPromise<GetHiddenAnnouncementsAggregateType<T>>

    /**
     * Group by HiddenAnnouncements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HiddenAnnouncementsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HiddenAnnouncementsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HiddenAnnouncementsGroupByArgs['orderBy'] }
        : { orderBy?: HiddenAnnouncementsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HiddenAnnouncementsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHiddenAnnouncementsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for HiddenAnnouncements.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HiddenAnnouncementsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    buy<T extends BuyArgs<ExtArgs> = {}>(args?: Subset<T, BuyArgs<ExtArgs>>): Prisma__BuyClient<$Types.GetResult<BuyPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    rent<T extends RentArgs<ExtArgs> = {}>(args?: Subset<T, RentArgs<ExtArgs>>): Prisma__RentClient<$Types.GetResult<RentPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    auction<T extends AuctionArgs<ExtArgs> = {}>(args?: Subset<T, AuctionArgs<ExtArgs>>): Prisma__AuctionClient<$Types.GetResult<AuctionPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * HiddenAnnouncements base type for findUnique actions
   */
  export type HiddenAnnouncementsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HiddenAnnouncements
     */
    select?: HiddenAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HiddenAnnouncementsInclude<ExtArgs> | null
    /**
     * Filter, which HiddenAnnouncements to fetch.
     */
    where: HiddenAnnouncementsWhereUniqueInput
  }

  /**
   * HiddenAnnouncements findUnique
   */
  export interface HiddenAnnouncementsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends HiddenAnnouncementsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * HiddenAnnouncements findUniqueOrThrow
   */
  export type HiddenAnnouncementsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HiddenAnnouncements
     */
    select?: HiddenAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HiddenAnnouncementsInclude<ExtArgs> | null
    /**
     * Filter, which HiddenAnnouncements to fetch.
     */
    where: HiddenAnnouncementsWhereUniqueInput
  }


  /**
   * HiddenAnnouncements base type for findFirst actions
   */
  export type HiddenAnnouncementsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HiddenAnnouncements
     */
    select?: HiddenAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HiddenAnnouncementsInclude<ExtArgs> | null
    /**
     * Filter, which HiddenAnnouncements to fetch.
     */
    where?: HiddenAnnouncementsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HiddenAnnouncements to fetch.
     */
    orderBy?: Enumerable<HiddenAnnouncementsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HiddenAnnouncements.
     */
    cursor?: HiddenAnnouncementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HiddenAnnouncements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HiddenAnnouncements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HiddenAnnouncements.
     */
    distinct?: Enumerable<HiddenAnnouncementsScalarFieldEnum>
  }

  /**
   * HiddenAnnouncements findFirst
   */
  export interface HiddenAnnouncementsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends HiddenAnnouncementsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * HiddenAnnouncements findFirstOrThrow
   */
  export type HiddenAnnouncementsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HiddenAnnouncements
     */
    select?: HiddenAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HiddenAnnouncementsInclude<ExtArgs> | null
    /**
     * Filter, which HiddenAnnouncements to fetch.
     */
    where?: HiddenAnnouncementsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HiddenAnnouncements to fetch.
     */
    orderBy?: Enumerable<HiddenAnnouncementsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HiddenAnnouncements.
     */
    cursor?: HiddenAnnouncementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HiddenAnnouncements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HiddenAnnouncements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HiddenAnnouncements.
     */
    distinct?: Enumerable<HiddenAnnouncementsScalarFieldEnum>
  }


  /**
   * HiddenAnnouncements findMany
   */
  export type HiddenAnnouncementsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HiddenAnnouncements
     */
    select?: HiddenAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HiddenAnnouncementsInclude<ExtArgs> | null
    /**
     * Filter, which HiddenAnnouncements to fetch.
     */
    where?: HiddenAnnouncementsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HiddenAnnouncements to fetch.
     */
    orderBy?: Enumerable<HiddenAnnouncementsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HiddenAnnouncements.
     */
    cursor?: HiddenAnnouncementsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HiddenAnnouncements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HiddenAnnouncements.
     */
    skip?: number
    distinct?: Enumerable<HiddenAnnouncementsScalarFieldEnum>
  }


  /**
   * HiddenAnnouncements create
   */
  export type HiddenAnnouncementsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HiddenAnnouncements
     */
    select?: HiddenAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HiddenAnnouncementsInclude<ExtArgs> | null
    /**
     * The data needed to create a HiddenAnnouncements.
     */
    data: XOR<HiddenAnnouncementsCreateInput, HiddenAnnouncementsUncheckedCreateInput>
  }


  /**
   * HiddenAnnouncements createMany
   */
  export type HiddenAnnouncementsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HiddenAnnouncements.
     */
    data: Enumerable<HiddenAnnouncementsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * HiddenAnnouncements update
   */
  export type HiddenAnnouncementsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HiddenAnnouncements
     */
    select?: HiddenAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HiddenAnnouncementsInclude<ExtArgs> | null
    /**
     * The data needed to update a HiddenAnnouncements.
     */
    data: XOR<HiddenAnnouncementsUpdateInput, HiddenAnnouncementsUncheckedUpdateInput>
    /**
     * Choose, which HiddenAnnouncements to update.
     */
    where: HiddenAnnouncementsWhereUniqueInput
  }


  /**
   * HiddenAnnouncements updateMany
   */
  export type HiddenAnnouncementsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HiddenAnnouncements.
     */
    data: XOR<HiddenAnnouncementsUpdateManyMutationInput, HiddenAnnouncementsUncheckedUpdateManyInput>
    /**
     * Filter which HiddenAnnouncements to update
     */
    where?: HiddenAnnouncementsWhereInput
  }


  /**
   * HiddenAnnouncements upsert
   */
  export type HiddenAnnouncementsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HiddenAnnouncements
     */
    select?: HiddenAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HiddenAnnouncementsInclude<ExtArgs> | null
    /**
     * The filter to search for the HiddenAnnouncements to update in case it exists.
     */
    where: HiddenAnnouncementsWhereUniqueInput
    /**
     * In case the HiddenAnnouncements found by the `where` argument doesn't exist, create a new HiddenAnnouncements with this data.
     */
    create: XOR<HiddenAnnouncementsCreateInput, HiddenAnnouncementsUncheckedCreateInput>
    /**
     * In case the HiddenAnnouncements was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HiddenAnnouncementsUpdateInput, HiddenAnnouncementsUncheckedUpdateInput>
  }


  /**
   * HiddenAnnouncements delete
   */
  export type HiddenAnnouncementsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HiddenAnnouncements
     */
    select?: HiddenAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HiddenAnnouncementsInclude<ExtArgs> | null
    /**
     * Filter which HiddenAnnouncements to delete.
     */
    where: HiddenAnnouncementsWhereUniqueInput
  }


  /**
   * HiddenAnnouncements deleteMany
   */
  export type HiddenAnnouncementsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which HiddenAnnouncements to delete
     */
    where?: HiddenAnnouncementsWhereInput
  }


  /**
   * HiddenAnnouncements without action
   */
  export type HiddenAnnouncementsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HiddenAnnouncements
     */
    select?: HiddenAnnouncementsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HiddenAnnouncementsInclude<ExtArgs> | null
  }



  /**
   * Model Buy
   */


  export type AggregateBuy = {
    _count: BuyCountAggregateOutputType | null
    _avg: BuyAvgAggregateOutputType | null
    _sum: BuySumAggregateOutputType | null
    _min: BuyMinAggregateOutputType | null
    _max: BuyMaxAggregateOutputType | null
  }

  export type BuyAvgAggregateOutputType = {
    id: number | null
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
  }

  export type BuySumAggregateOutputType = {
    id: number | null
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
  }

  export type BuyMinAggregateOutputType = {
    id: number | null
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    image: string | null
    type: string | null
    price: string | null
    address: string | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
    descriptionTitle: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BuyMaxAggregateOutputType = {
    id: number | null
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    image: string | null
    type: string | null
    price: string | null
    address: string | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
    descriptionTitle: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BuyCountAggregateOutputType = {
    id: number
    savedAnnouncementId: number
    hiddenAnnouncementId: number
    image: number
    type: number
    price: number
    address: number
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BuyAvgAggregateInputType = {
    id?: true
    savedAnnouncementId?: true
    hiddenAnnouncementId?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
  }

  export type BuySumAggregateInputType = {
    id?: true
    savedAnnouncementId?: true
    hiddenAnnouncementId?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
  }

  export type BuyMinAggregateInputType = {
    id?: true
    savedAnnouncementId?: true
    hiddenAnnouncementId?: true
    image?: true
    type?: true
    price?: true
    address?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
    descriptionTitle?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BuyMaxAggregateInputType = {
    id?: true
    savedAnnouncementId?: true
    hiddenAnnouncementId?: true
    image?: true
    type?: true
    price?: true
    address?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
    descriptionTitle?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BuyCountAggregateInputType = {
    id?: true
    savedAnnouncementId?: true
    hiddenAnnouncementId?: true
    image?: true
    type?: true
    price?: true
    address?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
    descriptionTitle?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BuyAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Buy to aggregate.
     */
    where?: BuyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buys to fetch.
     */
    orderBy?: Enumerable<BuyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Buys
    **/
    _count?: true | BuyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BuyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BuySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuyMaxAggregateInputType
  }

  export type GetBuyAggregateType<T extends BuyAggregateArgs> = {
        [P in keyof T & keyof AggregateBuy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuy[P]>
      : GetScalarType<T[P], AggregateBuy[P]>
  }




  export type BuyGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: BuyWhereInput
    orderBy?: Enumerable<BuyOrderByWithAggregationInput>
    by: BuyScalarFieldEnum[]
    having?: BuyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuyCountAggregateInputType | true
    _avg?: BuyAvgAggregateInputType
    _sum?: BuySumAggregateInputType
    _min?: BuyMinAggregateInputType
    _max?: BuyMaxAggregateInputType
  }


  export type BuyGroupByOutputType = {
    id: number
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt: Date
    updatedAt: Date
    _count: BuyCountAggregateOutputType | null
    _avg: BuyAvgAggregateOutputType | null
    _sum: BuySumAggregateOutputType | null
    _min: BuyMinAggregateOutputType | null
    _max: BuyMaxAggregateOutputType | null
  }

  type GetBuyGroupByPayload<T extends BuyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BuyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuyGroupByOutputType[P]>
            : GetScalarType<T[P], BuyGroupByOutputType[P]>
        }
      >
    >


  export type BuySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    savedAnnouncementId?: boolean
    hiddenAnnouncementId?: boolean
    image?: boolean
    type?: boolean
    price?: boolean
    address?: boolean
    bedrooms?: boolean
    sqFootage?: boolean
    bathrooms?: boolean
    floors?: boolean
    descriptionTitle?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    messages?: boolean | Buy$messagesArgs<ExtArgs>
    savedAnnouncement?: boolean | SavedAnnouncementsArgs<ExtArgs>
    hiddenAnnouncement?: boolean | HiddenAnnouncementsArgs<ExtArgs>
    _count?: boolean | BuyCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["buy"]>

  export type BuySelectScalar = {
    id?: boolean
    savedAnnouncementId?: boolean
    hiddenAnnouncementId?: boolean
    image?: boolean
    type?: boolean
    price?: boolean
    address?: boolean
    bedrooms?: boolean
    sqFootage?: boolean
    bathrooms?: boolean
    floors?: boolean
    descriptionTitle?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BuyInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    messages?: boolean | Buy$messagesArgs<ExtArgs>
    savedAnnouncement?: boolean | SavedAnnouncementsArgs<ExtArgs>
    hiddenAnnouncement?: boolean | HiddenAnnouncementsArgs<ExtArgs>
    _count?: boolean | BuyCountOutputTypeArgs<ExtArgs>
  }


  type BuyGetPayload<S extends boolean | null | undefined | BuyArgs> = $Types.GetResult<BuyPayload, S>

  type BuyCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<BuyFindManyArgs, 'select' | 'include'> & {
      select?: BuyCountAggregateInputType | true
    }

  export interface BuyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Buy'], meta: { name: 'Buy' } }
    /**
     * Find zero or one Buy that matches the filter.
     * @param {BuyFindUniqueArgs} args - Arguments to find a Buy
     * @example
     * // Get one Buy
     * const buy = await prisma.buy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BuyFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BuyFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Buy'> extends True ? Prisma__BuyClient<$Types.GetResult<BuyPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__BuyClient<$Types.GetResult<BuyPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Buy that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BuyFindUniqueOrThrowArgs} args - Arguments to find a Buy
     * @example
     * // Get one Buy
     * const buy = await prisma.buy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BuyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BuyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BuyClient<$Types.GetResult<BuyPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Buy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyFindFirstArgs} args - Arguments to find a Buy
     * @example
     * // Get one Buy
     * const buy = await prisma.buy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BuyFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BuyFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Buy'> extends True ? Prisma__BuyClient<$Types.GetResult<BuyPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__BuyClient<$Types.GetResult<BuyPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Buy that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyFindFirstOrThrowArgs} args - Arguments to find a Buy
     * @example
     * // Get one Buy
     * const buy = await prisma.buy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BuyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BuyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BuyClient<$Types.GetResult<BuyPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Buys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Buys
     * const buys = await prisma.buy.findMany()
     * 
     * // Get first 10 Buys
     * const buys = await prisma.buy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buyWithIdOnly = await prisma.buy.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BuyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BuyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<BuyPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Buy.
     * @param {BuyCreateArgs} args - Arguments to create a Buy.
     * @example
     * // Create one Buy
     * const Buy = await prisma.buy.create({
     *   data: {
     *     // ... data to create a Buy
     *   }
     * })
     * 
    **/
    create<T extends BuyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BuyCreateArgs<ExtArgs>>
    ): Prisma__BuyClient<$Types.GetResult<BuyPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Buys.
     *     @param {BuyCreateManyArgs} args - Arguments to create many Buys.
     *     @example
     *     // Create many Buys
     *     const buy = await prisma.buy.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BuyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BuyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Buy.
     * @param {BuyDeleteArgs} args - Arguments to delete one Buy.
     * @example
     * // Delete one Buy
     * const Buy = await prisma.buy.delete({
     *   where: {
     *     // ... filter to delete one Buy
     *   }
     * })
     * 
    **/
    delete<T extends BuyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BuyDeleteArgs<ExtArgs>>
    ): Prisma__BuyClient<$Types.GetResult<BuyPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Buy.
     * @param {BuyUpdateArgs} args - Arguments to update one Buy.
     * @example
     * // Update one Buy
     * const buy = await prisma.buy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BuyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BuyUpdateArgs<ExtArgs>>
    ): Prisma__BuyClient<$Types.GetResult<BuyPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Buys.
     * @param {BuyDeleteManyArgs} args - Arguments to filter Buys to delete.
     * @example
     * // Delete a few Buys
     * const { count } = await prisma.buy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BuyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BuyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Buys
     * const buy = await prisma.buy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BuyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BuyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Buy.
     * @param {BuyUpsertArgs} args - Arguments to update or create a Buy.
     * @example
     * // Update or create a Buy
     * const buy = await prisma.buy.upsert({
     *   create: {
     *     // ... data to create a Buy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Buy we want to update
     *   }
     * })
    **/
    upsert<T extends BuyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BuyUpsertArgs<ExtArgs>>
    ): Prisma__BuyClient<$Types.GetResult<BuyPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Buys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyCountArgs} args - Arguments to filter Buys to count.
     * @example
     * // Count the number of Buys
     * const count = await prisma.buy.count({
     *   where: {
     *     // ... the filter for the Buys we want to count
     *   }
     * })
    **/
    count<T extends BuyCountArgs>(
      args?: Subset<T, BuyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Buy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuyAggregateArgs>(args: Subset<T, BuyAggregateArgs>): Prisma.PrismaPromise<GetBuyAggregateType<T>>

    /**
     * Group by Buy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuyGroupByArgs['orderBy'] }
        : { orderBy?: BuyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Buy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BuyClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    messages<T extends Buy$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Buy$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MessagesPayload<ExtArgs>, T, 'findMany', never>| Null>;

    savedAnnouncement<T extends SavedAnnouncementsArgs<ExtArgs> = {}>(args?: Subset<T, SavedAnnouncementsArgs<ExtArgs>>): Prisma__SavedAnnouncementsClient<$Types.GetResult<SavedAnnouncementsPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    hiddenAnnouncement<T extends HiddenAnnouncementsArgs<ExtArgs> = {}>(args?: Subset<T, HiddenAnnouncementsArgs<ExtArgs>>): Prisma__HiddenAnnouncementsClient<$Types.GetResult<HiddenAnnouncementsPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Buy base type for findUnique actions
   */
  export type BuyFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buy
     */
    select?: BuySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyInclude<ExtArgs> | null
    /**
     * Filter, which Buy to fetch.
     */
    where: BuyWhereUniqueInput
  }

  /**
   * Buy findUnique
   */
  export interface BuyFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends BuyFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Buy findUniqueOrThrow
   */
  export type BuyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buy
     */
    select?: BuySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyInclude<ExtArgs> | null
    /**
     * Filter, which Buy to fetch.
     */
    where: BuyWhereUniqueInput
  }


  /**
   * Buy base type for findFirst actions
   */
  export type BuyFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buy
     */
    select?: BuySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyInclude<ExtArgs> | null
    /**
     * Filter, which Buy to fetch.
     */
    where?: BuyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buys to fetch.
     */
    orderBy?: Enumerable<BuyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buys.
     */
    cursor?: BuyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buys.
     */
    distinct?: Enumerable<BuyScalarFieldEnum>
  }

  /**
   * Buy findFirst
   */
  export interface BuyFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends BuyFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Buy findFirstOrThrow
   */
  export type BuyFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buy
     */
    select?: BuySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyInclude<ExtArgs> | null
    /**
     * Filter, which Buy to fetch.
     */
    where?: BuyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buys to fetch.
     */
    orderBy?: Enumerable<BuyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buys.
     */
    cursor?: BuyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buys.
     */
    distinct?: Enumerable<BuyScalarFieldEnum>
  }


  /**
   * Buy findMany
   */
  export type BuyFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buy
     */
    select?: BuySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyInclude<ExtArgs> | null
    /**
     * Filter, which Buys to fetch.
     */
    where?: BuyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buys to fetch.
     */
    orderBy?: Enumerable<BuyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Buys.
     */
    cursor?: BuyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buys.
     */
    skip?: number
    distinct?: Enumerable<BuyScalarFieldEnum>
  }


  /**
   * Buy create
   */
  export type BuyCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buy
     */
    select?: BuySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyInclude<ExtArgs> | null
    /**
     * The data needed to create a Buy.
     */
    data: XOR<BuyCreateInput, BuyUncheckedCreateInput>
  }


  /**
   * Buy createMany
   */
  export type BuyCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Buys.
     */
    data: Enumerable<BuyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Buy update
   */
  export type BuyUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buy
     */
    select?: BuySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyInclude<ExtArgs> | null
    /**
     * The data needed to update a Buy.
     */
    data: XOR<BuyUpdateInput, BuyUncheckedUpdateInput>
    /**
     * Choose, which Buy to update.
     */
    where: BuyWhereUniqueInput
  }


  /**
   * Buy updateMany
   */
  export type BuyUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Buys.
     */
    data: XOR<BuyUpdateManyMutationInput, BuyUncheckedUpdateManyInput>
    /**
     * Filter which Buys to update
     */
    where?: BuyWhereInput
  }


  /**
   * Buy upsert
   */
  export type BuyUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buy
     */
    select?: BuySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyInclude<ExtArgs> | null
    /**
     * The filter to search for the Buy to update in case it exists.
     */
    where: BuyWhereUniqueInput
    /**
     * In case the Buy found by the `where` argument doesn't exist, create a new Buy with this data.
     */
    create: XOR<BuyCreateInput, BuyUncheckedCreateInput>
    /**
     * In case the Buy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuyUpdateInput, BuyUncheckedUpdateInput>
  }


  /**
   * Buy delete
   */
  export type BuyDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buy
     */
    select?: BuySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyInclude<ExtArgs> | null
    /**
     * Filter which Buy to delete.
     */
    where: BuyWhereUniqueInput
  }


  /**
   * Buy deleteMany
   */
  export type BuyDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Buys to delete
     */
    where?: BuyWhereInput
  }


  /**
   * Buy.messages
   */
  export type Buy$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    where?: MessagesWhereInput
    orderBy?: Enumerable<MessagesOrderByWithRelationInput>
    cursor?: MessagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessagesScalarFieldEnum>
  }


  /**
   * Buy without action
   */
  export type BuyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buy
     */
    select?: BuySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BuyInclude<ExtArgs> | null
  }



  /**
   * Model Rent
   */


  export type AggregateRent = {
    _count: RentCountAggregateOutputType | null
    _avg: RentAvgAggregateOutputType | null
    _sum: RentSumAggregateOutputType | null
    _min: RentMinAggregateOutputType | null
    _max: RentMaxAggregateOutputType | null
  }

  export type RentAvgAggregateOutputType = {
    id: number | null
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
  }

  export type RentSumAggregateOutputType = {
    id: number | null
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
  }

  export type RentMinAggregateOutputType = {
    id: number | null
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    image: string | null
    type: string | null
    price: string | null
    address: string | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
    descriptionTitle: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RentMaxAggregateOutputType = {
    id: number | null
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    image: string | null
    type: string | null
    price: string | null
    address: string | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
    descriptionTitle: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RentCountAggregateOutputType = {
    id: number
    savedAnnouncementId: number
    hiddenAnnouncementId: number
    image: number
    type: number
    price: number
    address: number
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RentAvgAggregateInputType = {
    id?: true
    savedAnnouncementId?: true
    hiddenAnnouncementId?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
  }

  export type RentSumAggregateInputType = {
    id?: true
    savedAnnouncementId?: true
    hiddenAnnouncementId?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
  }

  export type RentMinAggregateInputType = {
    id?: true
    savedAnnouncementId?: true
    hiddenAnnouncementId?: true
    image?: true
    type?: true
    price?: true
    address?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
    descriptionTitle?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RentMaxAggregateInputType = {
    id?: true
    savedAnnouncementId?: true
    hiddenAnnouncementId?: true
    image?: true
    type?: true
    price?: true
    address?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
    descriptionTitle?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RentCountAggregateInputType = {
    id?: true
    savedAnnouncementId?: true
    hiddenAnnouncementId?: true
    image?: true
    type?: true
    price?: true
    address?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
    descriptionTitle?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RentAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rent to aggregate.
     */
    where?: RentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rents to fetch.
     */
    orderBy?: Enumerable<RentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rents
    **/
    _count?: true | RentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RentMaxAggregateInputType
  }

  export type GetRentAggregateType<T extends RentAggregateArgs> = {
        [P in keyof T & keyof AggregateRent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRent[P]>
      : GetScalarType<T[P], AggregateRent[P]>
  }




  export type RentGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RentWhereInput
    orderBy?: Enumerable<RentOrderByWithAggregationInput>
    by: RentScalarFieldEnum[]
    having?: RentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RentCountAggregateInputType | true
    _avg?: RentAvgAggregateInputType
    _sum?: RentSumAggregateInputType
    _min?: RentMinAggregateInputType
    _max?: RentMaxAggregateInputType
  }


  export type RentGroupByOutputType = {
    id: number
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt: Date
    updatedAt: Date
    _count: RentCountAggregateOutputType | null
    _avg: RentAvgAggregateOutputType | null
    _sum: RentSumAggregateOutputType | null
    _min: RentMinAggregateOutputType | null
    _max: RentMaxAggregateOutputType | null
  }

  type GetRentGroupByPayload<T extends RentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RentGroupByOutputType[P]>
            : GetScalarType<T[P], RentGroupByOutputType[P]>
        }
      >
    >


  export type RentSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    savedAnnouncementId?: boolean
    hiddenAnnouncementId?: boolean
    image?: boolean
    type?: boolean
    price?: boolean
    address?: boolean
    bedrooms?: boolean
    sqFootage?: boolean
    bathrooms?: boolean
    floors?: boolean
    descriptionTitle?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    messages?: boolean | Rent$messagesArgs<ExtArgs>
    savedAnnouncement?: boolean | SavedAnnouncementsArgs<ExtArgs>
    hiddenAnnouncement?: boolean | HiddenAnnouncementsArgs<ExtArgs>
    _count?: boolean | RentCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["rent"]>

  export type RentSelectScalar = {
    id?: boolean
    savedAnnouncementId?: boolean
    hiddenAnnouncementId?: boolean
    image?: boolean
    type?: boolean
    price?: boolean
    address?: boolean
    bedrooms?: boolean
    sqFootage?: boolean
    bathrooms?: boolean
    floors?: boolean
    descriptionTitle?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RentInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    messages?: boolean | Rent$messagesArgs<ExtArgs>
    savedAnnouncement?: boolean | SavedAnnouncementsArgs<ExtArgs>
    hiddenAnnouncement?: boolean | HiddenAnnouncementsArgs<ExtArgs>
    _count?: boolean | RentCountOutputTypeArgs<ExtArgs>
  }


  type RentGetPayload<S extends boolean | null | undefined | RentArgs> = $Types.GetResult<RentPayload, S>

  type RentCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RentFindManyArgs, 'select' | 'include'> & {
      select?: RentCountAggregateInputType | true
    }

  export interface RentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rent'], meta: { name: 'Rent' } }
    /**
     * Find zero or one Rent that matches the filter.
     * @param {RentFindUniqueArgs} args - Arguments to find a Rent
     * @example
     * // Get one Rent
     * const rent = await prisma.rent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RentFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RentFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Rent'> extends True ? Prisma__RentClient<$Types.GetResult<RentPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__RentClient<$Types.GetResult<RentPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Rent that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RentFindUniqueOrThrowArgs} args - Arguments to find a Rent
     * @example
     * // Get one Rent
     * const rent = await prisma.rent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RentClient<$Types.GetResult<RentPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Rent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentFindFirstArgs} args - Arguments to find a Rent
     * @example
     * // Get one Rent
     * const rent = await prisma.rent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RentFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RentFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Rent'> extends True ? Prisma__RentClient<$Types.GetResult<RentPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__RentClient<$Types.GetResult<RentPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Rent that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentFindFirstOrThrowArgs} args - Arguments to find a Rent
     * @example
     * // Get one Rent
     * const rent = await prisma.rent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RentClient<$Types.GetResult<RentPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Rents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rents
     * const rents = await prisma.rent.findMany()
     * 
     * // Get first 10 Rents
     * const rents = await prisma.rent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rentWithIdOnly = await prisma.rent.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<RentPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Rent.
     * @param {RentCreateArgs} args - Arguments to create a Rent.
     * @example
     * // Create one Rent
     * const Rent = await prisma.rent.create({
     *   data: {
     *     // ... data to create a Rent
     *   }
     * })
     * 
    **/
    create<T extends RentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RentCreateArgs<ExtArgs>>
    ): Prisma__RentClient<$Types.GetResult<RentPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Rents.
     *     @param {RentCreateManyArgs} args - Arguments to create many Rents.
     *     @example
     *     // Create many Rents
     *     const rent = await prisma.rent.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rent.
     * @param {RentDeleteArgs} args - Arguments to delete one Rent.
     * @example
     * // Delete one Rent
     * const Rent = await prisma.rent.delete({
     *   where: {
     *     // ... filter to delete one Rent
     *   }
     * })
     * 
    **/
    delete<T extends RentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RentDeleteArgs<ExtArgs>>
    ): Prisma__RentClient<$Types.GetResult<RentPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Rent.
     * @param {RentUpdateArgs} args - Arguments to update one Rent.
     * @example
     * // Update one Rent
     * const rent = await prisma.rent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RentUpdateArgs<ExtArgs>>
    ): Prisma__RentClient<$Types.GetResult<RentPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Rents.
     * @param {RentDeleteManyArgs} args - Arguments to filter Rents to delete.
     * @example
     * // Delete a few Rents
     * const { count } = await prisma.rent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rents
     * const rent = await prisma.rent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rent.
     * @param {RentUpsertArgs} args - Arguments to update or create a Rent.
     * @example
     * // Update or create a Rent
     * const rent = await prisma.rent.upsert({
     *   create: {
     *     // ... data to create a Rent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rent we want to update
     *   }
     * })
    **/
    upsert<T extends RentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RentUpsertArgs<ExtArgs>>
    ): Prisma__RentClient<$Types.GetResult<RentPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Rents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentCountArgs} args - Arguments to filter Rents to count.
     * @example
     * // Count the number of Rents
     * const count = await prisma.rent.count({
     *   where: {
     *     // ... the filter for the Rents we want to count
     *   }
     * })
    **/
    count<T extends RentCountArgs>(
      args?: Subset<T, RentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RentAggregateArgs>(args: Subset<T, RentAggregateArgs>): Prisma.PrismaPromise<GetRentAggregateType<T>>

    /**
     * Group by Rent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RentGroupByArgs['orderBy'] }
        : { orderBy?: RentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Rent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RentClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    messages<T extends Rent$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Rent$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MessagesPayload<ExtArgs>, T, 'findMany', never>| Null>;

    savedAnnouncement<T extends SavedAnnouncementsArgs<ExtArgs> = {}>(args?: Subset<T, SavedAnnouncementsArgs<ExtArgs>>): Prisma__SavedAnnouncementsClient<$Types.GetResult<SavedAnnouncementsPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    hiddenAnnouncement<T extends HiddenAnnouncementsArgs<ExtArgs> = {}>(args?: Subset<T, HiddenAnnouncementsArgs<ExtArgs>>): Prisma__HiddenAnnouncementsClient<$Types.GetResult<HiddenAnnouncementsPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Rent base type for findUnique actions
   */
  export type RentFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * Filter, which Rent to fetch.
     */
    where: RentWhereUniqueInput
  }

  /**
   * Rent findUnique
   */
  export interface RentFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends RentFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Rent findUniqueOrThrow
   */
  export type RentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * Filter, which Rent to fetch.
     */
    where: RentWhereUniqueInput
  }


  /**
   * Rent base type for findFirst actions
   */
  export type RentFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * Filter, which Rent to fetch.
     */
    where?: RentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rents to fetch.
     */
    orderBy?: Enumerable<RentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rents.
     */
    cursor?: RentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rents.
     */
    distinct?: Enumerable<RentScalarFieldEnum>
  }

  /**
   * Rent findFirst
   */
  export interface RentFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends RentFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Rent findFirstOrThrow
   */
  export type RentFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * Filter, which Rent to fetch.
     */
    where?: RentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rents to fetch.
     */
    orderBy?: Enumerable<RentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rents.
     */
    cursor?: RentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rents.
     */
    distinct?: Enumerable<RentScalarFieldEnum>
  }


  /**
   * Rent findMany
   */
  export type RentFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * Filter, which Rents to fetch.
     */
    where?: RentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rents to fetch.
     */
    orderBy?: Enumerable<RentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rents.
     */
    cursor?: RentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rents.
     */
    skip?: number
    distinct?: Enumerable<RentScalarFieldEnum>
  }


  /**
   * Rent create
   */
  export type RentCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * The data needed to create a Rent.
     */
    data: XOR<RentCreateInput, RentUncheckedCreateInput>
  }


  /**
   * Rent createMany
   */
  export type RentCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rents.
     */
    data: Enumerable<RentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Rent update
   */
  export type RentUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * The data needed to update a Rent.
     */
    data: XOR<RentUpdateInput, RentUncheckedUpdateInput>
    /**
     * Choose, which Rent to update.
     */
    where: RentWhereUniqueInput
  }


  /**
   * Rent updateMany
   */
  export type RentUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rents.
     */
    data: XOR<RentUpdateManyMutationInput, RentUncheckedUpdateManyInput>
    /**
     * Filter which Rents to update
     */
    where?: RentWhereInput
  }


  /**
   * Rent upsert
   */
  export type RentUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * The filter to search for the Rent to update in case it exists.
     */
    where: RentWhereUniqueInput
    /**
     * In case the Rent found by the `where` argument doesn't exist, create a new Rent with this data.
     */
    create: XOR<RentCreateInput, RentUncheckedCreateInput>
    /**
     * In case the Rent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RentUpdateInput, RentUncheckedUpdateInput>
  }


  /**
   * Rent delete
   */
  export type RentDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentInclude<ExtArgs> | null
    /**
     * Filter which Rent to delete.
     */
    where: RentWhereUniqueInput
  }


  /**
   * Rent deleteMany
   */
  export type RentDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rents to delete
     */
    where?: RentWhereInput
  }


  /**
   * Rent.messages
   */
  export type Rent$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    where?: MessagesWhereInput
    orderBy?: Enumerable<MessagesOrderByWithRelationInput>
    cursor?: MessagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessagesScalarFieldEnum>
  }


  /**
   * Rent without action
   */
  export type RentArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rent
     */
    select?: RentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RentInclude<ExtArgs> | null
  }



  /**
   * Model Auction
   */


  export type AggregateAuction = {
    _count: AuctionCountAggregateOutputType | null
    _avg: AuctionAvgAggregateOutputType | null
    _sum: AuctionSumAggregateOutputType | null
    _min: AuctionMinAggregateOutputType | null
    _max: AuctionMaxAggregateOutputType | null
  }

  export type AuctionAvgAggregateOutputType = {
    id: number | null
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
  }

  export type AuctionSumAggregateOutputType = {
    id: number | null
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
  }

  export type AuctionMinAggregateOutputType = {
    id: number | null
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    image: string | null
    type: string | null
    price: string | null
    address: string | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
    descriptionTitle: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AuctionMaxAggregateOutputType = {
    id: number | null
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    image: string | null
    type: string | null
    price: string | null
    address: string | null
    bedrooms: number | null
    sqFootage: number | null
    bathrooms: number | null
    floors: number | null
    descriptionTitle: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AuctionCountAggregateOutputType = {
    id: number
    savedAnnouncementId: number
    hiddenAnnouncementId: number
    image: number
    type: number
    price: number
    address: number
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AuctionAvgAggregateInputType = {
    id?: true
    savedAnnouncementId?: true
    hiddenAnnouncementId?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
  }

  export type AuctionSumAggregateInputType = {
    id?: true
    savedAnnouncementId?: true
    hiddenAnnouncementId?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
  }

  export type AuctionMinAggregateInputType = {
    id?: true
    savedAnnouncementId?: true
    hiddenAnnouncementId?: true
    image?: true
    type?: true
    price?: true
    address?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
    descriptionTitle?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AuctionMaxAggregateInputType = {
    id?: true
    savedAnnouncementId?: true
    hiddenAnnouncementId?: true
    image?: true
    type?: true
    price?: true
    address?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
    descriptionTitle?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AuctionCountAggregateInputType = {
    id?: true
    savedAnnouncementId?: true
    hiddenAnnouncementId?: true
    image?: true
    type?: true
    price?: true
    address?: true
    bedrooms?: true
    sqFootage?: true
    bathrooms?: true
    floors?: true
    descriptionTitle?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AuctionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auction to aggregate.
     */
    where?: AuctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auctions to fetch.
     */
    orderBy?: Enumerable<AuctionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Auctions
    **/
    _count?: true | AuctionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuctionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuctionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuctionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuctionMaxAggregateInputType
  }

  export type GetAuctionAggregateType<T extends AuctionAggregateArgs> = {
        [P in keyof T & keyof AggregateAuction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuction[P]>
      : GetScalarType<T[P], AggregateAuction[P]>
  }




  export type AuctionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AuctionWhereInput
    orderBy?: Enumerable<AuctionOrderByWithAggregationInput>
    by: AuctionScalarFieldEnum[]
    having?: AuctionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuctionCountAggregateInputType | true
    _avg?: AuctionAvgAggregateInputType
    _sum?: AuctionSumAggregateInputType
    _min?: AuctionMinAggregateInputType
    _max?: AuctionMaxAggregateInputType
  }


  export type AuctionGroupByOutputType = {
    id: number
    savedAnnouncementId: number | null
    hiddenAnnouncementId: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt: Date
    updatedAt: Date
    _count: AuctionCountAggregateOutputType | null
    _avg: AuctionAvgAggregateOutputType | null
    _sum: AuctionSumAggregateOutputType | null
    _min: AuctionMinAggregateOutputType | null
    _max: AuctionMaxAggregateOutputType | null
  }

  type GetAuctionGroupByPayload<T extends AuctionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AuctionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuctionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuctionGroupByOutputType[P]>
            : GetScalarType<T[P], AuctionGroupByOutputType[P]>
        }
      >
    >


  export type AuctionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    savedAnnouncementId?: boolean
    hiddenAnnouncementId?: boolean
    image?: boolean
    type?: boolean
    price?: boolean
    address?: boolean
    bedrooms?: boolean
    sqFootage?: boolean
    bathrooms?: boolean
    floors?: boolean
    descriptionTitle?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    messages?: boolean | Auction$messagesArgs<ExtArgs>
    savedAnnouncement?: boolean | SavedAnnouncementsArgs<ExtArgs>
    hiddenAnnouncement?: boolean | HiddenAnnouncementsArgs<ExtArgs>
    _count?: boolean | AuctionCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["auction"]>

  export type AuctionSelectScalar = {
    id?: boolean
    savedAnnouncementId?: boolean
    hiddenAnnouncementId?: boolean
    image?: boolean
    type?: boolean
    price?: boolean
    address?: boolean
    bedrooms?: boolean
    sqFootage?: boolean
    bathrooms?: boolean
    floors?: boolean
    descriptionTitle?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AuctionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    messages?: boolean | Auction$messagesArgs<ExtArgs>
    savedAnnouncement?: boolean | SavedAnnouncementsArgs<ExtArgs>
    hiddenAnnouncement?: boolean | HiddenAnnouncementsArgs<ExtArgs>
    _count?: boolean | AuctionCountOutputTypeArgs<ExtArgs>
  }


  type AuctionGetPayload<S extends boolean | null | undefined | AuctionArgs> = $Types.GetResult<AuctionPayload, S>

  type AuctionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AuctionFindManyArgs, 'select' | 'include'> & {
      select?: AuctionCountAggregateInputType | true
    }

  export interface AuctionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Auction'], meta: { name: 'Auction' } }
    /**
     * Find zero or one Auction that matches the filter.
     * @param {AuctionFindUniqueArgs} args - Arguments to find a Auction
     * @example
     * // Get one Auction
     * const auction = await prisma.auction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AuctionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AuctionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Auction'> extends True ? Prisma__AuctionClient<$Types.GetResult<AuctionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AuctionClient<$Types.GetResult<AuctionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Auction that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AuctionFindUniqueOrThrowArgs} args - Arguments to find a Auction
     * @example
     * // Get one Auction
     * const auction = await prisma.auction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AuctionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuctionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AuctionClient<$Types.GetResult<AuctionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Auction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionFindFirstArgs} args - Arguments to find a Auction
     * @example
     * // Get one Auction
     * const auction = await prisma.auction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AuctionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AuctionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Auction'> extends True ? Prisma__AuctionClient<$Types.GetResult<AuctionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AuctionClient<$Types.GetResult<AuctionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Auction that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionFindFirstOrThrowArgs} args - Arguments to find a Auction
     * @example
     * // Get one Auction
     * const auction = await prisma.auction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AuctionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuctionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AuctionClient<$Types.GetResult<AuctionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Auctions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Auctions
     * const auctions = await prisma.auction.findMany()
     * 
     * // Get first 10 Auctions
     * const auctions = await prisma.auction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auctionWithIdOnly = await prisma.auction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AuctionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuctionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AuctionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Auction.
     * @param {AuctionCreateArgs} args - Arguments to create a Auction.
     * @example
     * // Create one Auction
     * const Auction = await prisma.auction.create({
     *   data: {
     *     // ... data to create a Auction
     *   }
     * })
     * 
    **/
    create<T extends AuctionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AuctionCreateArgs<ExtArgs>>
    ): Prisma__AuctionClient<$Types.GetResult<AuctionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Auctions.
     *     @param {AuctionCreateManyArgs} args - Arguments to create many Auctions.
     *     @example
     *     // Create many Auctions
     *     const auction = await prisma.auction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AuctionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuctionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Auction.
     * @param {AuctionDeleteArgs} args - Arguments to delete one Auction.
     * @example
     * // Delete one Auction
     * const Auction = await prisma.auction.delete({
     *   where: {
     *     // ... filter to delete one Auction
     *   }
     * })
     * 
    **/
    delete<T extends AuctionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AuctionDeleteArgs<ExtArgs>>
    ): Prisma__AuctionClient<$Types.GetResult<AuctionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Auction.
     * @param {AuctionUpdateArgs} args - Arguments to update one Auction.
     * @example
     * // Update one Auction
     * const auction = await prisma.auction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AuctionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AuctionUpdateArgs<ExtArgs>>
    ): Prisma__AuctionClient<$Types.GetResult<AuctionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Auctions.
     * @param {AuctionDeleteManyArgs} args - Arguments to filter Auctions to delete.
     * @example
     * // Delete a few Auctions
     * const { count } = await prisma.auction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AuctionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuctionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auctions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Auctions
     * const auction = await prisma.auction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AuctionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AuctionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Auction.
     * @param {AuctionUpsertArgs} args - Arguments to update or create a Auction.
     * @example
     * // Update or create a Auction
     * const auction = await prisma.auction.upsert({
     *   create: {
     *     // ... data to create a Auction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Auction we want to update
     *   }
     * })
    **/
    upsert<T extends AuctionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AuctionUpsertArgs<ExtArgs>>
    ): Prisma__AuctionClient<$Types.GetResult<AuctionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Auctions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionCountArgs} args - Arguments to filter Auctions to count.
     * @example
     * // Count the number of Auctions
     * const count = await prisma.auction.count({
     *   where: {
     *     // ... the filter for the Auctions we want to count
     *   }
     * })
    **/
    count<T extends AuctionCountArgs>(
      args?: Subset<T, AuctionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuctionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Auction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuctionAggregateArgs>(args: Subset<T, AuctionAggregateArgs>): Prisma.PrismaPromise<GetAuctionAggregateType<T>>

    /**
     * Group by Auction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuctionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuctionGroupByArgs['orderBy'] }
        : { orderBy?: AuctionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuctionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuctionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Auction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AuctionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    messages<T extends Auction$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Auction$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MessagesPayload<ExtArgs>, T, 'findMany', never>| Null>;

    savedAnnouncement<T extends SavedAnnouncementsArgs<ExtArgs> = {}>(args?: Subset<T, SavedAnnouncementsArgs<ExtArgs>>): Prisma__SavedAnnouncementsClient<$Types.GetResult<SavedAnnouncementsPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    hiddenAnnouncement<T extends HiddenAnnouncementsArgs<ExtArgs> = {}>(args?: Subset<T, HiddenAnnouncementsArgs<ExtArgs>>): Prisma__HiddenAnnouncementsClient<$Types.GetResult<HiddenAnnouncementsPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Auction base type for findUnique actions
   */
  export type AuctionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auction to fetch.
     */
    where: AuctionWhereUniqueInput
  }

  /**
   * Auction findUnique
   */
  export interface AuctionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AuctionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Auction findUniqueOrThrow
   */
  export type AuctionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auction to fetch.
     */
    where: AuctionWhereUniqueInput
  }


  /**
   * Auction base type for findFirst actions
   */
  export type AuctionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auction to fetch.
     */
    where?: AuctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auctions to fetch.
     */
    orderBy?: Enumerable<AuctionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auctions.
     */
    cursor?: AuctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auctions.
     */
    distinct?: Enumerable<AuctionScalarFieldEnum>
  }

  /**
   * Auction findFirst
   */
  export interface AuctionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AuctionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Auction findFirstOrThrow
   */
  export type AuctionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auction to fetch.
     */
    where?: AuctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auctions to fetch.
     */
    orderBy?: Enumerable<AuctionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auctions.
     */
    cursor?: AuctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auctions.
     */
    distinct?: Enumerable<AuctionScalarFieldEnum>
  }


  /**
   * Auction findMany
   */
  export type AuctionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auctions to fetch.
     */
    where?: AuctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auctions to fetch.
     */
    orderBy?: Enumerable<AuctionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Auctions.
     */
    cursor?: AuctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auctions.
     */
    skip?: number
    distinct?: Enumerable<AuctionScalarFieldEnum>
  }


  /**
   * Auction create
   */
  export type AuctionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * The data needed to create a Auction.
     */
    data: XOR<AuctionCreateInput, AuctionUncheckedCreateInput>
  }


  /**
   * Auction createMany
   */
  export type AuctionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Auctions.
     */
    data: Enumerable<AuctionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Auction update
   */
  export type AuctionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * The data needed to update a Auction.
     */
    data: XOR<AuctionUpdateInput, AuctionUncheckedUpdateInput>
    /**
     * Choose, which Auction to update.
     */
    where: AuctionWhereUniqueInput
  }


  /**
   * Auction updateMany
   */
  export type AuctionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Auctions.
     */
    data: XOR<AuctionUpdateManyMutationInput, AuctionUncheckedUpdateManyInput>
    /**
     * Filter which Auctions to update
     */
    where?: AuctionWhereInput
  }


  /**
   * Auction upsert
   */
  export type AuctionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * The filter to search for the Auction to update in case it exists.
     */
    where: AuctionWhereUniqueInput
    /**
     * In case the Auction found by the `where` argument doesn't exist, create a new Auction with this data.
     */
    create: XOR<AuctionCreateInput, AuctionUncheckedCreateInput>
    /**
     * In case the Auction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuctionUpdateInput, AuctionUncheckedUpdateInput>
  }


  /**
   * Auction delete
   */
  export type AuctionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter which Auction to delete.
     */
    where: AuctionWhereUniqueInput
  }


  /**
   * Auction deleteMany
   */
  export type AuctionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auctions to delete
     */
    where?: AuctionWhereInput
  }


  /**
   * Auction.messages
   */
  export type Auction$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    where?: MessagesWhereInput
    orderBy?: Enumerable<MessagesOrderByWithRelationInput>
    cursor?: MessagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessagesScalarFieldEnum>
  }


  /**
   * Auction without action
   */
  export type AuctionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AuctionInclude<ExtArgs> | null
  }



  /**
   * Model Agency
   */


  export type AggregateAgency = {
    _count: AgencyCountAggregateOutputType | null
    _avg: AgencyAvgAggregateOutputType | null
    _sum: AgencySumAggregateOutputType | null
    _min: AgencyMinAggregateOutputType | null
    _max: AgencyMaxAggregateOutputType | null
  }

  export type AgencyAvgAggregateOutputType = {
    id: number | null
    history: number | null
    announcements: number | null
  }

  export type AgencySumAggregateOutputType = {
    id: number | null
    history: number | null
    announcements: number | null
  }

  export type AgencyMinAggregateOutputType = {
    id: number | null
    image: string | null
    name: string | null
    address: string | null
    history: number | null
    phone: string | null
    announcements: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AgencyMaxAggregateOutputType = {
    id: number | null
    image: string | null
    name: string | null
    address: string | null
    history: number | null
    phone: string | null
    announcements: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AgencyCountAggregateOutputType = {
    id: number
    image: number
    name: number
    address: number
    history: number
    phone: number
    announcements: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AgencyAvgAggregateInputType = {
    id?: true
    history?: true
    announcements?: true
  }

  export type AgencySumAggregateInputType = {
    id?: true
    history?: true
    announcements?: true
  }

  export type AgencyMinAggregateInputType = {
    id?: true
    image?: true
    name?: true
    address?: true
    history?: true
    phone?: true
    announcements?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AgencyMaxAggregateInputType = {
    id?: true
    image?: true
    name?: true
    address?: true
    history?: true
    phone?: true
    announcements?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AgencyCountAggregateInputType = {
    id?: true
    image?: true
    name?: true
    address?: true
    history?: true
    phone?: true
    announcements?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AgencyAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agency to aggregate.
     */
    where?: AgencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agencies to fetch.
     */
    orderBy?: Enumerable<AgencyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Agencies
    **/
    _count?: true | AgencyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgencyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgencySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgencyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgencyMaxAggregateInputType
  }

  export type GetAgencyAggregateType<T extends AgencyAggregateArgs> = {
        [P in keyof T & keyof AggregateAgency]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgency[P]>
      : GetScalarType<T[P], AggregateAgency[P]>
  }




  export type AgencyGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AgencyWhereInput
    orderBy?: Enumerable<AgencyOrderByWithAggregationInput>
    by: AgencyScalarFieldEnum[]
    having?: AgencyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgencyCountAggregateInputType | true
    _avg?: AgencyAvgAggregateInputType
    _sum?: AgencySumAggregateInputType
    _min?: AgencyMinAggregateInputType
    _max?: AgencyMaxAggregateInputType
  }


  export type AgencyGroupByOutputType = {
    id: number
    image: string
    name: string
    address: string
    history: number
    phone: string
    announcements: number
    createdAt: Date
    updatedAt: Date
    _count: AgencyCountAggregateOutputType | null
    _avg: AgencyAvgAggregateOutputType | null
    _sum: AgencySumAggregateOutputType | null
    _min: AgencyMinAggregateOutputType | null
    _max: AgencyMaxAggregateOutputType | null
  }

  type GetAgencyGroupByPayload<T extends AgencyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AgencyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgencyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgencyGroupByOutputType[P]>
            : GetScalarType<T[P], AgencyGroupByOutputType[P]>
        }
      >
    >


  export type AgencySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image?: boolean
    name?: boolean
    address?: boolean
    history?: boolean
    phone?: boolean
    announcements?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    messages?: boolean | Agency$messagesArgs<ExtArgs>
    _count?: boolean | AgencyCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["agency"]>

  export type AgencySelectScalar = {
    id?: boolean
    image?: boolean
    name?: boolean
    address?: boolean
    history?: boolean
    phone?: boolean
    announcements?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AgencyInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    messages?: boolean | Agency$messagesArgs<ExtArgs>
    _count?: boolean | AgencyCountOutputTypeArgs<ExtArgs>
  }


  type AgencyGetPayload<S extends boolean | null | undefined | AgencyArgs> = $Types.GetResult<AgencyPayload, S>

  type AgencyCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AgencyFindManyArgs, 'select' | 'include'> & {
      select?: AgencyCountAggregateInputType | true
    }

  export interface AgencyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agency'], meta: { name: 'Agency' } }
    /**
     * Find zero or one Agency that matches the filter.
     * @param {AgencyFindUniqueArgs} args - Arguments to find a Agency
     * @example
     * // Get one Agency
     * const agency = await prisma.agency.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AgencyFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AgencyFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Agency'> extends True ? Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Agency that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AgencyFindUniqueOrThrowArgs} args - Arguments to find a Agency
     * @example
     * // Get one Agency
     * const agency = await prisma.agency.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AgencyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Agency that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyFindFirstArgs} args - Arguments to find a Agency
     * @example
     * // Get one Agency
     * const agency = await prisma.agency.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AgencyFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AgencyFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Agency'> extends True ? Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Agency that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyFindFirstOrThrowArgs} args - Arguments to find a Agency
     * @example
     * // Get one Agency
     * const agency = await prisma.agency.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AgencyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Agencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agencies
     * const agencies = await prisma.agency.findMany()
     * 
     * // Get first 10 Agencies
     * const agencies = await prisma.agency.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agencyWithIdOnly = await prisma.agency.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AgencyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Agency.
     * @param {AgencyCreateArgs} args - Arguments to create a Agency.
     * @example
     * // Create one Agency
     * const Agency = await prisma.agency.create({
     *   data: {
     *     // ... data to create a Agency
     *   }
     * })
     * 
    **/
    create<T extends AgencyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AgencyCreateArgs<ExtArgs>>
    ): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Agencies.
     *     @param {AgencyCreateManyArgs} args - Arguments to create many Agencies.
     *     @example
     *     // Create many Agencies
     *     const agency = await prisma.agency.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AgencyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Agency.
     * @param {AgencyDeleteArgs} args - Arguments to delete one Agency.
     * @example
     * // Delete one Agency
     * const Agency = await prisma.agency.delete({
     *   where: {
     *     // ... filter to delete one Agency
     *   }
     * })
     * 
    **/
    delete<T extends AgencyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AgencyDeleteArgs<ExtArgs>>
    ): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Agency.
     * @param {AgencyUpdateArgs} args - Arguments to update one Agency.
     * @example
     * // Update one Agency
     * const agency = await prisma.agency.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AgencyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AgencyUpdateArgs<ExtArgs>>
    ): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Agencies.
     * @param {AgencyDeleteManyArgs} args - Arguments to filter Agencies to delete.
     * @example
     * // Delete a few Agencies
     * const { count } = await prisma.agency.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AgencyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agencies
     * const agency = await prisma.agency.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AgencyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AgencyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Agency.
     * @param {AgencyUpsertArgs} args - Arguments to update or create a Agency.
     * @example
     * // Update or create a Agency
     * const agency = await prisma.agency.upsert({
     *   create: {
     *     // ... data to create a Agency
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agency we want to update
     *   }
     * })
    **/
    upsert<T extends AgencyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AgencyUpsertArgs<ExtArgs>>
    ): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Agencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyCountArgs} args - Arguments to filter Agencies to count.
     * @example
     * // Count the number of Agencies
     * const count = await prisma.agency.count({
     *   where: {
     *     // ... the filter for the Agencies we want to count
     *   }
     * })
    **/
    count<T extends AgencyCountArgs>(
      args?: Subset<T, AgencyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgencyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgencyAggregateArgs>(args: Subset<T, AgencyAggregateArgs>): Prisma.PrismaPromise<GetAgencyAggregateType<T>>

    /**
     * Group by Agency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgencyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgencyGroupByArgs['orderBy'] }
        : { orderBy?: AgencyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgencyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgencyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Agency.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AgencyClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    messages<T extends Agency$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Agency$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MessagesPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Agency base type for findUnique actions
   */
  export type AgencyFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter, which Agency to fetch.
     */
    where: AgencyWhereUniqueInput
  }

  /**
   * Agency findUnique
   */
  export interface AgencyFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AgencyFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Agency findUniqueOrThrow
   */
  export type AgencyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter, which Agency to fetch.
     */
    where: AgencyWhereUniqueInput
  }


  /**
   * Agency base type for findFirst actions
   */
  export type AgencyFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter, which Agency to fetch.
     */
    where?: AgencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agencies to fetch.
     */
    orderBy?: Enumerable<AgencyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agencies.
     */
    cursor?: AgencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agencies.
     */
    distinct?: Enumerable<AgencyScalarFieldEnum>
  }

  /**
   * Agency findFirst
   */
  export interface AgencyFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AgencyFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Agency findFirstOrThrow
   */
  export type AgencyFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter, which Agency to fetch.
     */
    where?: AgencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agencies to fetch.
     */
    orderBy?: Enumerable<AgencyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agencies.
     */
    cursor?: AgencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agencies.
     */
    distinct?: Enumerable<AgencyScalarFieldEnum>
  }


  /**
   * Agency findMany
   */
  export type AgencyFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter, which Agencies to fetch.
     */
    where?: AgencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agencies to fetch.
     */
    orderBy?: Enumerable<AgencyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Agencies.
     */
    cursor?: AgencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agencies.
     */
    skip?: number
    distinct?: Enumerable<AgencyScalarFieldEnum>
  }


  /**
   * Agency create
   */
  export type AgencyCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * The data needed to create a Agency.
     */
    data: XOR<AgencyCreateInput, AgencyUncheckedCreateInput>
  }


  /**
   * Agency createMany
   */
  export type AgencyCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Agencies.
     */
    data: Enumerable<AgencyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Agency update
   */
  export type AgencyUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * The data needed to update a Agency.
     */
    data: XOR<AgencyUpdateInput, AgencyUncheckedUpdateInput>
    /**
     * Choose, which Agency to update.
     */
    where: AgencyWhereUniqueInput
  }


  /**
   * Agency updateMany
   */
  export type AgencyUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Agencies.
     */
    data: XOR<AgencyUpdateManyMutationInput, AgencyUncheckedUpdateManyInput>
    /**
     * Filter which Agencies to update
     */
    where?: AgencyWhereInput
  }


  /**
   * Agency upsert
   */
  export type AgencyUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * The filter to search for the Agency to update in case it exists.
     */
    where: AgencyWhereUniqueInput
    /**
     * In case the Agency found by the `where` argument doesn't exist, create a new Agency with this data.
     */
    create: XOR<AgencyCreateInput, AgencyUncheckedCreateInput>
    /**
     * In case the Agency was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgencyUpdateInput, AgencyUncheckedUpdateInput>
  }


  /**
   * Agency delete
   */
  export type AgencyDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter which Agency to delete.
     */
    where: AgencyWhereUniqueInput
  }


  /**
   * Agency deleteMany
   */
  export type AgencyDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agencies to delete
     */
    where?: AgencyWhereInput
  }


  /**
   * Agency.messages
   */
  export type Agency$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessagesInclude<ExtArgs> | null
    where?: MessagesWhereInput
    orderBy?: Enumerable<MessagesOrderByWithRelationInput>
    cursor?: MessagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessagesScalarFieldEnum>
  }


  /**
   * Agency without action
   */
  export type AgencyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const AgencyScalarFieldEnum: {
    id: 'id',
    image: 'image',
    name: 'name',
    address: 'address',
    history: 'history',
    phone: 'phone',
    announcements: 'announcements',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AgencyScalarFieldEnum = (typeof AgencyScalarFieldEnum)[keyof typeof AgencyScalarFieldEnum]


  export const AuctionScalarFieldEnum: {
    id: 'id',
    savedAnnouncementId: 'savedAnnouncementId',
    hiddenAnnouncementId: 'hiddenAnnouncementId',
    image: 'image',
    type: 'type',
    price: 'price',
    address: 'address',
    bedrooms: 'bedrooms',
    sqFootage: 'sqFootage',
    bathrooms: 'bathrooms',
    floors: 'floors',
    descriptionTitle: 'descriptionTitle',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AuctionScalarFieldEnum = (typeof AuctionScalarFieldEnum)[keyof typeof AuctionScalarFieldEnum]


  export const BuyScalarFieldEnum: {
    id: 'id',
    savedAnnouncementId: 'savedAnnouncementId',
    hiddenAnnouncementId: 'hiddenAnnouncementId',
    image: 'image',
    type: 'type',
    price: 'price',
    address: 'address',
    bedrooms: 'bedrooms',
    sqFootage: 'sqFootage',
    bathrooms: 'bathrooms',
    floors: 'floors',
    descriptionTitle: 'descriptionTitle',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BuyScalarFieldEnum = (typeof BuyScalarFieldEnum)[keyof typeof BuyScalarFieldEnum]


  export const HiddenAnnouncementsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HiddenAnnouncementsScalarFieldEnum = (typeof HiddenAnnouncementsScalarFieldEnum)[keyof typeof HiddenAnnouncementsScalarFieldEnum]


  export const MessagesScalarFieldEnum: {
    id: 'id',
    message: 'message',
    name: 'name',
    email: 'email',
    phone: 'phone',
    userId: 'userId',
    buyId: 'buyId',
    rentId: 'rentId',
    auctionId: 'auctionId',
    agencyId: 'agencyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MessagesScalarFieldEnum = (typeof MessagesScalarFieldEnum)[keyof typeof MessagesScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RentScalarFieldEnum: {
    id: 'id',
    savedAnnouncementId: 'savedAnnouncementId',
    hiddenAnnouncementId: 'hiddenAnnouncementId',
    image: 'image',
    type: 'type',
    price: 'price',
    address: 'address',
    bedrooms: 'bedrooms',
    sqFootage: 'sqFootage',
    bathrooms: 'bathrooms',
    floors: 'floors',
    descriptionTitle: 'descriptionTitle',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RentScalarFieldEnum = (typeof RentScalarFieldEnum)[keyof typeof RentScalarFieldEnum]


  export const SavedAnnouncementsScalarFieldEnum: {
    id: 'id',
    email: 'email',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SavedAnnouncementsScalarFieldEnum = (typeof SavedAnnouncementsScalarFieldEnum)[keyof typeof SavedAnnouncementsScalarFieldEnum]


  export const SavedSearchesScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    searchBar: 'searchBar',
    aquireType: 'aquireType',
    houseType: 'houseType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SavedSearchesScalarFieldEnum = (typeof SavedSearchesScalarFieldEnum)[keyof typeof SavedSearchesScalarFieldEnum]


  export const SellScalarFieldEnum: {
    id: 'id',
    image: 'image',
    address: 'address',
    bedrooms: 'bedrooms',
    sqFootage: 'sqFootage',
    bathrooms: 'bathrooms',
    floors: 'floors',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SellScalarFieldEnum = (typeof SellScalarFieldEnum)[keyof typeof SellScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ValuateScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    image: 'image',
    address: 'address',
    bedrooms: 'bedrooms',
    sqFootage: 'sqFootage',
    bathrooms: 'bathrooms',
    floors: 'floors',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ValuateScalarFieldEnum = (typeof ValuateScalarFieldEnum)[keyof typeof ValuateScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    messages?: MessagesListRelationFilter
    savedAnnouncement?: SavedAnnouncementsListRelationFilter
    sell?: SellListRelationFilter
    valuate?: ValuateListRelationFilter
    savedSearch?: SavedSearchesListRelationFilter
    hiddenAnnouncement?: HiddenAnnouncementsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    messages?: MessagesOrderByRelationAggregateInput
    savedAnnouncement?: SavedAnnouncementsOrderByRelationAggregateInput
    sell?: SellOrderByRelationAggregateInput
    valuate?: ValuateOrderByRelationAggregateInput
    savedSearch?: SavedSearchesOrderByRelationAggregateInput
    hiddenAnnouncement?: HiddenAnnouncementsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MessagesWhereInput = {
    AND?: Enumerable<MessagesWhereInput>
    OR?: Enumerable<MessagesWhereInput>
    NOT?: Enumerable<MessagesWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    name?: StringFilter | string
    email?: StringFilter | string
    phone?: StringFilter | string
    userId?: IntFilter | number
    buyId?: IntFilter | number
    rentId?: IntFilter | number
    auctionId?: IntFilter | number
    agencyId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    buy?: XOR<BuyRelationFilter, BuyWhereInput>
    rent?: XOR<RentRelationFilter, RentWhereInput>
    auction?: XOR<AuctionRelationFilter, AuctionWhereInput>
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
  }

  export type MessagesOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    userId?: SortOrder
    buyId?: SortOrder
    rentId?: SortOrder
    auctionId?: SortOrder
    agencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    buy?: BuyOrderByWithRelationInput
    rent?: RentOrderByWithRelationInput
    auction?: AuctionOrderByWithRelationInput
    agency?: AgencyOrderByWithRelationInput
  }

  export type MessagesWhereUniqueInput = {
    id?: number
  }

  export type MessagesOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    userId?: SortOrder
    buyId?: SortOrder
    rentId?: SortOrder
    auctionId?: SortOrder
    agencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MessagesCountOrderByAggregateInput
    _avg?: MessagesAvgOrderByAggregateInput
    _max?: MessagesMaxOrderByAggregateInput
    _min?: MessagesMinOrderByAggregateInput
    _sum?: MessagesSumOrderByAggregateInput
  }

  export type MessagesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MessagesScalarWhereWithAggregatesInput>
    OR?: Enumerable<MessagesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MessagesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    message?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    buyId?: IntWithAggregatesFilter | number
    rentId?: IntWithAggregatesFilter | number
    auctionId?: IntWithAggregatesFilter | number
    agencyId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SavedAnnouncementsWhereInput = {
    AND?: Enumerable<SavedAnnouncementsWhereInput>
    OR?: Enumerable<SavedAnnouncementsWhereInput>
    NOT?: Enumerable<SavedAnnouncementsWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    buy?: XOR<BuyRelationFilter, BuyWhereInput> | null
    rent?: XOR<RentRelationFilter, RentWhereInput> | null
    auction?: XOR<AuctionRelationFilter, AuctionWhereInput> | null
  }

  export type SavedAnnouncementsOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    buy?: BuyOrderByWithRelationInput
    rent?: RentOrderByWithRelationInput
    auction?: AuctionOrderByWithRelationInput
  }

  export type SavedAnnouncementsWhereUniqueInput = {
    id?: number
  }

  export type SavedAnnouncementsOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SavedAnnouncementsCountOrderByAggregateInput
    _avg?: SavedAnnouncementsAvgOrderByAggregateInput
    _max?: SavedAnnouncementsMaxOrderByAggregateInput
    _min?: SavedAnnouncementsMinOrderByAggregateInput
    _sum?: SavedAnnouncementsSumOrderByAggregateInput
  }

  export type SavedAnnouncementsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SavedAnnouncementsScalarWhereWithAggregatesInput>
    OR?: Enumerable<SavedAnnouncementsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SavedAnnouncementsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SellWhereInput = {
    AND?: Enumerable<SellWhereInput>
    OR?: Enumerable<SellWhereInput>
    NOT?: Enumerable<SellWhereInput>
    id?: IntFilter | number
    image?: StringFilter | string
    address?: StringFilter | string
    bedrooms?: IntFilter | number
    sqFootage?: IntFilter | number
    bathrooms?: IntFilter | number
    floors?: IntFilter | number
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SellOrderByWithRelationInput = {
    id?: SortOrder
    image?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SellWhereUniqueInput = {
    id?: number
  }

  export type SellOrderByWithAggregationInput = {
    id?: SortOrder
    image?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SellCountOrderByAggregateInput
    _avg?: SellAvgOrderByAggregateInput
    _max?: SellMaxOrderByAggregateInput
    _min?: SellMinOrderByAggregateInput
    _sum?: SellSumOrderByAggregateInput
  }

  export type SellScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SellScalarWhereWithAggregatesInput>
    OR?: Enumerable<SellScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SellScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    image?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    bedrooms?: IntWithAggregatesFilter | number
    sqFootage?: IntWithAggregatesFilter | number
    bathrooms?: IntWithAggregatesFilter | number
    floors?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ValuateWhereInput = {
    AND?: Enumerable<ValuateWhereInput>
    OR?: Enumerable<ValuateWhereInput>
    NOT?: Enumerable<ValuateWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    image?: StringFilter | string
    address?: StringFilter | string
    bedrooms?: IntFilter | number
    sqFootage?: IntFilter | number
    bathrooms?: IntFilter | number
    floors?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ValuateOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    image?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ValuateWhereUniqueInput = {
    id?: number
  }

  export type ValuateOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    image?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ValuateCountOrderByAggregateInput
    _avg?: ValuateAvgOrderByAggregateInput
    _max?: ValuateMaxOrderByAggregateInput
    _min?: ValuateMinOrderByAggregateInput
    _sum?: ValuateSumOrderByAggregateInput
  }

  export type ValuateScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ValuateScalarWhereWithAggregatesInput>
    OR?: Enumerable<ValuateScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ValuateScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    image?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    bedrooms?: IntWithAggregatesFilter | number
    sqFootage?: IntWithAggregatesFilter | number
    bathrooms?: IntWithAggregatesFilter | number
    floors?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SavedSearchesWhereInput = {
    AND?: Enumerable<SavedSearchesWhereInput>
    OR?: Enumerable<SavedSearchesWhereInput>
    NOT?: Enumerable<SavedSearchesWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    searchBar?: StringFilter | string
    aquireType?: StringFilter | string
    houseType?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SavedSearchesOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    searchBar?: SortOrder
    aquireType?: SortOrder
    houseType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SavedSearchesWhereUniqueInput = {
    id?: number
  }

  export type SavedSearchesOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    searchBar?: SortOrder
    aquireType?: SortOrder
    houseType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SavedSearchesCountOrderByAggregateInput
    _avg?: SavedSearchesAvgOrderByAggregateInput
    _max?: SavedSearchesMaxOrderByAggregateInput
    _min?: SavedSearchesMinOrderByAggregateInput
    _sum?: SavedSearchesSumOrderByAggregateInput
  }

  export type SavedSearchesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SavedSearchesScalarWhereWithAggregatesInput>
    OR?: Enumerable<SavedSearchesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SavedSearchesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    searchBar?: StringWithAggregatesFilter | string
    aquireType?: StringWithAggregatesFilter | string
    houseType?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type HiddenAnnouncementsWhereInput = {
    AND?: Enumerable<HiddenAnnouncementsWhereInput>
    OR?: Enumerable<HiddenAnnouncementsWhereInput>
    NOT?: Enumerable<HiddenAnnouncementsWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    buy?: XOR<BuyRelationFilter, BuyWhereInput> | null
    rent?: XOR<RentRelationFilter, RentWhereInput> | null
    auction?: XOR<AuctionRelationFilter, AuctionWhereInput> | null
  }

  export type HiddenAnnouncementsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    buy?: BuyOrderByWithRelationInput
    rent?: RentOrderByWithRelationInput
    auction?: AuctionOrderByWithRelationInput
  }

  export type HiddenAnnouncementsWhereUniqueInput = {
    id?: number
  }

  export type HiddenAnnouncementsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HiddenAnnouncementsCountOrderByAggregateInput
    _avg?: HiddenAnnouncementsAvgOrderByAggregateInput
    _max?: HiddenAnnouncementsMaxOrderByAggregateInput
    _min?: HiddenAnnouncementsMinOrderByAggregateInput
    _sum?: HiddenAnnouncementsSumOrderByAggregateInput
  }

  export type HiddenAnnouncementsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HiddenAnnouncementsScalarWhereWithAggregatesInput>
    OR?: Enumerable<HiddenAnnouncementsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HiddenAnnouncementsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type BuyWhereInput = {
    AND?: Enumerable<BuyWhereInput>
    OR?: Enumerable<BuyWhereInput>
    NOT?: Enumerable<BuyWhereInput>
    id?: IntFilter | number
    savedAnnouncementId?: IntNullableFilter | number | null
    hiddenAnnouncementId?: IntNullableFilter | number | null
    image?: StringFilter | string
    type?: StringFilter | string
    price?: StringFilter | string
    address?: StringFilter | string
    bedrooms?: IntFilter | number
    sqFootage?: IntFilter | number
    bathrooms?: IntFilter | number
    floors?: IntFilter | number
    descriptionTitle?: StringFilter | string
    description?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    messages?: MessagesListRelationFilter
    savedAnnouncement?: XOR<SavedAnnouncementsRelationFilter, SavedAnnouncementsWhereInput> | null
    hiddenAnnouncement?: XOR<HiddenAnnouncementsRelationFilter, HiddenAnnouncementsWhereInput> | null
  }

  export type BuyOrderByWithRelationInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    image?: SortOrder
    type?: SortOrder
    price?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    descriptionTitle?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    messages?: MessagesOrderByRelationAggregateInput
    savedAnnouncement?: SavedAnnouncementsOrderByWithRelationInput
    hiddenAnnouncement?: HiddenAnnouncementsOrderByWithRelationInput
  }

  export type BuyWhereUniqueInput = {
    id?: number
    savedAnnouncementId?: number
    hiddenAnnouncementId?: number
  }

  export type BuyOrderByWithAggregationInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    image?: SortOrder
    type?: SortOrder
    price?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    descriptionTitle?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BuyCountOrderByAggregateInput
    _avg?: BuyAvgOrderByAggregateInput
    _max?: BuyMaxOrderByAggregateInput
    _min?: BuyMinOrderByAggregateInput
    _sum?: BuySumOrderByAggregateInput
  }

  export type BuyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BuyScalarWhereWithAggregatesInput>
    OR?: Enumerable<BuyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BuyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    savedAnnouncementId?: IntNullableWithAggregatesFilter | number | null
    hiddenAnnouncementId?: IntNullableWithAggregatesFilter | number | null
    image?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    price?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    bedrooms?: IntWithAggregatesFilter | number
    sqFootage?: IntWithAggregatesFilter | number
    bathrooms?: IntWithAggregatesFilter | number
    floors?: IntWithAggregatesFilter | number
    descriptionTitle?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type RentWhereInput = {
    AND?: Enumerable<RentWhereInput>
    OR?: Enumerable<RentWhereInput>
    NOT?: Enumerable<RentWhereInput>
    id?: IntFilter | number
    savedAnnouncementId?: IntNullableFilter | number | null
    hiddenAnnouncementId?: IntNullableFilter | number | null
    image?: StringFilter | string
    type?: StringFilter | string
    price?: StringFilter | string
    address?: StringFilter | string
    bedrooms?: IntFilter | number
    sqFootage?: IntFilter | number
    bathrooms?: IntFilter | number
    floors?: IntFilter | number
    descriptionTitle?: StringFilter | string
    description?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    messages?: MessagesListRelationFilter
    savedAnnouncement?: XOR<SavedAnnouncementsRelationFilter, SavedAnnouncementsWhereInput> | null
    hiddenAnnouncement?: XOR<HiddenAnnouncementsRelationFilter, HiddenAnnouncementsWhereInput> | null
  }

  export type RentOrderByWithRelationInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    image?: SortOrder
    type?: SortOrder
    price?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    descriptionTitle?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    messages?: MessagesOrderByRelationAggregateInput
    savedAnnouncement?: SavedAnnouncementsOrderByWithRelationInput
    hiddenAnnouncement?: HiddenAnnouncementsOrderByWithRelationInput
  }

  export type RentWhereUniqueInput = {
    id?: number
    savedAnnouncementId?: number
    hiddenAnnouncementId?: number
  }

  export type RentOrderByWithAggregationInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    image?: SortOrder
    type?: SortOrder
    price?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    descriptionTitle?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RentCountOrderByAggregateInput
    _avg?: RentAvgOrderByAggregateInput
    _max?: RentMaxOrderByAggregateInput
    _min?: RentMinOrderByAggregateInput
    _sum?: RentSumOrderByAggregateInput
  }

  export type RentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RentScalarWhereWithAggregatesInput>
    OR?: Enumerable<RentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    savedAnnouncementId?: IntNullableWithAggregatesFilter | number | null
    hiddenAnnouncementId?: IntNullableWithAggregatesFilter | number | null
    image?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    price?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    bedrooms?: IntWithAggregatesFilter | number
    sqFootage?: IntWithAggregatesFilter | number
    bathrooms?: IntWithAggregatesFilter | number
    floors?: IntWithAggregatesFilter | number
    descriptionTitle?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AuctionWhereInput = {
    AND?: Enumerable<AuctionWhereInput>
    OR?: Enumerable<AuctionWhereInput>
    NOT?: Enumerable<AuctionWhereInput>
    id?: IntFilter | number
    savedAnnouncementId?: IntNullableFilter | number | null
    hiddenAnnouncementId?: IntNullableFilter | number | null
    image?: StringFilter | string
    type?: StringFilter | string
    price?: StringFilter | string
    address?: StringFilter | string
    bedrooms?: IntFilter | number
    sqFootage?: IntFilter | number
    bathrooms?: IntFilter | number
    floors?: IntFilter | number
    descriptionTitle?: StringFilter | string
    description?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    messages?: MessagesListRelationFilter
    savedAnnouncement?: XOR<SavedAnnouncementsRelationFilter, SavedAnnouncementsWhereInput> | null
    hiddenAnnouncement?: XOR<HiddenAnnouncementsRelationFilter, HiddenAnnouncementsWhereInput> | null
  }

  export type AuctionOrderByWithRelationInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    image?: SortOrder
    type?: SortOrder
    price?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    descriptionTitle?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    messages?: MessagesOrderByRelationAggregateInput
    savedAnnouncement?: SavedAnnouncementsOrderByWithRelationInput
    hiddenAnnouncement?: HiddenAnnouncementsOrderByWithRelationInput
  }

  export type AuctionWhereUniqueInput = {
    id?: number
    savedAnnouncementId?: number
    hiddenAnnouncementId?: number
  }

  export type AuctionOrderByWithAggregationInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    image?: SortOrder
    type?: SortOrder
    price?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    descriptionTitle?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AuctionCountOrderByAggregateInput
    _avg?: AuctionAvgOrderByAggregateInput
    _max?: AuctionMaxOrderByAggregateInput
    _min?: AuctionMinOrderByAggregateInput
    _sum?: AuctionSumOrderByAggregateInput
  }

  export type AuctionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AuctionScalarWhereWithAggregatesInput>
    OR?: Enumerable<AuctionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AuctionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    savedAnnouncementId?: IntNullableWithAggregatesFilter | number | null
    hiddenAnnouncementId?: IntNullableWithAggregatesFilter | number | null
    image?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    price?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    bedrooms?: IntWithAggregatesFilter | number
    sqFootage?: IntWithAggregatesFilter | number
    bathrooms?: IntWithAggregatesFilter | number
    floors?: IntWithAggregatesFilter | number
    descriptionTitle?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AgencyWhereInput = {
    AND?: Enumerable<AgencyWhereInput>
    OR?: Enumerable<AgencyWhereInput>
    NOT?: Enumerable<AgencyWhereInput>
    id?: IntFilter | number
    image?: StringFilter | string
    name?: StringFilter | string
    address?: StringFilter | string
    history?: IntFilter | number
    phone?: StringFilter | string
    announcements?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    messages?: MessagesListRelationFilter
  }

  export type AgencyOrderByWithRelationInput = {
    id?: SortOrder
    image?: SortOrder
    name?: SortOrder
    address?: SortOrder
    history?: SortOrder
    phone?: SortOrder
    announcements?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    messages?: MessagesOrderByRelationAggregateInput
  }

  export type AgencyWhereUniqueInput = {
    id?: number
  }

  export type AgencyOrderByWithAggregationInput = {
    id?: SortOrder
    image?: SortOrder
    name?: SortOrder
    address?: SortOrder
    history?: SortOrder
    phone?: SortOrder
    announcements?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AgencyCountOrderByAggregateInput
    _avg?: AgencyAvgOrderByAggregateInput
    _max?: AgencyMaxOrderByAggregateInput
    _min?: AgencyMinOrderByAggregateInput
    _sum?: AgencySumOrderByAggregateInput
  }

  export type AgencyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AgencyScalarWhereWithAggregatesInput>
    OR?: Enumerable<AgencyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AgencyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    image?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    history?: IntWithAggregatesFilter | number
    phone?: StringWithAggregatesFilter | string
    announcements?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesCreateNestedManyWithoutUserInput
    savedAnnouncement?: SavedAnnouncementsCreateNestedManyWithoutUserInput
    sell?: SellCreateNestedManyWithoutUserInput
    valuate?: ValuateCreateNestedManyWithoutUserInput
    savedSearch?: SavedSearchesCreateNestedManyWithoutUserInput
    hiddenAnnouncement?: HiddenAnnouncementsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesUncheckedCreateNestedManyWithoutUserInput
    savedAnnouncement?: SavedAnnouncementsUncheckedCreateNestedManyWithoutUserInput
    sell?: SellUncheckedCreateNestedManyWithoutUserInput
    valuate?: ValuateUncheckedCreateNestedManyWithoutUserInput
    savedSearch?: SavedSearchesUncheckedCreateNestedManyWithoutUserInput
    hiddenAnnouncement?: HiddenAnnouncementsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUpdateManyWithoutUserNestedInput
    savedAnnouncement?: SavedAnnouncementsUpdateManyWithoutUserNestedInput
    sell?: SellUpdateManyWithoutUserNestedInput
    valuate?: ValuateUpdateManyWithoutUserNestedInput
    savedSearch?: SavedSearchesUpdateManyWithoutUserNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUncheckedUpdateManyWithoutUserNestedInput
    savedAnnouncement?: SavedAnnouncementsUncheckedUpdateManyWithoutUserNestedInput
    sell?: SellUncheckedUpdateManyWithoutUserNestedInput
    valuate?: ValuateUncheckedUpdateManyWithoutUserNestedInput
    savedSearch?: SavedSearchesUncheckedUpdateManyWithoutUserNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessagesCreateInput = {
    message: string
    name: string
    email: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMessagesInput
    buy: BuyCreateNestedOneWithoutMessagesInput
    rent: RentCreateNestedOneWithoutMessagesInput
    auction: AuctionCreateNestedOneWithoutMessagesInput
    agency: AgencyCreateNestedOneWithoutMessagesInput
  }

  export type MessagesUncheckedCreateInput = {
    id?: number
    message: string
    name: string
    email: string
    phone: string
    userId: number
    buyId: number
    rentId: number
    auctionId: number
    agencyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessagesUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
    buy?: BuyUpdateOneRequiredWithoutMessagesNestedInput
    rent?: RentUpdateOneRequiredWithoutMessagesNestedInput
    auction?: AuctionUpdateOneRequiredWithoutMessagesNestedInput
    agency?: AgencyUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessagesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    buyId?: IntFieldUpdateOperationsInput | number
    rentId?: IntFieldUpdateOperationsInput | number
    auctionId?: IntFieldUpdateOperationsInput | number
    agencyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessagesCreateManyInput = {
    id?: number
    message: string
    name: string
    email: string
    phone: string
    userId: number
    buyId: number
    rentId: number
    auctionId: number
    agencyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessagesUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessagesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    buyId?: IntFieldUpdateOperationsInput | number
    rentId?: IntFieldUpdateOperationsInput | number
    auctionId?: IntFieldUpdateOperationsInput | number
    agencyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedAnnouncementsCreateInput = {
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSavedAnnouncementInput
    buy?: BuyCreateNestedOneWithoutSavedAnnouncementInput
    rent?: RentCreateNestedOneWithoutSavedAnnouncementInput
    auction?: AuctionCreateNestedOneWithoutSavedAnnouncementInput
  }

  export type SavedAnnouncementsUncheckedCreateInput = {
    id?: number
    email: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    buy?: BuyUncheckedCreateNestedOneWithoutSavedAnnouncementInput
    rent?: RentUncheckedCreateNestedOneWithoutSavedAnnouncementInput
    auction?: AuctionUncheckedCreateNestedOneWithoutSavedAnnouncementInput
  }

  export type SavedAnnouncementsUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSavedAnnouncementNestedInput
    buy?: BuyUpdateOneWithoutSavedAnnouncementNestedInput
    rent?: RentUpdateOneWithoutSavedAnnouncementNestedInput
    auction?: AuctionUpdateOneWithoutSavedAnnouncementNestedInput
  }

  export type SavedAnnouncementsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy?: BuyUncheckedUpdateOneWithoutSavedAnnouncementNestedInput
    rent?: RentUncheckedUpdateOneWithoutSavedAnnouncementNestedInput
    auction?: AuctionUncheckedUpdateOneWithoutSavedAnnouncementNestedInput
  }

  export type SavedAnnouncementsCreateManyInput = {
    id?: number
    email: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SavedAnnouncementsUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedAnnouncementsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellCreateInput = {
    image: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSellInput
  }

  export type SellUncheckedCreateInput = {
    id?: number
    image: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SellUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSellNestedInput
  }

  export type SellUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellCreateManyInput = {
    id?: number
    image: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SellUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValuateCreateInput = {
    image: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutValuateInput
  }

  export type ValuateUncheckedCreateInput = {
    id?: number
    userId: number
    image: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValuateUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutValuateNestedInput
  }

  export type ValuateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValuateCreateManyInput = {
    id?: number
    userId: number
    image: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValuateUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValuateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedSearchesCreateInput = {
    searchBar: string
    aquireType: string
    houseType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSavedSearchInput
  }

  export type SavedSearchesUncheckedCreateInput = {
    id?: number
    userId: number
    searchBar: string
    aquireType: string
    houseType: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SavedSearchesUpdateInput = {
    searchBar?: StringFieldUpdateOperationsInput | string
    aquireType?: StringFieldUpdateOperationsInput | string
    houseType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSavedSearchNestedInput
  }

  export type SavedSearchesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    searchBar?: StringFieldUpdateOperationsInput | string
    aquireType?: StringFieldUpdateOperationsInput | string
    houseType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedSearchesCreateManyInput = {
    id?: number
    userId: number
    searchBar: string
    aquireType: string
    houseType: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SavedSearchesUpdateManyMutationInput = {
    searchBar?: StringFieldUpdateOperationsInput | string
    aquireType?: StringFieldUpdateOperationsInput | string
    houseType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedSearchesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    searchBar?: StringFieldUpdateOperationsInput | string
    aquireType?: StringFieldUpdateOperationsInput | string
    houseType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HiddenAnnouncementsCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHiddenAnnouncementInput
    buy?: BuyCreateNestedOneWithoutHiddenAnnouncementInput
    rent?: RentCreateNestedOneWithoutHiddenAnnouncementInput
    auction?: AuctionCreateNestedOneWithoutHiddenAnnouncementInput
  }

  export type HiddenAnnouncementsUncheckedCreateInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    buy?: BuyUncheckedCreateNestedOneWithoutHiddenAnnouncementInput
    rent?: RentUncheckedCreateNestedOneWithoutHiddenAnnouncementInput
    auction?: AuctionUncheckedCreateNestedOneWithoutHiddenAnnouncementInput
  }

  export type HiddenAnnouncementsUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHiddenAnnouncementNestedInput
    buy?: BuyUpdateOneWithoutHiddenAnnouncementNestedInput
    rent?: RentUpdateOneWithoutHiddenAnnouncementNestedInput
    auction?: AuctionUpdateOneWithoutHiddenAnnouncementNestedInput
  }

  export type HiddenAnnouncementsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy?: BuyUncheckedUpdateOneWithoutHiddenAnnouncementNestedInput
    rent?: RentUncheckedUpdateOneWithoutHiddenAnnouncementNestedInput
    auction?: AuctionUncheckedUpdateOneWithoutHiddenAnnouncementNestedInput
  }

  export type HiddenAnnouncementsCreateManyInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HiddenAnnouncementsUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HiddenAnnouncementsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyCreateInput = {
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesCreateNestedManyWithoutBuyInput
    savedAnnouncement?: SavedAnnouncementsCreateNestedOneWithoutBuyInput
    hiddenAnnouncement?: HiddenAnnouncementsCreateNestedOneWithoutBuyInput
  }

  export type BuyUncheckedCreateInput = {
    id?: number
    savedAnnouncementId?: number | null
    hiddenAnnouncementId?: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesUncheckedCreateNestedManyWithoutBuyInput
  }

  export type BuyUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUpdateManyWithoutBuyNestedInput
    savedAnnouncement?: SavedAnnouncementsUpdateOneWithoutBuyNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUpdateOneWithoutBuyNestedInput
  }

  export type BuyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    savedAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    hiddenAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUncheckedUpdateManyWithoutBuyNestedInput
  }

  export type BuyCreateManyInput = {
    id?: number
    savedAnnouncementId?: number | null
    hiddenAnnouncementId?: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuyUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    savedAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    hiddenAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RentCreateInput = {
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesCreateNestedManyWithoutRentInput
    savedAnnouncement?: SavedAnnouncementsCreateNestedOneWithoutRentInput
    hiddenAnnouncement?: HiddenAnnouncementsCreateNestedOneWithoutRentInput
  }

  export type RentUncheckedCreateInput = {
    id?: number
    savedAnnouncementId?: number | null
    hiddenAnnouncementId?: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesUncheckedCreateNestedManyWithoutRentInput
  }

  export type RentUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUpdateManyWithoutRentNestedInput
    savedAnnouncement?: SavedAnnouncementsUpdateOneWithoutRentNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUpdateOneWithoutRentNestedInput
  }

  export type RentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    savedAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    hiddenAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUncheckedUpdateManyWithoutRentNestedInput
  }

  export type RentCreateManyInput = {
    id?: number
    savedAnnouncementId?: number | null
    hiddenAnnouncementId?: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RentUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    savedAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    hiddenAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionCreateInput = {
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesCreateNestedManyWithoutAuctionInput
    savedAnnouncement?: SavedAnnouncementsCreateNestedOneWithoutAuctionInput
    hiddenAnnouncement?: HiddenAnnouncementsCreateNestedOneWithoutAuctionInput
  }

  export type AuctionUncheckedCreateInput = {
    id?: number
    savedAnnouncementId?: number | null
    hiddenAnnouncementId?: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesUncheckedCreateNestedManyWithoutAuctionInput
  }

  export type AuctionUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUpdateManyWithoutAuctionNestedInput
    savedAnnouncement?: SavedAnnouncementsUpdateOneWithoutAuctionNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUpdateOneWithoutAuctionNestedInput
  }

  export type AuctionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    savedAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    hiddenAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUncheckedUpdateManyWithoutAuctionNestedInput
  }

  export type AuctionCreateManyInput = {
    id?: number
    savedAnnouncementId?: number | null
    hiddenAnnouncementId?: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuctionUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    savedAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    hiddenAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencyCreateInput = {
    image: string
    name: string
    address: string
    history: number
    phone: string
    announcements: number
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUncheckedCreateInput = {
    id?: number
    image: string
    name: string
    address: string
    history: number
    phone: string
    announcements: number
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    history?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    announcements?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    history?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    announcements?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyCreateManyInput = {
    id?: number
    image: string
    name: string
    address: string
    history: number
    phone: string
    announcements: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgencyUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    history?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    announcements?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    history?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    announcements?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type MessagesListRelationFilter = {
    every?: MessagesWhereInput
    some?: MessagesWhereInput
    none?: MessagesWhereInput
  }

  export type SavedAnnouncementsListRelationFilter = {
    every?: SavedAnnouncementsWhereInput
    some?: SavedAnnouncementsWhereInput
    none?: SavedAnnouncementsWhereInput
  }

  export type SellListRelationFilter = {
    every?: SellWhereInput
    some?: SellWhereInput
    none?: SellWhereInput
  }

  export type ValuateListRelationFilter = {
    every?: ValuateWhereInput
    some?: ValuateWhereInput
    none?: ValuateWhereInput
  }

  export type SavedSearchesListRelationFilter = {
    every?: SavedSearchesWhereInput
    some?: SavedSearchesWhereInput
    none?: SavedSearchesWhereInput
  }

  export type HiddenAnnouncementsListRelationFilter = {
    every?: HiddenAnnouncementsWhereInput
    some?: HiddenAnnouncementsWhereInput
    none?: HiddenAnnouncementsWhereInput
  }

  export type MessagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SavedAnnouncementsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SellOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ValuateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SavedSearchesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HiddenAnnouncementsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type BuyRelationFilter = {
    is?: BuyWhereInput | null
    isNot?: BuyWhereInput | null
  }

  export type RentRelationFilter = {
    is?: RentWhereInput | null
    isNot?: RentWhereInput | null
  }

  export type AuctionRelationFilter = {
    is?: AuctionWhereInput | null
    isNot?: AuctionWhereInput | null
  }

  export type AgencyRelationFilter = {
    is?: AgencyWhereInput
    isNot?: AgencyWhereInput
  }

  export type MessagesCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    userId?: SortOrder
    buyId?: SortOrder
    rentId?: SortOrder
    auctionId?: SortOrder
    agencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessagesAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    buyId?: SortOrder
    rentId?: SortOrder
    auctionId?: SortOrder
    agencyId?: SortOrder
  }

  export type MessagesMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    userId?: SortOrder
    buyId?: SortOrder
    rentId?: SortOrder
    auctionId?: SortOrder
    agencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessagesMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    userId?: SortOrder
    buyId?: SortOrder
    rentId?: SortOrder
    auctionId?: SortOrder
    agencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessagesSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    buyId?: SortOrder
    rentId?: SortOrder
    auctionId?: SortOrder
    agencyId?: SortOrder
  }

  export type SavedAnnouncementsCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SavedAnnouncementsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SavedAnnouncementsMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SavedAnnouncementsMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SavedAnnouncementsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SellCountOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SellAvgOrderByAggregateInput = {
    id?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    userId?: SortOrder
  }

  export type SellMaxOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SellMinOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SellSumOrderByAggregateInput = {
    id?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    userId?: SortOrder
  }

  export type ValuateCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    image?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ValuateAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
  }

  export type ValuateMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    image?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ValuateMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    image?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ValuateSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
  }

  export type SavedSearchesCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    searchBar?: SortOrder
    aquireType?: SortOrder
    houseType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SavedSearchesAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SavedSearchesMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    searchBar?: SortOrder
    aquireType?: SortOrder
    houseType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SavedSearchesMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    searchBar?: SortOrder
    aquireType?: SortOrder
    houseType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SavedSearchesSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type HiddenAnnouncementsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HiddenAnnouncementsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type HiddenAnnouncementsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HiddenAnnouncementsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HiddenAnnouncementsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type SavedAnnouncementsRelationFilter = {
    is?: SavedAnnouncementsWhereInput | null
    isNot?: SavedAnnouncementsWhereInput | null
  }

  export type HiddenAnnouncementsRelationFilter = {
    is?: HiddenAnnouncementsWhereInput | null
    isNot?: HiddenAnnouncementsWhereInput | null
  }

  export type BuyCountOrderByAggregateInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    image?: SortOrder
    type?: SortOrder
    price?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    descriptionTitle?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuyAvgOrderByAggregateInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
  }

  export type BuyMaxOrderByAggregateInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    image?: SortOrder
    type?: SortOrder
    price?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    descriptionTitle?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuyMinOrderByAggregateInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    image?: SortOrder
    type?: SortOrder
    price?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    descriptionTitle?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BuySumOrderByAggregateInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type RentCountOrderByAggregateInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    image?: SortOrder
    type?: SortOrder
    price?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    descriptionTitle?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RentAvgOrderByAggregateInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
  }

  export type RentMaxOrderByAggregateInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    image?: SortOrder
    type?: SortOrder
    price?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    descriptionTitle?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RentMinOrderByAggregateInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    image?: SortOrder
    type?: SortOrder
    price?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    descriptionTitle?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RentSumOrderByAggregateInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
  }

  export type AuctionCountOrderByAggregateInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    image?: SortOrder
    type?: SortOrder
    price?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    descriptionTitle?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuctionAvgOrderByAggregateInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
  }

  export type AuctionMaxOrderByAggregateInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    image?: SortOrder
    type?: SortOrder
    price?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    descriptionTitle?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuctionMinOrderByAggregateInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    image?: SortOrder
    type?: SortOrder
    price?: SortOrder
    address?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
    descriptionTitle?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuctionSumOrderByAggregateInput = {
    id?: SortOrder
    savedAnnouncementId?: SortOrder
    hiddenAnnouncementId?: SortOrder
    bedrooms?: SortOrder
    sqFootage?: SortOrder
    bathrooms?: SortOrder
    floors?: SortOrder
  }

  export type AgencyCountOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    name?: SortOrder
    address?: SortOrder
    history?: SortOrder
    phone?: SortOrder
    announcements?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgencyAvgOrderByAggregateInput = {
    id?: SortOrder
    history?: SortOrder
    announcements?: SortOrder
  }

  export type AgencyMaxOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    name?: SortOrder
    address?: SortOrder
    history?: SortOrder
    phone?: SortOrder
    announcements?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgencyMinOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    name?: SortOrder
    address?: SortOrder
    history?: SortOrder
    phone?: SortOrder
    announcements?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgencySumOrderByAggregateInput = {
    id?: SortOrder
    history?: SortOrder
    announcements?: SortOrder
  }

  export type MessagesCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutUserInput>, Enumerable<MessagesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutUserInput>
    createMany?: MessagesCreateManyUserInputEnvelope
    connect?: Enumerable<MessagesWhereUniqueInput>
  }

  export type SavedAnnouncementsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SavedAnnouncementsCreateWithoutUserInput>, Enumerable<SavedAnnouncementsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SavedAnnouncementsCreateOrConnectWithoutUserInput>
    createMany?: SavedAnnouncementsCreateManyUserInputEnvelope
    connect?: Enumerable<SavedAnnouncementsWhereUniqueInput>
  }

  export type SellCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SellCreateWithoutUserInput>, Enumerable<SellUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SellCreateOrConnectWithoutUserInput>
    createMany?: SellCreateManyUserInputEnvelope
    connect?: Enumerable<SellWhereUniqueInput>
  }

  export type ValuateCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ValuateCreateWithoutUserInput>, Enumerable<ValuateUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ValuateCreateOrConnectWithoutUserInput>
    createMany?: ValuateCreateManyUserInputEnvelope
    connect?: Enumerable<ValuateWhereUniqueInput>
  }

  export type SavedSearchesCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SavedSearchesCreateWithoutUserInput>, Enumerable<SavedSearchesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SavedSearchesCreateOrConnectWithoutUserInput>
    createMany?: SavedSearchesCreateManyUserInputEnvelope
    connect?: Enumerable<SavedSearchesWhereUniqueInput>
  }

  export type HiddenAnnouncementsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<HiddenAnnouncementsCreateWithoutUserInput>, Enumerable<HiddenAnnouncementsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HiddenAnnouncementsCreateOrConnectWithoutUserInput>
    createMany?: HiddenAnnouncementsCreateManyUserInputEnvelope
    connect?: Enumerable<HiddenAnnouncementsWhereUniqueInput>
  }

  export type MessagesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutUserInput>, Enumerable<MessagesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutUserInput>
    createMany?: MessagesCreateManyUserInputEnvelope
    connect?: Enumerable<MessagesWhereUniqueInput>
  }

  export type SavedAnnouncementsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SavedAnnouncementsCreateWithoutUserInput>, Enumerable<SavedAnnouncementsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SavedAnnouncementsCreateOrConnectWithoutUserInput>
    createMany?: SavedAnnouncementsCreateManyUserInputEnvelope
    connect?: Enumerable<SavedAnnouncementsWhereUniqueInput>
  }

  export type SellUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SellCreateWithoutUserInput>, Enumerable<SellUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SellCreateOrConnectWithoutUserInput>
    createMany?: SellCreateManyUserInputEnvelope
    connect?: Enumerable<SellWhereUniqueInput>
  }

  export type ValuateUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ValuateCreateWithoutUserInput>, Enumerable<ValuateUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ValuateCreateOrConnectWithoutUserInput>
    createMany?: ValuateCreateManyUserInputEnvelope
    connect?: Enumerable<ValuateWhereUniqueInput>
  }

  export type SavedSearchesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SavedSearchesCreateWithoutUserInput>, Enumerable<SavedSearchesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SavedSearchesCreateOrConnectWithoutUserInput>
    createMany?: SavedSearchesCreateManyUserInputEnvelope
    connect?: Enumerable<SavedSearchesWhereUniqueInput>
  }

  export type HiddenAnnouncementsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<HiddenAnnouncementsCreateWithoutUserInput>, Enumerable<HiddenAnnouncementsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HiddenAnnouncementsCreateOrConnectWithoutUserInput>
    createMany?: HiddenAnnouncementsCreateManyUserInputEnvelope
    connect?: Enumerable<HiddenAnnouncementsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MessagesUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutUserInput>, Enumerable<MessagesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MessagesUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MessagesCreateManyUserInputEnvelope
    set?: Enumerable<MessagesWhereUniqueInput>
    disconnect?: Enumerable<MessagesWhereUniqueInput>
    delete?: Enumerable<MessagesWhereUniqueInput>
    connect?: Enumerable<MessagesWhereUniqueInput>
    update?: Enumerable<MessagesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MessagesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MessagesScalarWhereInput>
  }

  export type SavedAnnouncementsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SavedAnnouncementsCreateWithoutUserInput>, Enumerable<SavedAnnouncementsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SavedAnnouncementsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SavedAnnouncementsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SavedAnnouncementsCreateManyUserInputEnvelope
    set?: Enumerable<SavedAnnouncementsWhereUniqueInput>
    disconnect?: Enumerable<SavedAnnouncementsWhereUniqueInput>
    delete?: Enumerable<SavedAnnouncementsWhereUniqueInput>
    connect?: Enumerable<SavedAnnouncementsWhereUniqueInput>
    update?: Enumerable<SavedAnnouncementsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SavedAnnouncementsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SavedAnnouncementsScalarWhereInput>
  }

  export type SellUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SellCreateWithoutUserInput>, Enumerable<SellUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SellCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SellUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SellCreateManyUserInputEnvelope
    set?: Enumerable<SellWhereUniqueInput>
    disconnect?: Enumerable<SellWhereUniqueInput>
    delete?: Enumerable<SellWhereUniqueInput>
    connect?: Enumerable<SellWhereUniqueInput>
    update?: Enumerable<SellUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SellUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SellScalarWhereInput>
  }

  export type ValuateUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ValuateCreateWithoutUserInput>, Enumerable<ValuateUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ValuateCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ValuateUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ValuateCreateManyUserInputEnvelope
    set?: Enumerable<ValuateWhereUniqueInput>
    disconnect?: Enumerable<ValuateWhereUniqueInput>
    delete?: Enumerable<ValuateWhereUniqueInput>
    connect?: Enumerable<ValuateWhereUniqueInput>
    update?: Enumerable<ValuateUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ValuateUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ValuateScalarWhereInput>
  }

  export type SavedSearchesUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SavedSearchesCreateWithoutUserInput>, Enumerable<SavedSearchesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SavedSearchesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SavedSearchesUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SavedSearchesCreateManyUserInputEnvelope
    set?: Enumerable<SavedSearchesWhereUniqueInput>
    disconnect?: Enumerable<SavedSearchesWhereUniqueInput>
    delete?: Enumerable<SavedSearchesWhereUniqueInput>
    connect?: Enumerable<SavedSearchesWhereUniqueInput>
    update?: Enumerable<SavedSearchesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SavedSearchesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SavedSearchesScalarWhereInput>
  }

  export type HiddenAnnouncementsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<HiddenAnnouncementsCreateWithoutUserInput>, Enumerable<HiddenAnnouncementsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HiddenAnnouncementsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<HiddenAnnouncementsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: HiddenAnnouncementsCreateManyUserInputEnvelope
    set?: Enumerable<HiddenAnnouncementsWhereUniqueInput>
    disconnect?: Enumerable<HiddenAnnouncementsWhereUniqueInput>
    delete?: Enumerable<HiddenAnnouncementsWhereUniqueInput>
    connect?: Enumerable<HiddenAnnouncementsWhereUniqueInput>
    update?: Enumerable<HiddenAnnouncementsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<HiddenAnnouncementsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<HiddenAnnouncementsScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MessagesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutUserInput>, Enumerable<MessagesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MessagesUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MessagesCreateManyUserInputEnvelope
    set?: Enumerable<MessagesWhereUniqueInput>
    disconnect?: Enumerable<MessagesWhereUniqueInput>
    delete?: Enumerable<MessagesWhereUniqueInput>
    connect?: Enumerable<MessagesWhereUniqueInput>
    update?: Enumerable<MessagesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MessagesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MessagesScalarWhereInput>
  }

  export type SavedAnnouncementsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SavedAnnouncementsCreateWithoutUserInput>, Enumerable<SavedAnnouncementsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SavedAnnouncementsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SavedAnnouncementsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SavedAnnouncementsCreateManyUserInputEnvelope
    set?: Enumerable<SavedAnnouncementsWhereUniqueInput>
    disconnect?: Enumerable<SavedAnnouncementsWhereUniqueInput>
    delete?: Enumerable<SavedAnnouncementsWhereUniqueInput>
    connect?: Enumerable<SavedAnnouncementsWhereUniqueInput>
    update?: Enumerable<SavedAnnouncementsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SavedAnnouncementsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SavedAnnouncementsScalarWhereInput>
  }

  export type SellUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SellCreateWithoutUserInput>, Enumerable<SellUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SellCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SellUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SellCreateManyUserInputEnvelope
    set?: Enumerable<SellWhereUniqueInput>
    disconnect?: Enumerable<SellWhereUniqueInput>
    delete?: Enumerable<SellWhereUniqueInput>
    connect?: Enumerable<SellWhereUniqueInput>
    update?: Enumerable<SellUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SellUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SellScalarWhereInput>
  }

  export type ValuateUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ValuateCreateWithoutUserInput>, Enumerable<ValuateUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ValuateCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ValuateUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ValuateCreateManyUserInputEnvelope
    set?: Enumerable<ValuateWhereUniqueInput>
    disconnect?: Enumerable<ValuateWhereUniqueInput>
    delete?: Enumerable<ValuateWhereUniqueInput>
    connect?: Enumerable<ValuateWhereUniqueInput>
    update?: Enumerable<ValuateUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ValuateUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ValuateScalarWhereInput>
  }

  export type SavedSearchesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SavedSearchesCreateWithoutUserInput>, Enumerable<SavedSearchesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SavedSearchesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SavedSearchesUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SavedSearchesCreateManyUserInputEnvelope
    set?: Enumerable<SavedSearchesWhereUniqueInput>
    disconnect?: Enumerable<SavedSearchesWhereUniqueInput>
    delete?: Enumerable<SavedSearchesWhereUniqueInput>
    connect?: Enumerable<SavedSearchesWhereUniqueInput>
    update?: Enumerable<SavedSearchesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SavedSearchesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SavedSearchesScalarWhereInput>
  }

  export type HiddenAnnouncementsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<HiddenAnnouncementsCreateWithoutUserInput>, Enumerable<HiddenAnnouncementsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HiddenAnnouncementsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<HiddenAnnouncementsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: HiddenAnnouncementsCreateManyUserInputEnvelope
    set?: Enumerable<HiddenAnnouncementsWhereUniqueInput>
    disconnect?: Enumerable<HiddenAnnouncementsWhereUniqueInput>
    delete?: Enumerable<HiddenAnnouncementsWhereUniqueInput>
    connect?: Enumerable<HiddenAnnouncementsWhereUniqueInput>
    update?: Enumerable<HiddenAnnouncementsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<HiddenAnnouncementsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<HiddenAnnouncementsScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutMessagesInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type BuyCreateNestedOneWithoutMessagesInput = {
    create?: XOR<BuyCreateWithoutMessagesInput, BuyUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: BuyCreateOrConnectWithoutMessagesInput
    connect?: BuyWhereUniqueInput
  }

  export type RentCreateNestedOneWithoutMessagesInput = {
    create?: XOR<RentCreateWithoutMessagesInput, RentUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: RentCreateOrConnectWithoutMessagesInput
    connect?: RentWhereUniqueInput
  }

  export type AuctionCreateNestedOneWithoutMessagesInput = {
    create?: XOR<AuctionCreateWithoutMessagesInput, AuctionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: AuctionCreateOrConnectWithoutMessagesInput
    connect?: AuctionWhereUniqueInput
  }

  export type AgencyCreateNestedOneWithoutMessagesInput = {
    create?: XOR<AgencyCreateWithoutMessagesInput, AgencyUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutMessagesInput
    connect?: AgencyWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    upsert?: UserUpsertWithoutMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type BuyUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<BuyCreateWithoutMessagesInput, BuyUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: BuyCreateOrConnectWithoutMessagesInput
    upsert?: BuyUpsertWithoutMessagesInput
    connect?: BuyWhereUniqueInput
    update?: XOR<BuyUpdateWithoutMessagesInput, BuyUncheckedUpdateWithoutMessagesInput>
  }

  export type RentUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<RentCreateWithoutMessagesInput, RentUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: RentCreateOrConnectWithoutMessagesInput
    upsert?: RentUpsertWithoutMessagesInput
    connect?: RentWhereUniqueInput
    update?: XOR<RentUpdateWithoutMessagesInput, RentUncheckedUpdateWithoutMessagesInput>
  }

  export type AuctionUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<AuctionCreateWithoutMessagesInput, AuctionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: AuctionCreateOrConnectWithoutMessagesInput
    upsert?: AuctionUpsertWithoutMessagesInput
    connect?: AuctionWhereUniqueInput
    update?: XOR<AuctionUpdateWithoutMessagesInput, AuctionUncheckedUpdateWithoutMessagesInput>
  }

  export type AgencyUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<AgencyCreateWithoutMessagesInput, AgencyUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutMessagesInput
    upsert?: AgencyUpsertWithoutMessagesInput
    connect?: AgencyWhereUniqueInput
    update?: XOR<AgencyUpdateWithoutMessagesInput, AgencyUncheckedUpdateWithoutMessagesInput>
  }

  export type UserCreateNestedOneWithoutSavedAnnouncementInput = {
    create?: XOR<UserCreateWithoutSavedAnnouncementInput, UserUncheckedCreateWithoutSavedAnnouncementInput>
    connectOrCreate?: UserCreateOrConnectWithoutSavedAnnouncementInput
    connect?: UserWhereUniqueInput
  }

  export type BuyCreateNestedOneWithoutSavedAnnouncementInput = {
    create?: XOR<BuyCreateWithoutSavedAnnouncementInput, BuyUncheckedCreateWithoutSavedAnnouncementInput>
    connectOrCreate?: BuyCreateOrConnectWithoutSavedAnnouncementInput
    connect?: BuyWhereUniqueInput
  }

  export type RentCreateNestedOneWithoutSavedAnnouncementInput = {
    create?: XOR<RentCreateWithoutSavedAnnouncementInput, RentUncheckedCreateWithoutSavedAnnouncementInput>
    connectOrCreate?: RentCreateOrConnectWithoutSavedAnnouncementInput
    connect?: RentWhereUniqueInput
  }

  export type AuctionCreateNestedOneWithoutSavedAnnouncementInput = {
    create?: XOR<AuctionCreateWithoutSavedAnnouncementInput, AuctionUncheckedCreateWithoutSavedAnnouncementInput>
    connectOrCreate?: AuctionCreateOrConnectWithoutSavedAnnouncementInput
    connect?: AuctionWhereUniqueInput
  }

  export type BuyUncheckedCreateNestedOneWithoutSavedAnnouncementInput = {
    create?: XOR<BuyCreateWithoutSavedAnnouncementInput, BuyUncheckedCreateWithoutSavedAnnouncementInput>
    connectOrCreate?: BuyCreateOrConnectWithoutSavedAnnouncementInput
    connect?: BuyWhereUniqueInput
  }

  export type RentUncheckedCreateNestedOneWithoutSavedAnnouncementInput = {
    create?: XOR<RentCreateWithoutSavedAnnouncementInput, RentUncheckedCreateWithoutSavedAnnouncementInput>
    connectOrCreate?: RentCreateOrConnectWithoutSavedAnnouncementInput
    connect?: RentWhereUniqueInput
  }

  export type AuctionUncheckedCreateNestedOneWithoutSavedAnnouncementInput = {
    create?: XOR<AuctionCreateWithoutSavedAnnouncementInput, AuctionUncheckedCreateWithoutSavedAnnouncementInput>
    connectOrCreate?: AuctionCreateOrConnectWithoutSavedAnnouncementInput
    connect?: AuctionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSavedAnnouncementNestedInput = {
    create?: XOR<UserCreateWithoutSavedAnnouncementInput, UserUncheckedCreateWithoutSavedAnnouncementInput>
    connectOrCreate?: UserCreateOrConnectWithoutSavedAnnouncementInput
    upsert?: UserUpsertWithoutSavedAnnouncementInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSavedAnnouncementInput, UserUncheckedUpdateWithoutSavedAnnouncementInput>
  }

  export type BuyUpdateOneWithoutSavedAnnouncementNestedInput = {
    create?: XOR<BuyCreateWithoutSavedAnnouncementInput, BuyUncheckedCreateWithoutSavedAnnouncementInput>
    connectOrCreate?: BuyCreateOrConnectWithoutSavedAnnouncementInput
    upsert?: BuyUpsertWithoutSavedAnnouncementInput
    disconnect?: boolean
    delete?: boolean
    connect?: BuyWhereUniqueInput
    update?: XOR<BuyUpdateWithoutSavedAnnouncementInput, BuyUncheckedUpdateWithoutSavedAnnouncementInput>
  }

  export type RentUpdateOneWithoutSavedAnnouncementNestedInput = {
    create?: XOR<RentCreateWithoutSavedAnnouncementInput, RentUncheckedCreateWithoutSavedAnnouncementInput>
    connectOrCreate?: RentCreateOrConnectWithoutSavedAnnouncementInput
    upsert?: RentUpsertWithoutSavedAnnouncementInput
    disconnect?: boolean
    delete?: boolean
    connect?: RentWhereUniqueInput
    update?: XOR<RentUpdateWithoutSavedAnnouncementInput, RentUncheckedUpdateWithoutSavedAnnouncementInput>
  }

  export type AuctionUpdateOneWithoutSavedAnnouncementNestedInput = {
    create?: XOR<AuctionCreateWithoutSavedAnnouncementInput, AuctionUncheckedCreateWithoutSavedAnnouncementInput>
    connectOrCreate?: AuctionCreateOrConnectWithoutSavedAnnouncementInput
    upsert?: AuctionUpsertWithoutSavedAnnouncementInput
    disconnect?: boolean
    delete?: boolean
    connect?: AuctionWhereUniqueInput
    update?: XOR<AuctionUpdateWithoutSavedAnnouncementInput, AuctionUncheckedUpdateWithoutSavedAnnouncementInput>
  }

  export type BuyUncheckedUpdateOneWithoutSavedAnnouncementNestedInput = {
    create?: XOR<BuyCreateWithoutSavedAnnouncementInput, BuyUncheckedCreateWithoutSavedAnnouncementInput>
    connectOrCreate?: BuyCreateOrConnectWithoutSavedAnnouncementInput
    upsert?: BuyUpsertWithoutSavedAnnouncementInput
    disconnect?: boolean
    delete?: boolean
    connect?: BuyWhereUniqueInput
    update?: XOR<BuyUpdateWithoutSavedAnnouncementInput, BuyUncheckedUpdateWithoutSavedAnnouncementInput>
  }

  export type RentUncheckedUpdateOneWithoutSavedAnnouncementNestedInput = {
    create?: XOR<RentCreateWithoutSavedAnnouncementInput, RentUncheckedCreateWithoutSavedAnnouncementInput>
    connectOrCreate?: RentCreateOrConnectWithoutSavedAnnouncementInput
    upsert?: RentUpsertWithoutSavedAnnouncementInput
    disconnect?: boolean
    delete?: boolean
    connect?: RentWhereUniqueInput
    update?: XOR<RentUpdateWithoutSavedAnnouncementInput, RentUncheckedUpdateWithoutSavedAnnouncementInput>
  }

  export type AuctionUncheckedUpdateOneWithoutSavedAnnouncementNestedInput = {
    create?: XOR<AuctionCreateWithoutSavedAnnouncementInput, AuctionUncheckedCreateWithoutSavedAnnouncementInput>
    connectOrCreate?: AuctionCreateOrConnectWithoutSavedAnnouncementInput
    upsert?: AuctionUpsertWithoutSavedAnnouncementInput
    disconnect?: boolean
    delete?: boolean
    connect?: AuctionWhereUniqueInput
    update?: XOR<AuctionUpdateWithoutSavedAnnouncementInput, AuctionUncheckedUpdateWithoutSavedAnnouncementInput>
  }

  export type UserCreateNestedOneWithoutSellInput = {
    create?: XOR<UserCreateWithoutSellInput, UserUncheckedCreateWithoutSellInput>
    connectOrCreate?: UserCreateOrConnectWithoutSellInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSellNestedInput = {
    create?: XOR<UserCreateWithoutSellInput, UserUncheckedCreateWithoutSellInput>
    connectOrCreate?: UserCreateOrConnectWithoutSellInput
    upsert?: UserUpsertWithoutSellInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSellInput, UserUncheckedUpdateWithoutSellInput>
  }

  export type UserCreateNestedOneWithoutValuateInput = {
    create?: XOR<UserCreateWithoutValuateInput, UserUncheckedCreateWithoutValuateInput>
    connectOrCreate?: UserCreateOrConnectWithoutValuateInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutValuateNestedInput = {
    create?: XOR<UserCreateWithoutValuateInput, UserUncheckedCreateWithoutValuateInput>
    connectOrCreate?: UserCreateOrConnectWithoutValuateInput
    upsert?: UserUpsertWithoutValuateInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutValuateInput, UserUncheckedUpdateWithoutValuateInput>
  }

  export type UserCreateNestedOneWithoutSavedSearchInput = {
    create?: XOR<UserCreateWithoutSavedSearchInput, UserUncheckedCreateWithoutSavedSearchInput>
    connectOrCreate?: UserCreateOrConnectWithoutSavedSearchInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSavedSearchNestedInput = {
    create?: XOR<UserCreateWithoutSavedSearchInput, UserUncheckedCreateWithoutSavedSearchInput>
    connectOrCreate?: UserCreateOrConnectWithoutSavedSearchInput
    upsert?: UserUpsertWithoutSavedSearchInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSavedSearchInput, UserUncheckedUpdateWithoutSavedSearchInput>
  }

  export type UserCreateNestedOneWithoutHiddenAnnouncementInput = {
    create?: XOR<UserCreateWithoutHiddenAnnouncementInput, UserUncheckedCreateWithoutHiddenAnnouncementInput>
    connectOrCreate?: UserCreateOrConnectWithoutHiddenAnnouncementInput
    connect?: UserWhereUniqueInput
  }

  export type BuyCreateNestedOneWithoutHiddenAnnouncementInput = {
    create?: XOR<BuyCreateWithoutHiddenAnnouncementInput, BuyUncheckedCreateWithoutHiddenAnnouncementInput>
    connectOrCreate?: BuyCreateOrConnectWithoutHiddenAnnouncementInput
    connect?: BuyWhereUniqueInput
  }

  export type RentCreateNestedOneWithoutHiddenAnnouncementInput = {
    create?: XOR<RentCreateWithoutHiddenAnnouncementInput, RentUncheckedCreateWithoutHiddenAnnouncementInput>
    connectOrCreate?: RentCreateOrConnectWithoutHiddenAnnouncementInput
    connect?: RentWhereUniqueInput
  }

  export type AuctionCreateNestedOneWithoutHiddenAnnouncementInput = {
    create?: XOR<AuctionCreateWithoutHiddenAnnouncementInput, AuctionUncheckedCreateWithoutHiddenAnnouncementInput>
    connectOrCreate?: AuctionCreateOrConnectWithoutHiddenAnnouncementInput
    connect?: AuctionWhereUniqueInput
  }

  export type BuyUncheckedCreateNestedOneWithoutHiddenAnnouncementInput = {
    create?: XOR<BuyCreateWithoutHiddenAnnouncementInput, BuyUncheckedCreateWithoutHiddenAnnouncementInput>
    connectOrCreate?: BuyCreateOrConnectWithoutHiddenAnnouncementInput
    connect?: BuyWhereUniqueInput
  }

  export type RentUncheckedCreateNestedOneWithoutHiddenAnnouncementInput = {
    create?: XOR<RentCreateWithoutHiddenAnnouncementInput, RentUncheckedCreateWithoutHiddenAnnouncementInput>
    connectOrCreate?: RentCreateOrConnectWithoutHiddenAnnouncementInput
    connect?: RentWhereUniqueInput
  }

  export type AuctionUncheckedCreateNestedOneWithoutHiddenAnnouncementInput = {
    create?: XOR<AuctionCreateWithoutHiddenAnnouncementInput, AuctionUncheckedCreateWithoutHiddenAnnouncementInput>
    connectOrCreate?: AuctionCreateOrConnectWithoutHiddenAnnouncementInput
    connect?: AuctionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutHiddenAnnouncementNestedInput = {
    create?: XOR<UserCreateWithoutHiddenAnnouncementInput, UserUncheckedCreateWithoutHiddenAnnouncementInput>
    connectOrCreate?: UserCreateOrConnectWithoutHiddenAnnouncementInput
    upsert?: UserUpsertWithoutHiddenAnnouncementInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutHiddenAnnouncementInput, UserUncheckedUpdateWithoutHiddenAnnouncementInput>
  }

  export type BuyUpdateOneWithoutHiddenAnnouncementNestedInput = {
    create?: XOR<BuyCreateWithoutHiddenAnnouncementInput, BuyUncheckedCreateWithoutHiddenAnnouncementInput>
    connectOrCreate?: BuyCreateOrConnectWithoutHiddenAnnouncementInput
    upsert?: BuyUpsertWithoutHiddenAnnouncementInput
    disconnect?: boolean
    delete?: boolean
    connect?: BuyWhereUniqueInput
    update?: XOR<BuyUpdateWithoutHiddenAnnouncementInput, BuyUncheckedUpdateWithoutHiddenAnnouncementInput>
  }

  export type RentUpdateOneWithoutHiddenAnnouncementNestedInput = {
    create?: XOR<RentCreateWithoutHiddenAnnouncementInput, RentUncheckedCreateWithoutHiddenAnnouncementInput>
    connectOrCreate?: RentCreateOrConnectWithoutHiddenAnnouncementInput
    upsert?: RentUpsertWithoutHiddenAnnouncementInput
    disconnect?: boolean
    delete?: boolean
    connect?: RentWhereUniqueInput
    update?: XOR<RentUpdateWithoutHiddenAnnouncementInput, RentUncheckedUpdateWithoutHiddenAnnouncementInput>
  }

  export type AuctionUpdateOneWithoutHiddenAnnouncementNestedInput = {
    create?: XOR<AuctionCreateWithoutHiddenAnnouncementInput, AuctionUncheckedCreateWithoutHiddenAnnouncementInput>
    connectOrCreate?: AuctionCreateOrConnectWithoutHiddenAnnouncementInput
    upsert?: AuctionUpsertWithoutHiddenAnnouncementInput
    disconnect?: boolean
    delete?: boolean
    connect?: AuctionWhereUniqueInput
    update?: XOR<AuctionUpdateWithoutHiddenAnnouncementInput, AuctionUncheckedUpdateWithoutHiddenAnnouncementInput>
  }

  export type BuyUncheckedUpdateOneWithoutHiddenAnnouncementNestedInput = {
    create?: XOR<BuyCreateWithoutHiddenAnnouncementInput, BuyUncheckedCreateWithoutHiddenAnnouncementInput>
    connectOrCreate?: BuyCreateOrConnectWithoutHiddenAnnouncementInput
    upsert?: BuyUpsertWithoutHiddenAnnouncementInput
    disconnect?: boolean
    delete?: boolean
    connect?: BuyWhereUniqueInput
    update?: XOR<BuyUpdateWithoutHiddenAnnouncementInput, BuyUncheckedUpdateWithoutHiddenAnnouncementInput>
  }

  export type RentUncheckedUpdateOneWithoutHiddenAnnouncementNestedInput = {
    create?: XOR<RentCreateWithoutHiddenAnnouncementInput, RentUncheckedCreateWithoutHiddenAnnouncementInput>
    connectOrCreate?: RentCreateOrConnectWithoutHiddenAnnouncementInput
    upsert?: RentUpsertWithoutHiddenAnnouncementInput
    disconnect?: boolean
    delete?: boolean
    connect?: RentWhereUniqueInput
    update?: XOR<RentUpdateWithoutHiddenAnnouncementInput, RentUncheckedUpdateWithoutHiddenAnnouncementInput>
  }

  export type AuctionUncheckedUpdateOneWithoutHiddenAnnouncementNestedInput = {
    create?: XOR<AuctionCreateWithoutHiddenAnnouncementInput, AuctionUncheckedCreateWithoutHiddenAnnouncementInput>
    connectOrCreate?: AuctionCreateOrConnectWithoutHiddenAnnouncementInput
    upsert?: AuctionUpsertWithoutHiddenAnnouncementInput
    disconnect?: boolean
    delete?: boolean
    connect?: AuctionWhereUniqueInput
    update?: XOR<AuctionUpdateWithoutHiddenAnnouncementInput, AuctionUncheckedUpdateWithoutHiddenAnnouncementInput>
  }

  export type MessagesCreateNestedManyWithoutBuyInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutBuyInput>, Enumerable<MessagesUncheckedCreateWithoutBuyInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutBuyInput>
    createMany?: MessagesCreateManyBuyInputEnvelope
    connect?: Enumerable<MessagesWhereUniqueInput>
  }

  export type SavedAnnouncementsCreateNestedOneWithoutBuyInput = {
    create?: XOR<SavedAnnouncementsCreateWithoutBuyInput, SavedAnnouncementsUncheckedCreateWithoutBuyInput>
    connectOrCreate?: SavedAnnouncementsCreateOrConnectWithoutBuyInput
    connect?: SavedAnnouncementsWhereUniqueInput
  }

  export type HiddenAnnouncementsCreateNestedOneWithoutBuyInput = {
    create?: XOR<HiddenAnnouncementsCreateWithoutBuyInput, HiddenAnnouncementsUncheckedCreateWithoutBuyInput>
    connectOrCreate?: HiddenAnnouncementsCreateOrConnectWithoutBuyInput
    connect?: HiddenAnnouncementsWhereUniqueInput
  }

  export type MessagesUncheckedCreateNestedManyWithoutBuyInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutBuyInput>, Enumerable<MessagesUncheckedCreateWithoutBuyInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutBuyInput>
    createMany?: MessagesCreateManyBuyInputEnvelope
    connect?: Enumerable<MessagesWhereUniqueInput>
  }

  export type MessagesUpdateManyWithoutBuyNestedInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutBuyInput>, Enumerable<MessagesUncheckedCreateWithoutBuyInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutBuyInput>
    upsert?: Enumerable<MessagesUpsertWithWhereUniqueWithoutBuyInput>
    createMany?: MessagesCreateManyBuyInputEnvelope
    set?: Enumerable<MessagesWhereUniqueInput>
    disconnect?: Enumerable<MessagesWhereUniqueInput>
    delete?: Enumerable<MessagesWhereUniqueInput>
    connect?: Enumerable<MessagesWhereUniqueInput>
    update?: Enumerable<MessagesUpdateWithWhereUniqueWithoutBuyInput>
    updateMany?: Enumerable<MessagesUpdateManyWithWhereWithoutBuyInput>
    deleteMany?: Enumerable<MessagesScalarWhereInput>
  }

  export type SavedAnnouncementsUpdateOneWithoutBuyNestedInput = {
    create?: XOR<SavedAnnouncementsCreateWithoutBuyInput, SavedAnnouncementsUncheckedCreateWithoutBuyInput>
    connectOrCreate?: SavedAnnouncementsCreateOrConnectWithoutBuyInput
    upsert?: SavedAnnouncementsUpsertWithoutBuyInput
    disconnect?: boolean
    delete?: boolean
    connect?: SavedAnnouncementsWhereUniqueInput
    update?: XOR<SavedAnnouncementsUpdateWithoutBuyInput, SavedAnnouncementsUncheckedUpdateWithoutBuyInput>
  }

  export type HiddenAnnouncementsUpdateOneWithoutBuyNestedInput = {
    create?: XOR<HiddenAnnouncementsCreateWithoutBuyInput, HiddenAnnouncementsUncheckedCreateWithoutBuyInput>
    connectOrCreate?: HiddenAnnouncementsCreateOrConnectWithoutBuyInput
    upsert?: HiddenAnnouncementsUpsertWithoutBuyInput
    disconnect?: boolean
    delete?: boolean
    connect?: HiddenAnnouncementsWhereUniqueInput
    update?: XOR<HiddenAnnouncementsUpdateWithoutBuyInput, HiddenAnnouncementsUncheckedUpdateWithoutBuyInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MessagesUncheckedUpdateManyWithoutBuyNestedInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutBuyInput>, Enumerable<MessagesUncheckedCreateWithoutBuyInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutBuyInput>
    upsert?: Enumerable<MessagesUpsertWithWhereUniqueWithoutBuyInput>
    createMany?: MessagesCreateManyBuyInputEnvelope
    set?: Enumerable<MessagesWhereUniqueInput>
    disconnect?: Enumerable<MessagesWhereUniqueInput>
    delete?: Enumerable<MessagesWhereUniqueInput>
    connect?: Enumerable<MessagesWhereUniqueInput>
    update?: Enumerable<MessagesUpdateWithWhereUniqueWithoutBuyInput>
    updateMany?: Enumerable<MessagesUpdateManyWithWhereWithoutBuyInput>
    deleteMany?: Enumerable<MessagesScalarWhereInput>
  }

  export type MessagesCreateNestedManyWithoutRentInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutRentInput>, Enumerable<MessagesUncheckedCreateWithoutRentInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutRentInput>
    createMany?: MessagesCreateManyRentInputEnvelope
    connect?: Enumerable<MessagesWhereUniqueInput>
  }

  export type SavedAnnouncementsCreateNestedOneWithoutRentInput = {
    create?: XOR<SavedAnnouncementsCreateWithoutRentInput, SavedAnnouncementsUncheckedCreateWithoutRentInput>
    connectOrCreate?: SavedAnnouncementsCreateOrConnectWithoutRentInput
    connect?: SavedAnnouncementsWhereUniqueInput
  }

  export type HiddenAnnouncementsCreateNestedOneWithoutRentInput = {
    create?: XOR<HiddenAnnouncementsCreateWithoutRentInput, HiddenAnnouncementsUncheckedCreateWithoutRentInput>
    connectOrCreate?: HiddenAnnouncementsCreateOrConnectWithoutRentInput
    connect?: HiddenAnnouncementsWhereUniqueInput
  }

  export type MessagesUncheckedCreateNestedManyWithoutRentInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutRentInput>, Enumerable<MessagesUncheckedCreateWithoutRentInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutRentInput>
    createMany?: MessagesCreateManyRentInputEnvelope
    connect?: Enumerable<MessagesWhereUniqueInput>
  }

  export type MessagesUpdateManyWithoutRentNestedInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutRentInput>, Enumerable<MessagesUncheckedCreateWithoutRentInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutRentInput>
    upsert?: Enumerable<MessagesUpsertWithWhereUniqueWithoutRentInput>
    createMany?: MessagesCreateManyRentInputEnvelope
    set?: Enumerable<MessagesWhereUniqueInput>
    disconnect?: Enumerable<MessagesWhereUniqueInput>
    delete?: Enumerable<MessagesWhereUniqueInput>
    connect?: Enumerable<MessagesWhereUniqueInput>
    update?: Enumerable<MessagesUpdateWithWhereUniqueWithoutRentInput>
    updateMany?: Enumerable<MessagesUpdateManyWithWhereWithoutRentInput>
    deleteMany?: Enumerable<MessagesScalarWhereInput>
  }

  export type SavedAnnouncementsUpdateOneWithoutRentNestedInput = {
    create?: XOR<SavedAnnouncementsCreateWithoutRentInput, SavedAnnouncementsUncheckedCreateWithoutRentInput>
    connectOrCreate?: SavedAnnouncementsCreateOrConnectWithoutRentInput
    upsert?: SavedAnnouncementsUpsertWithoutRentInput
    disconnect?: boolean
    delete?: boolean
    connect?: SavedAnnouncementsWhereUniqueInput
    update?: XOR<SavedAnnouncementsUpdateWithoutRentInput, SavedAnnouncementsUncheckedUpdateWithoutRentInput>
  }

  export type HiddenAnnouncementsUpdateOneWithoutRentNestedInput = {
    create?: XOR<HiddenAnnouncementsCreateWithoutRentInput, HiddenAnnouncementsUncheckedCreateWithoutRentInput>
    connectOrCreate?: HiddenAnnouncementsCreateOrConnectWithoutRentInput
    upsert?: HiddenAnnouncementsUpsertWithoutRentInput
    disconnect?: boolean
    delete?: boolean
    connect?: HiddenAnnouncementsWhereUniqueInput
    update?: XOR<HiddenAnnouncementsUpdateWithoutRentInput, HiddenAnnouncementsUncheckedUpdateWithoutRentInput>
  }

  export type MessagesUncheckedUpdateManyWithoutRentNestedInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutRentInput>, Enumerable<MessagesUncheckedCreateWithoutRentInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutRentInput>
    upsert?: Enumerable<MessagesUpsertWithWhereUniqueWithoutRentInput>
    createMany?: MessagesCreateManyRentInputEnvelope
    set?: Enumerable<MessagesWhereUniqueInput>
    disconnect?: Enumerable<MessagesWhereUniqueInput>
    delete?: Enumerable<MessagesWhereUniqueInput>
    connect?: Enumerable<MessagesWhereUniqueInput>
    update?: Enumerable<MessagesUpdateWithWhereUniqueWithoutRentInput>
    updateMany?: Enumerable<MessagesUpdateManyWithWhereWithoutRentInput>
    deleteMany?: Enumerable<MessagesScalarWhereInput>
  }

  export type MessagesCreateNestedManyWithoutAuctionInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutAuctionInput>, Enumerable<MessagesUncheckedCreateWithoutAuctionInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutAuctionInput>
    createMany?: MessagesCreateManyAuctionInputEnvelope
    connect?: Enumerable<MessagesWhereUniqueInput>
  }

  export type SavedAnnouncementsCreateNestedOneWithoutAuctionInput = {
    create?: XOR<SavedAnnouncementsCreateWithoutAuctionInput, SavedAnnouncementsUncheckedCreateWithoutAuctionInput>
    connectOrCreate?: SavedAnnouncementsCreateOrConnectWithoutAuctionInput
    connect?: SavedAnnouncementsWhereUniqueInput
  }

  export type HiddenAnnouncementsCreateNestedOneWithoutAuctionInput = {
    create?: XOR<HiddenAnnouncementsCreateWithoutAuctionInput, HiddenAnnouncementsUncheckedCreateWithoutAuctionInput>
    connectOrCreate?: HiddenAnnouncementsCreateOrConnectWithoutAuctionInput
    connect?: HiddenAnnouncementsWhereUniqueInput
  }

  export type MessagesUncheckedCreateNestedManyWithoutAuctionInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutAuctionInput>, Enumerable<MessagesUncheckedCreateWithoutAuctionInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutAuctionInput>
    createMany?: MessagesCreateManyAuctionInputEnvelope
    connect?: Enumerable<MessagesWhereUniqueInput>
  }

  export type MessagesUpdateManyWithoutAuctionNestedInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutAuctionInput>, Enumerable<MessagesUncheckedCreateWithoutAuctionInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutAuctionInput>
    upsert?: Enumerable<MessagesUpsertWithWhereUniqueWithoutAuctionInput>
    createMany?: MessagesCreateManyAuctionInputEnvelope
    set?: Enumerable<MessagesWhereUniqueInput>
    disconnect?: Enumerable<MessagesWhereUniqueInput>
    delete?: Enumerable<MessagesWhereUniqueInput>
    connect?: Enumerable<MessagesWhereUniqueInput>
    update?: Enumerable<MessagesUpdateWithWhereUniqueWithoutAuctionInput>
    updateMany?: Enumerable<MessagesUpdateManyWithWhereWithoutAuctionInput>
    deleteMany?: Enumerable<MessagesScalarWhereInput>
  }

  export type SavedAnnouncementsUpdateOneWithoutAuctionNestedInput = {
    create?: XOR<SavedAnnouncementsCreateWithoutAuctionInput, SavedAnnouncementsUncheckedCreateWithoutAuctionInput>
    connectOrCreate?: SavedAnnouncementsCreateOrConnectWithoutAuctionInput
    upsert?: SavedAnnouncementsUpsertWithoutAuctionInput
    disconnect?: boolean
    delete?: boolean
    connect?: SavedAnnouncementsWhereUniqueInput
    update?: XOR<SavedAnnouncementsUpdateWithoutAuctionInput, SavedAnnouncementsUncheckedUpdateWithoutAuctionInput>
  }

  export type HiddenAnnouncementsUpdateOneWithoutAuctionNestedInput = {
    create?: XOR<HiddenAnnouncementsCreateWithoutAuctionInput, HiddenAnnouncementsUncheckedCreateWithoutAuctionInput>
    connectOrCreate?: HiddenAnnouncementsCreateOrConnectWithoutAuctionInput
    upsert?: HiddenAnnouncementsUpsertWithoutAuctionInput
    disconnect?: boolean
    delete?: boolean
    connect?: HiddenAnnouncementsWhereUniqueInput
    update?: XOR<HiddenAnnouncementsUpdateWithoutAuctionInput, HiddenAnnouncementsUncheckedUpdateWithoutAuctionInput>
  }

  export type MessagesUncheckedUpdateManyWithoutAuctionNestedInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutAuctionInput>, Enumerable<MessagesUncheckedCreateWithoutAuctionInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutAuctionInput>
    upsert?: Enumerable<MessagesUpsertWithWhereUniqueWithoutAuctionInput>
    createMany?: MessagesCreateManyAuctionInputEnvelope
    set?: Enumerable<MessagesWhereUniqueInput>
    disconnect?: Enumerable<MessagesWhereUniqueInput>
    delete?: Enumerable<MessagesWhereUniqueInput>
    connect?: Enumerable<MessagesWhereUniqueInput>
    update?: Enumerable<MessagesUpdateWithWhereUniqueWithoutAuctionInput>
    updateMany?: Enumerable<MessagesUpdateManyWithWhereWithoutAuctionInput>
    deleteMany?: Enumerable<MessagesScalarWhereInput>
  }

  export type MessagesCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutAgencyInput>, Enumerable<MessagesUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutAgencyInput>
    createMany?: MessagesCreateManyAgencyInputEnvelope
    connect?: Enumerable<MessagesWhereUniqueInput>
  }

  export type MessagesUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutAgencyInput>, Enumerable<MessagesUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutAgencyInput>
    createMany?: MessagesCreateManyAgencyInputEnvelope
    connect?: Enumerable<MessagesWhereUniqueInput>
  }

  export type MessagesUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutAgencyInput>, Enumerable<MessagesUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<MessagesUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: MessagesCreateManyAgencyInputEnvelope
    set?: Enumerable<MessagesWhereUniqueInput>
    disconnect?: Enumerable<MessagesWhereUniqueInput>
    delete?: Enumerable<MessagesWhereUniqueInput>
    connect?: Enumerable<MessagesWhereUniqueInput>
    update?: Enumerable<MessagesUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<MessagesUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<MessagesScalarWhereInput>
  }

  export type MessagesUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<MessagesCreateWithoutAgencyInput>, Enumerable<MessagesUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<MessagesCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<MessagesUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: MessagesCreateManyAgencyInputEnvelope
    set?: Enumerable<MessagesWhereUniqueInput>
    disconnect?: Enumerable<MessagesWhereUniqueInput>
    delete?: Enumerable<MessagesWhereUniqueInput>
    connect?: Enumerable<MessagesWhereUniqueInput>
    update?: Enumerable<MessagesUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<MessagesUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<MessagesScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type MessagesCreateWithoutUserInput = {
    message: string
    name: string
    email: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    buy: BuyCreateNestedOneWithoutMessagesInput
    rent: RentCreateNestedOneWithoutMessagesInput
    auction: AuctionCreateNestedOneWithoutMessagesInput
    agency: AgencyCreateNestedOneWithoutMessagesInput
  }

  export type MessagesUncheckedCreateWithoutUserInput = {
    id?: number
    message: string
    name: string
    email: string
    phone: string
    buyId: number
    rentId: number
    auctionId: number
    agencyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessagesCreateOrConnectWithoutUserInput = {
    where: MessagesWhereUniqueInput
    create: XOR<MessagesCreateWithoutUserInput, MessagesUncheckedCreateWithoutUserInput>
  }

  export type MessagesCreateManyUserInputEnvelope = {
    data: Enumerable<MessagesCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SavedAnnouncementsCreateWithoutUserInput = {
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    buy?: BuyCreateNestedOneWithoutSavedAnnouncementInput
    rent?: RentCreateNestedOneWithoutSavedAnnouncementInput
    auction?: AuctionCreateNestedOneWithoutSavedAnnouncementInput
  }

  export type SavedAnnouncementsUncheckedCreateWithoutUserInput = {
    id?: number
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    buy?: BuyUncheckedCreateNestedOneWithoutSavedAnnouncementInput
    rent?: RentUncheckedCreateNestedOneWithoutSavedAnnouncementInput
    auction?: AuctionUncheckedCreateNestedOneWithoutSavedAnnouncementInput
  }

  export type SavedAnnouncementsCreateOrConnectWithoutUserInput = {
    where: SavedAnnouncementsWhereUniqueInput
    create: XOR<SavedAnnouncementsCreateWithoutUserInput, SavedAnnouncementsUncheckedCreateWithoutUserInput>
  }

  export type SavedAnnouncementsCreateManyUserInputEnvelope = {
    data: Enumerable<SavedAnnouncementsCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SellCreateWithoutUserInput = {
    image: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SellUncheckedCreateWithoutUserInput = {
    id?: number
    image: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SellCreateOrConnectWithoutUserInput = {
    where: SellWhereUniqueInput
    create: XOR<SellCreateWithoutUserInput, SellUncheckedCreateWithoutUserInput>
  }

  export type SellCreateManyUserInputEnvelope = {
    data: Enumerable<SellCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ValuateCreateWithoutUserInput = {
    image: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValuateUncheckedCreateWithoutUserInput = {
    id?: number
    image: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValuateCreateOrConnectWithoutUserInput = {
    where: ValuateWhereUniqueInput
    create: XOR<ValuateCreateWithoutUserInput, ValuateUncheckedCreateWithoutUserInput>
  }

  export type ValuateCreateManyUserInputEnvelope = {
    data: Enumerable<ValuateCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SavedSearchesCreateWithoutUserInput = {
    searchBar: string
    aquireType: string
    houseType: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SavedSearchesUncheckedCreateWithoutUserInput = {
    id?: number
    searchBar: string
    aquireType: string
    houseType: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SavedSearchesCreateOrConnectWithoutUserInput = {
    where: SavedSearchesWhereUniqueInput
    create: XOR<SavedSearchesCreateWithoutUserInput, SavedSearchesUncheckedCreateWithoutUserInput>
  }

  export type SavedSearchesCreateManyUserInputEnvelope = {
    data: Enumerable<SavedSearchesCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type HiddenAnnouncementsCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    buy?: BuyCreateNestedOneWithoutHiddenAnnouncementInput
    rent?: RentCreateNestedOneWithoutHiddenAnnouncementInput
    auction?: AuctionCreateNestedOneWithoutHiddenAnnouncementInput
  }

  export type HiddenAnnouncementsUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    buy?: BuyUncheckedCreateNestedOneWithoutHiddenAnnouncementInput
    rent?: RentUncheckedCreateNestedOneWithoutHiddenAnnouncementInput
    auction?: AuctionUncheckedCreateNestedOneWithoutHiddenAnnouncementInput
  }

  export type HiddenAnnouncementsCreateOrConnectWithoutUserInput = {
    where: HiddenAnnouncementsWhereUniqueInput
    create: XOR<HiddenAnnouncementsCreateWithoutUserInput, HiddenAnnouncementsUncheckedCreateWithoutUserInput>
  }

  export type HiddenAnnouncementsCreateManyUserInputEnvelope = {
    data: Enumerable<HiddenAnnouncementsCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type MessagesUpsertWithWhereUniqueWithoutUserInput = {
    where: MessagesWhereUniqueInput
    update: XOR<MessagesUpdateWithoutUserInput, MessagesUncheckedUpdateWithoutUserInput>
    create: XOR<MessagesCreateWithoutUserInput, MessagesUncheckedCreateWithoutUserInput>
  }

  export type MessagesUpdateWithWhereUniqueWithoutUserInput = {
    where: MessagesWhereUniqueInput
    data: XOR<MessagesUpdateWithoutUserInput, MessagesUncheckedUpdateWithoutUserInput>
  }

  export type MessagesUpdateManyWithWhereWithoutUserInput = {
    where: MessagesScalarWhereInput
    data: XOR<MessagesUpdateManyMutationInput, MessagesUncheckedUpdateManyWithoutMessagesInput>
  }

  export type MessagesScalarWhereInput = {
    AND?: Enumerable<MessagesScalarWhereInput>
    OR?: Enumerable<MessagesScalarWhereInput>
    NOT?: Enumerable<MessagesScalarWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    name?: StringFilter | string
    email?: StringFilter | string
    phone?: StringFilter | string
    userId?: IntFilter | number
    buyId?: IntFilter | number
    rentId?: IntFilter | number
    auctionId?: IntFilter | number
    agencyId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SavedAnnouncementsUpsertWithWhereUniqueWithoutUserInput = {
    where: SavedAnnouncementsWhereUniqueInput
    update: XOR<SavedAnnouncementsUpdateWithoutUserInput, SavedAnnouncementsUncheckedUpdateWithoutUserInput>
    create: XOR<SavedAnnouncementsCreateWithoutUserInput, SavedAnnouncementsUncheckedCreateWithoutUserInput>
  }

  export type SavedAnnouncementsUpdateWithWhereUniqueWithoutUserInput = {
    where: SavedAnnouncementsWhereUniqueInput
    data: XOR<SavedAnnouncementsUpdateWithoutUserInput, SavedAnnouncementsUncheckedUpdateWithoutUserInput>
  }

  export type SavedAnnouncementsUpdateManyWithWhereWithoutUserInput = {
    where: SavedAnnouncementsScalarWhereInput
    data: XOR<SavedAnnouncementsUpdateManyMutationInput, SavedAnnouncementsUncheckedUpdateManyWithoutSavedAnnouncementInput>
  }

  export type SavedAnnouncementsScalarWhereInput = {
    AND?: Enumerable<SavedAnnouncementsScalarWhereInput>
    OR?: Enumerable<SavedAnnouncementsScalarWhereInput>
    NOT?: Enumerable<SavedAnnouncementsScalarWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SellUpsertWithWhereUniqueWithoutUserInput = {
    where: SellWhereUniqueInput
    update: XOR<SellUpdateWithoutUserInput, SellUncheckedUpdateWithoutUserInput>
    create: XOR<SellCreateWithoutUserInput, SellUncheckedCreateWithoutUserInput>
  }

  export type SellUpdateWithWhereUniqueWithoutUserInput = {
    where: SellWhereUniqueInput
    data: XOR<SellUpdateWithoutUserInput, SellUncheckedUpdateWithoutUserInput>
  }

  export type SellUpdateManyWithWhereWithoutUserInput = {
    where: SellScalarWhereInput
    data: XOR<SellUpdateManyMutationInput, SellUncheckedUpdateManyWithoutSellInput>
  }

  export type SellScalarWhereInput = {
    AND?: Enumerable<SellScalarWhereInput>
    OR?: Enumerable<SellScalarWhereInput>
    NOT?: Enumerable<SellScalarWhereInput>
    id?: IntFilter | number
    image?: StringFilter | string
    address?: StringFilter | string
    bedrooms?: IntFilter | number
    sqFootage?: IntFilter | number
    bathrooms?: IntFilter | number
    floors?: IntFilter | number
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ValuateUpsertWithWhereUniqueWithoutUserInput = {
    where: ValuateWhereUniqueInput
    update: XOR<ValuateUpdateWithoutUserInput, ValuateUncheckedUpdateWithoutUserInput>
    create: XOR<ValuateCreateWithoutUserInput, ValuateUncheckedCreateWithoutUserInput>
  }

  export type ValuateUpdateWithWhereUniqueWithoutUserInput = {
    where: ValuateWhereUniqueInput
    data: XOR<ValuateUpdateWithoutUserInput, ValuateUncheckedUpdateWithoutUserInput>
  }

  export type ValuateUpdateManyWithWhereWithoutUserInput = {
    where: ValuateScalarWhereInput
    data: XOR<ValuateUpdateManyMutationInput, ValuateUncheckedUpdateManyWithoutValuateInput>
  }

  export type ValuateScalarWhereInput = {
    AND?: Enumerable<ValuateScalarWhereInput>
    OR?: Enumerable<ValuateScalarWhereInput>
    NOT?: Enumerable<ValuateScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    image?: StringFilter | string
    address?: StringFilter | string
    bedrooms?: IntFilter | number
    sqFootage?: IntFilter | number
    bathrooms?: IntFilter | number
    floors?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SavedSearchesUpsertWithWhereUniqueWithoutUserInput = {
    where: SavedSearchesWhereUniqueInput
    update: XOR<SavedSearchesUpdateWithoutUserInput, SavedSearchesUncheckedUpdateWithoutUserInput>
    create: XOR<SavedSearchesCreateWithoutUserInput, SavedSearchesUncheckedCreateWithoutUserInput>
  }

  export type SavedSearchesUpdateWithWhereUniqueWithoutUserInput = {
    where: SavedSearchesWhereUniqueInput
    data: XOR<SavedSearchesUpdateWithoutUserInput, SavedSearchesUncheckedUpdateWithoutUserInput>
  }

  export type SavedSearchesUpdateManyWithWhereWithoutUserInput = {
    where: SavedSearchesScalarWhereInput
    data: XOR<SavedSearchesUpdateManyMutationInput, SavedSearchesUncheckedUpdateManyWithoutSavedSearchInput>
  }

  export type SavedSearchesScalarWhereInput = {
    AND?: Enumerable<SavedSearchesScalarWhereInput>
    OR?: Enumerable<SavedSearchesScalarWhereInput>
    NOT?: Enumerable<SavedSearchesScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    searchBar?: StringFilter | string
    aquireType?: StringFilter | string
    houseType?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type HiddenAnnouncementsUpsertWithWhereUniqueWithoutUserInput = {
    where: HiddenAnnouncementsWhereUniqueInput
    update: XOR<HiddenAnnouncementsUpdateWithoutUserInput, HiddenAnnouncementsUncheckedUpdateWithoutUserInput>
    create: XOR<HiddenAnnouncementsCreateWithoutUserInput, HiddenAnnouncementsUncheckedCreateWithoutUserInput>
  }

  export type HiddenAnnouncementsUpdateWithWhereUniqueWithoutUserInput = {
    where: HiddenAnnouncementsWhereUniqueInput
    data: XOR<HiddenAnnouncementsUpdateWithoutUserInput, HiddenAnnouncementsUncheckedUpdateWithoutUserInput>
  }

  export type HiddenAnnouncementsUpdateManyWithWhereWithoutUserInput = {
    where: HiddenAnnouncementsScalarWhereInput
    data: XOR<HiddenAnnouncementsUpdateManyMutationInput, HiddenAnnouncementsUncheckedUpdateManyWithoutHiddenAnnouncementInput>
  }

  export type HiddenAnnouncementsScalarWhereInput = {
    AND?: Enumerable<HiddenAnnouncementsScalarWhereInput>
    OR?: Enumerable<HiddenAnnouncementsScalarWhereInput>
    NOT?: Enumerable<HiddenAnnouncementsScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutMessagesInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    savedAnnouncement?: SavedAnnouncementsCreateNestedManyWithoutUserInput
    sell?: SellCreateNestedManyWithoutUserInput
    valuate?: ValuateCreateNestedManyWithoutUserInput
    savedSearch?: SavedSearchesCreateNestedManyWithoutUserInput
    hiddenAnnouncement?: HiddenAnnouncementsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    savedAnnouncement?: SavedAnnouncementsUncheckedCreateNestedManyWithoutUserInput
    sell?: SellUncheckedCreateNestedManyWithoutUserInput
    valuate?: ValuateUncheckedCreateNestedManyWithoutUserInput
    savedSearch?: SavedSearchesUncheckedCreateNestedManyWithoutUserInput
    hiddenAnnouncement?: HiddenAnnouncementsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type BuyCreateWithoutMessagesInput = {
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    savedAnnouncement?: SavedAnnouncementsCreateNestedOneWithoutBuyInput
    hiddenAnnouncement?: HiddenAnnouncementsCreateNestedOneWithoutBuyInput
  }

  export type BuyUncheckedCreateWithoutMessagesInput = {
    id?: number
    savedAnnouncementId?: number | null
    hiddenAnnouncementId?: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BuyCreateOrConnectWithoutMessagesInput = {
    where: BuyWhereUniqueInput
    create: XOR<BuyCreateWithoutMessagesInput, BuyUncheckedCreateWithoutMessagesInput>
  }

  export type RentCreateWithoutMessagesInput = {
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    savedAnnouncement?: SavedAnnouncementsCreateNestedOneWithoutRentInput
    hiddenAnnouncement?: HiddenAnnouncementsCreateNestedOneWithoutRentInput
  }

  export type RentUncheckedCreateWithoutMessagesInput = {
    id?: number
    savedAnnouncementId?: number | null
    hiddenAnnouncementId?: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RentCreateOrConnectWithoutMessagesInput = {
    where: RentWhereUniqueInput
    create: XOR<RentCreateWithoutMessagesInput, RentUncheckedCreateWithoutMessagesInput>
  }

  export type AuctionCreateWithoutMessagesInput = {
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    savedAnnouncement?: SavedAnnouncementsCreateNestedOneWithoutAuctionInput
    hiddenAnnouncement?: HiddenAnnouncementsCreateNestedOneWithoutAuctionInput
  }

  export type AuctionUncheckedCreateWithoutMessagesInput = {
    id?: number
    savedAnnouncementId?: number | null
    hiddenAnnouncementId?: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuctionCreateOrConnectWithoutMessagesInput = {
    where: AuctionWhereUniqueInput
    create: XOR<AuctionCreateWithoutMessagesInput, AuctionUncheckedCreateWithoutMessagesInput>
  }

  export type AgencyCreateWithoutMessagesInput = {
    image: string
    name: string
    address: string
    history: number
    phone: string
    announcements: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgencyUncheckedCreateWithoutMessagesInput = {
    id?: number
    image: string
    name: string
    address: string
    history: number
    phone: string
    announcements: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgencyCreateOrConnectWithoutMessagesInput = {
    where: AgencyWhereUniqueInput
    create: XOR<AgencyCreateWithoutMessagesInput, AgencyUncheckedCreateWithoutMessagesInput>
  }

  export type UserUpsertWithoutMessagesInput = {
    update: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type UserUpdateWithoutMessagesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    savedAnnouncement?: SavedAnnouncementsUpdateManyWithoutUserNestedInput
    sell?: SellUpdateManyWithoutUserNestedInput
    valuate?: ValuateUpdateManyWithoutUserNestedInput
    savedSearch?: SavedSearchesUpdateManyWithoutUserNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    savedAnnouncement?: SavedAnnouncementsUncheckedUpdateManyWithoutUserNestedInput
    sell?: SellUncheckedUpdateManyWithoutUserNestedInput
    valuate?: ValuateUncheckedUpdateManyWithoutUserNestedInput
    savedSearch?: SavedSearchesUncheckedUpdateManyWithoutUserNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BuyUpsertWithoutMessagesInput = {
    update: XOR<BuyUpdateWithoutMessagesInput, BuyUncheckedUpdateWithoutMessagesInput>
    create: XOR<BuyCreateWithoutMessagesInput, BuyUncheckedCreateWithoutMessagesInput>
  }

  export type BuyUpdateWithoutMessagesInput = {
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    savedAnnouncement?: SavedAnnouncementsUpdateOneWithoutBuyNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUpdateOneWithoutBuyNestedInput
  }

  export type BuyUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    savedAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    hiddenAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RentUpsertWithoutMessagesInput = {
    update: XOR<RentUpdateWithoutMessagesInput, RentUncheckedUpdateWithoutMessagesInput>
    create: XOR<RentCreateWithoutMessagesInput, RentUncheckedCreateWithoutMessagesInput>
  }

  export type RentUpdateWithoutMessagesInput = {
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    savedAnnouncement?: SavedAnnouncementsUpdateOneWithoutRentNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUpdateOneWithoutRentNestedInput
  }

  export type RentUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    savedAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    hiddenAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionUpsertWithoutMessagesInput = {
    update: XOR<AuctionUpdateWithoutMessagesInput, AuctionUncheckedUpdateWithoutMessagesInput>
    create: XOR<AuctionCreateWithoutMessagesInput, AuctionUncheckedCreateWithoutMessagesInput>
  }

  export type AuctionUpdateWithoutMessagesInput = {
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    savedAnnouncement?: SavedAnnouncementsUpdateOneWithoutAuctionNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUpdateOneWithoutAuctionNestedInput
  }

  export type AuctionUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    savedAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    hiddenAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencyUpsertWithoutMessagesInput = {
    update: XOR<AgencyUpdateWithoutMessagesInput, AgencyUncheckedUpdateWithoutMessagesInput>
    create: XOR<AgencyCreateWithoutMessagesInput, AgencyUncheckedCreateWithoutMessagesInput>
  }

  export type AgencyUpdateWithoutMessagesInput = {
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    history?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    announcements?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencyUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    history?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    announcements?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutSavedAnnouncementInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesCreateNestedManyWithoutUserInput
    sell?: SellCreateNestedManyWithoutUserInput
    valuate?: ValuateCreateNestedManyWithoutUserInput
    savedSearch?: SavedSearchesCreateNestedManyWithoutUserInput
    hiddenAnnouncement?: HiddenAnnouncementsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSavedAnnouncementInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesUncheckedCreateNestedManyWithoutUserInput
    sell?: SellUncheckedCreateNestedManyWithoutUserInput
    valuate?: ValuateUncheckedCreateNestedManyWithoutUserInput
    savedSearch?: SavedSearchesUncheckedCreateNestedManyWithoutUserInput
    hiddenAnnouncement?: HiddenAnnouncementsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSavedAnnouncementInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSavedAnnouncementInput, UserUncheckedCreateWithoutSavedAnnouncementInput>
  }

  export type BuyCreateWithoutSavedAnnouncementInput = {
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesCreateNestedManyWithoutBuyInput
    hiddenAnnouncement?: HiddenAnnouncementsCreateNestedOneWithoutBuyInput
  }

  export type BuyUncheckedCreateWithoutSavedAnnouncementInput = {
    id?: number
    hiddenAnnouncementId?: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesUncheckedCreateNestedManyWithoutBuyInput
  }

  export type BuyCreateOrConnectWithoutSavedAnnouncementInput = {
    where: BuyWhereUniqueInput
    create: XOR<BuyCreateWithoutSavedAnnouncementInput, BuyUncheckedCreateWithoutSavedAnnouncementInput>
  }

  export type RentCreateWithoutSavedAnnouncementInput = {
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesCreateNestedManyWithoutRentInput
    hiddenAnnouncement?: HiddenAnnouncementsCreateNestedOneWithoutRentInput
  }

  export type RentUncheckedCreateWithoutSavedAnnouncementInput = {
    id?: number
    hiddenAnnouncementId?: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesUncheckedCreateNestedManyWithoutRentInput
  }

  export type RentCreateOrConnectWithoutSavedAnnouncementInput = {
    where: RentWhereUniqueInput
    create: XOR<RentCreateWithoutSavedAnnouncementInput, RentUncheckedCreateWithoutSavedAnnouncementInput>
  }

  export type AuctionCreateWithoutSavedAnnouncementInput = {
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesCreateNestedManyWithoutAuctionInput
    hiddenAnnouncement?: HiddenAnnouncementsCreateNestedOneWithoutAuctionInput
  }

  export type AuctionUncheckedCreateWithoutSavedAnnouncementInput = {
    id?: number
    hiddenAnnouncementId?: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesUncheckedCreateNestedManyWithoutAuctionInput
  }

  export type AuctionCreateOrConnectWithoutSavedAnnouncementInput = {
    where: AuctionWhereUniqueInput
    create: XOR<AuctionCreateWithoutSavedAnnouncementInput, AuctionUncheckedCreateWithoutSavedAnnouncementInput>
  }

  export type UserUpsertWithoutSavedAnnouncementInput = {
    update: XOR<UserUpdateWithoutSavedAnnouncementInput, UserUncheckedUpdateWithoutSavedAnnouncementInput>
    create: XOR<UserCreateWithoutSavedAnnouncementInput, UserUncheckedCreateWithoutSavedAnnouncementInput>
  }

  export type UserUpdateWithoutSavedAnnouncementInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUpdateManyWithoutUserNestedInput
    sell?: SellUpdateManyWithoutUserNestedInput
    valuate?: ValuateUpdateManyWithoutUserNestedInput
    savedSearch?: SavedSearchesUpdateManyWithoutUserNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSavedAnnouncementInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUncheckedUpdateManyWithoutUserNestedInput
    sell?: SellUncheckedUpdateManyWithoutUserNestedInput
    valuate?: ValuateUncheckedUpdateManyWithoutUserNestedInput
    savedSearch?: SavedSearchesUncheckedUpdateManyWithoutUserNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BuyUpsertWithoutSavedAnnouncementInput = {
    update: XOR<BuyUpdateWithoutSavedAnnouncementInput, BuyUncheckedUpdateWithoutSavedAnnouncementInput>
    create: XOR<BuyCreateWithoutSavedAnnouncementInput, BuyUncheckedCreateWithoutSavedAnnouncementInput>
  }

  export type BuyUpdateWithoutSavedAnnouncementInput = {
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUpdateManyWithoutBuyNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUpdateOneWithoutBuyNestedInput
  }

  export type BuyUncheckedUpdateWithoutSavedAnnouncementInput = {
    id?: IntFieldUpdateOperationsInput | number
    hiddenAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUncheckedUpdateManyWithoutBuyNestedInput
  }

  export type RentUpsertWithoutSavedAnnouncementInput = {
    update: XOR<RentUpdateWithoutSavedAnnouncementInput, RentUncheckedUpdateWithoutSavedAnnouncementInput>
    create: XOR<RentCreateWithoutSavedAnnouncementInput, RentUncheckedCreateWithoutSavedAnnouncementInput>
  }

  export type RentUpdateWithoutSavedAnnouncementInput = {
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUpdateManyWithoutRentNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUpdateOneWithoutRentNestedInput
  }

  export type RentUncheckedUpdateWithoutSavedAnnouncementInput = {
    id?: IntFieldUpdateOperationsInput | number
    hiddenAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUncheckedUpdateManyWithoutRentNestedInput
  }

  export type AuctionUpsertWithoutSavedAnnouncementInput = {
    update: XOR<AuctionUpdateWithoutSavedAnnouncementInput, AuctionUncheckedUpdateWithoutSavedAnnouncementInput>
    create: XOR<AuctionCreateWithoutSavedAnnouncementInput, AuctionUncheckedCreateWithoutSavedAnnouncementInput>
  }

  export type AuctionUpdateWithoutSavedAnnouncementInput = {
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUpdateManyWithoutAuctionNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUpdateOneWithoutAuctionNestedInput
  }

  export type AuctionUncheckedUpdateWithoutSavedAnnouncementInput = {
    id?: IntFieldUpdateOperationsInput | number
    hiddenAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUncheckedUpdateManyWithoutAuctionNestedInput
  }

  export type UserCreateWithoutSellInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesCreateNestedManyWithoutUserInput
    savedAnnouncement?: SavedAnnouncementsCreateNestedManyWithoutUserInput
    valuate?: ValuateCreateNestedManyWithoutUserInput
    savedSearch?: SavedSearchesCreateNestedManyWithoutUserInput
    hiddenAnnouncement?: HiddenAnnouncementsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSellInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesUncheckedCreateNestedManyWithoutUserInput
    savedAnnouncement?: SavedAnnouncementsUncheckedCreateNestedManyWithoutUserInput
    valuate?: ValuateUncheckedCreateNestedManyWithoutUserInput
    savedSearch?: SavedSearchesUncheckedCreateNestedManyWithoutUserInput
    hiddenAnnouncement?: HiddenAnnouncementsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSellInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSellInput, UserUncheckedCreateWithoutSellInput>
  }

  export type UserUpsertWithoutSellInput = {
    update: XOR<UserUpdateWithoutSellInput, UserUncheckedUpdateWithoutSellInput>
    create: XOR<UserCreateWithoutSellInput, UserUncheckedCreateWithoutSellInput>
  }

  export type UserUpdateWithoutSellInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUpdateManyWithoutUserNestedInput
    savedAnnouncement?: SavedAnnouncementsUpdateManyWithoutUserNestedInput
    valuate?: ValuateUpdateManyWithoutUserNestedInput
    savedSearch?: SavedSearchesUpdateManyWithoutUserNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSellInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUncheckedUpdateManyWithoutUserNestedInput
    savedAnnouncement?: SavedAnnouncementsUncheckedUpdateManyWithoutUserNestedInput
    valuate?: ValuateUncheckedUpdateManyWithoutUserNestedInput
    savedSearch?: SavedSearchesUncheckedUpdateManyWithoutUserNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutValuateInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesCreateNestedManyWithoutUserInput
    savedAnnouncement?: SavedAnnouncementsCreateNestedManyWithoutUserInput
    sell?: SellCreateNestedManyWithoutUserInput
    savedSearch?: SavedSearchesCreateNestedManyWithoutUserInput
    hiddenAnnouncement?: HiddenAnnouncementsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutValuateInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesUncheckedCreateNestedManyWithoutUserInput
    savedAnnouncement?: SavedAnnouncementsUncheckedCreateNestedManyWithoutUserInput
    sell?: SellUncheckedCreateNestedManyWithoutUserInput
    savedSearch?: SavedSearchesUncheckedCreateNestedManyWithoutUserInput
    hiddenAnnouncement?: HiddenAnnouncementsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutValuateInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutValuateInput, UserUncheckedCreateWithoutValuateInput>
  }

  export type UserUpsertWithoutValuateInput = {
    update: XOR<UserUpdateWithoutValuateInput, UserUncheckedUpdateWithoutValuateInput>
    create: XOR<UserCreateWithoutValuateInput, UserUncheckedCreateWithoutValuateInput>
  }

  export type UserUpdateWithoutValuateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUpdateManyWithoutUserNestedInput
    savedAnnouncement?: SavedAnnouncementsUpdateManyWithoutUserNestedInput
    sell?: SellUpdateManyWithoutUserNestedInput
    savedSearch?: SavedSearchesUpdateManyWithoutUserNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutValuateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUncheckedUpdateManyWithoutUserNestedInput
    savedAnnouncement?: SavedAnnouncementsUncheckedUpdateManyWithoutUserNestedInput
    sell?: SellUncheckedUpdateManyWithoutUserNestedInput
    savedSearch?: SavedSearchesUncheckedUpdateManyWithoutUserNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSavedSearchInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesCreateNestedManyWithoutUserInput
    savedAnnouncement?: SavedAnnouncementsCreateNestedManyWithoutUserInput
    sell?: SellCreateNestedManyWithoutUserInput
    valuate?: ValuateCreateNestedManyWithoutUserInput
    hiddenAnnouncement?: HiddenAnnouncementsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSavedSearchInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesUncheckedCreateNestedManyWithoutUserInput
    savedAnnouncement?: SavedAnnouncementsUncheckedCreateNestedManyWithoutUserInput
    sell?: SellUncheckedCreateNestedManyWithoutUserInput
    valuate?: ValuateUncheckedCreateNestedManyWithoutUserInput
    hiddenAnnouncement?: HiddenAnnouncementsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSavedSearchInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSavedSearchInput, UserUncheckedCreateWithoutSavedSearchInput>
  }

  export type UserUpsertWithoutSavedSearchInput = {
    update: XOR<UserUpdateWithoutSavedSearchInput, UserUncheckedUpdateWithoutSavedSearchInput>
    create: XOR<UserCreateWithoutSavedSearchInput, UserUncheckedCreateWithoutSavedSearchInput>
  }

  export type UserUpdateWithoutSavedSearchInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUpdateManyWithoutUserNestedInput
    savedAnnouncement?: SavedAnnouncementsUpdateManyWithoutUserNestedInput
    sell?: SellUpdateManyWithoutUserNestedInput
    valuate?: ValuateUpdateManyWithoutUserNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSavedSearchInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUncheckedUpdateManyWithoutUserNestedInput
    savedAnnouncement?: SavedAnnouncementsUncheckedUpdateManyWithoutUserNestedInput
    sell?: SellUncheckedUpdateManyWithoutUserNestedInput
    valuate?: ValuateUncheckedUpdateManyWithoutUserNestedInput
    hiddenAnnouncement?: HiddenAnnouncementsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutHiddenAnnouncementInput = {
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesCreateNestedManyWithoutUserInput
    savedAnnouncement?: SavedAnnouncementsCreateNestedManyWithoutUserInput
    sell?: SellCreateNestedManyWithoutUserInput
    valuate?: ValuateCreateNestedManyWithoutUserInput
    savedSearch?: SavedSearchesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHiddenAnnouncementInput = {
    id?: number
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesUncheckedCreateNestedManyWithoutUserInput
    savedAnnouncement?: SavedAnnouncementsUncheckedCreateNestedManyWithoutUserInput
    sell?: SellUncheckedCreateNestedManyWithoutUserInput
    valuate?: ValuateUncheckedCreateNestedManyWithoutUserInput
    savedSearch?: SavedSearchesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHiddenAnnouncementInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHiddenAnnouncementInput, UserUncheckedCreateWithoutHiddenAnnouncementInput>
  }

  export type BuyCreateWithoutHiddenAnnouncementInput = {
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesCreateNestedManyWithoutBuyInput
    savedAnnouncement?: SavedAnnouncementsCreateNestedOneWithoutBuyInput
  }

  export type BuyUncheckedCreateWithoutHiddenAnnouncementInput = {
    id?: number
    savedAnnouncementId?: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesUncheckedCreateNestedManyWithoutBuyInput
  }

  export type BuyCreateOrConnectWithoutHiddenAnnouncementInput = {
    where: BuyWhereUniqueInput
    create: XOR<BuyCreateWithoutHiddenAnnouncementInput, BuyUncheckedCreateWithoutHiddenAnnouncementInput>
  }

  export type RentCreateWithoutHiddenAnnouncementInput = {
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesCreateNestedManyWithoutRentInput
    savedAnnouncement?: SavedAnnouncementsCreateNestedOneWithoutRentInput
  }

  export type RentUncheckedCreateWithoutHiddenAnnouncementInput = {
    id?: number
    savedAnnouncementId?: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesUncheckedCreateNestedManyWithoutRentInput
  }

  export type RentCreateOrConnectWithoutHiddenAnnouncementInput = {
    where: RentWhereUniqueInput
    create: XOR<RentCreateWithoutHiddenAnnouncementInput, RentUncheckedCreateWithoutHiddenAnnouncementInput>
  }

  export type AuctionCreateWithoutHiddenAnnouncementInput = {
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesCreateNestedManyWithoutAuctionInput
    savedAnnouncement?: SavedAnnouncementsCreateNestedOneWithoutAuctionInput
  }

  export type AuctionUncheckedCreateWithoutHiddenAnnouncementInput = {
    id?: number
    savedAnnouncementId?: number | null
    image: string
    type: string
    price: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    descriptionTitle: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessagesUncheckedCreateNestedManyWithoutAuctionInput
  }

  export type AuctionCreateOrConnectWithoutHiddenAnnouncementInput = {
    where: AuctionWhereUniqueInput
    create: XOR<AuctionCreateWithoutHiddenAnnouncementInput, AuctionUncheckedCreateWithoutHiddenAnnouncementInput>
  }

  export type UserUpsertWithoutHiddenAnnouncementInput = {
    update: XOR<UserUpdateWithoutHiddenAnnouncementInput, UserUncheckedUpdateWithoutHiddenAnnouncementInput>
    create: XOR<UserCreateWithoutHiddenAnnouncementInput, UserUncheckedCreateWithoutHiddenAnnouncementInput>
  }

  export type UserUpdateWithoutHiddenAnnouncementInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUpdateManyWithoutUserNestedInput
    savedAnnouncement?: SavedAnnouncementsUpdateManyWithoutUserNestedInput
    sell?: SellUpdateManyWithoutUserNestedInput
    valuate?: ValuateUpdateManyWithoutUserNestedInput
    savedSearch?: SavedSearchesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHiddenAnnouncementInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUncheckedUpdateManyWithoutUserNestedInput
    savedAnnouncement?: SavedAnnouncementsUncheckedUpdateManyWithoutUserNestedInput
    sell?: SellUncheckedUpdateManyWithoutUserNestedInput
    valuate?: ValuateUncheckedUpdateManyWithoutUserNestedInput
    savedSearch?: SavedSearchesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BuyUpsertWithoutHiddenAnnouncementInput = {
    update: XOR<BuyUpdateWithoutHiddenAnnouncementInput, BuyUncheckedUpdateWithoutHiddenAnnouncementInput>
    create: XOR<BuyCreateWithoutHiddenAnnouncementInput, BuyUncheckedCreateWithoutHiddenAnnouncementInput>
  }

  export type BuyUpdateWithoutHiddenAnnouncementInput = {
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUpdateManyWithoutBuyNestedInput
    savedAnnouncement?: SavedAnnouncementsUpdateOneWithoutBuyNestedInput
  }

  export type BuyUncheckedUpdateWithoutHiddenAnnouncementInput = {
    id?: IntFieldUpdateOperationsInput | number
    savedAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUncheckedUpdateManyWithoutBuyNestedInput
  }

  export type RentUpsertWithoutHiddenAnnouncementInput = {
    update: XOR<RentUpdateWithoutHiddenAnnouncementInput, RentUncheckedUpdateWithoutHiddenAnnouncementInput>
    create: XOR<RentCreateWithoutHiddenAnnouncementInput, RentUncheckedCreateWithoutHiddenAnnouncementInput>
  }

  export type RentUpdateWithoutHiddenAnnouncementInput = {
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUpdateManyWithoutRentNestedInput
    savedAnnouncement?: SavedAnnouncementsUpdateOneWithoutRentNestedInput
  }

  export type RentUncheckedUpdateWithoutHiddenAnnouncementInput = {
    id?: IntFieldUpdateOperationsInput | number
    savedAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUncheckedUpdateManyWithoutRentNestedInput
  }

  export type AuctionUpsertWithoutHiddenAnnouncementInput = {
    update: XOR<AuctionUpdateWithoutHiddenAnnouncementInput, AuctionUncheckedUpdateWithoutHiddenAnnouncementInput>
    create: XOR<AuctionCreateWithoutHiddenAnnouncementInput, AuctionUncheckedCreateWithoutHiddenAnnouncementInput>
  }

  export type AuctionUpdateWithoutHiddenAnnouncementInput = {
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUpdateManyWithoutAuctionNestedInput
    savedAnnouncement?: SavedAnnouncementsUpdateOneWithoutAuctionNestedInput
  }

  export type AuctionUncheckedUpdateWithoutHiddenAnnouncementInput = {
    id?: IntFieldUpdateOperationsInput | number
    savedAnnouncementId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    descriptionTitle?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessagesUncheckedUpdateManyWithoutAuctionNestedInput
  }

  export type MessagesCreateWithoutBuyInput = {
    message: string
    name: string
    email: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMessagesInput
    rent: RentCreateNestedOneWithoutMessagesInput
    auction: AuctionCreateNestedOneWithoutMessagesInput
    agency: AgencyCreateNestedOneWithoutMessagesInput
  }

  export type MessagesUncheckedCreateWithoutBuyInput = {
    id?: number
    message: string
    name: string
    email: string
    phone: string
    userId: number
    rentId: number
    auctionId: number
    agencyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessagesCreateOrConnectWithoutBuyInput = {
    where: MessagesWhereUniqueInput
    create: XOR<MessagesCreateWithoutBuyInput, MessagesUncheckedCreateWithoutBuyInput>
  }

  export type MessagesCreateManyBuyInputEnvelope = {
    data: Enumerable<MessagesCreateManyBuyInput>
    skipDuplicates?: boolean
  }

  export type SavedAnnouncementsCreateWithoutBuyInput = {
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSavedAnnouncementInput
    rent?: RentCreateNestedOneWithoutSavedAnnouncementInput
    auction?: AuctionCreateNestedOneWithoutSavedAnnouncementInput
  }

  export type SavedAnnouncementsUncheckedCreateWithoutBuyInput = {
    id?: number
    email: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    rent?: RentUncheckedCreateNestedOneWithoutSavedAnnouncementInput
    auction?: AuctionUncheckedCreateNestedOneWithoutSavedAnnouncementInput
  }

  export type SavedAnnouncementsCreateOrConnectWithoutBuyInput = {
    where: SavedAnnouncementsWhereUniqueInput
    create: XOR<SavedAnnouncementsCreateWithoutBuyInput, SavedAnnouncementsUncheckedCreateWithoutBuyInput>
  }

  export type HiddenAnnouncementsCreateWithoutBuyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHiddenAnnouncementInput
    rent?: RentCreateNestedOneWithoutHiddenAnnouncementInput
    auction?: AuctionCreateNestedOneWithoutHiddenAnnouncementInput
  }

  export type HiddenAnnouncementsUncheckedCreateWithoutBuyInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    rent?: RentUncheckedCreateNestedOneWithoutHiddenAnnouncementInput
    auction?: AuctionUncheckedCreateNestedOneWithoutHiddenAnnouncementInput
  }

  export type HiddenAnnouncementsCreateOrConnectWithoutBuyInput = {
    where: HiddenAnnouncementsWhereUniqueInput
    create: XOR<HiddenAnnouncementsCreateWithoutBuyInput, HiddenAnnouncementsUncheckedCreateWithoutBuyInput>
  }

  export type MessagesUpsertWithWhereUniqueWithoutBuyInput = {
    where: MessagesWhereUniqueInput
    update: XOR<MessagesUpdateWithoutBuyInput, MessagesUncheckedUpdateWithoutBuyInput>
    create: XOR<MessagesCreateWithoutBuyInput, MessagesUncheckedCreateWithoutBuyInput>
  }

  export type MessagesUpdateWithWhereUniqueWithoutBuyInput = {
    where: MessagesWhereUniqueInput
    data: XOR<MessagesUpdateWithoutBuyInput, MessagesUncheckedUpdateWithoutBuyInput>
  }

  export type MessagesUpdateManyWithWhereWithoutBuyInput = {
    where: MessagesScalarWhereInput
    data: XOR<MessagesUpdateManyMutationInput, MessagesUncheckedUpdateManyWithoutMessagesInput>
  }

  export type SavedAnnouncementsUpsertWithoutBuyInput = {
    update: XOR<SavedAnnouncementsUpdateWithoutBuyInput, SavedAnnouncementsUncheckedUpdateWithoutBuyInput>
    create: XOR<SavedAnnouncementsCreateWithoutBuyInput, SavedAnnouncementsUncheckedCreateWithoutBuyInput>
  }

  export type SavedAnnouncementsUpdateWithoutBuyInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSavedAnnouncementNestedInput
    rent?: RentUpdateOneWithoutSavedAnnouncementNestedInput
    auction?: AuctionUpdateOneWithoutSavedAnnouncementNestedInput
  }

  export type SavedAnnouncementsUncheckedUpdateWithoutBuyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rent?: RentUncheckedUpdateOneWithoutSavedAnnouncementNestedInput
    auction?: AuctionUncheckedUpdateOneWithoutSavedAnnouncementNestedInput
  }

  export type HiddenAnnouncementsUpsertWithoutBuyInput = {
    update: XOR<HiddenAnnouncementsUpdateWithoutBuyInput, HiddenAnnouncementsUncheckedUpdateWithoutBuyInput>
    create: XOR<HiddenAnnouncementsCreateWithoutBuyInput, HiddenAnnouncementsUncheckedCreateWithoutBuyInput>
  }

  export type HiddenAnnouncementsUpdateWithoutBuyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHiddenAnnouncementNestedInput
    rent?: RentUpdateOneWithoutHiddenAnnouncementNestedInput
    auction?: AuctionUpdateOneWithoutHiddenAnnouncementNestedInput
  }

  export type HiddenAnnouncementsUncheckedUpdateWithoutBuyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rent?: RentUncheckedUpdateOneWithoutHiddenAnnouncementNestedInput
    auction?: AuctionUncheckedUpdateOneWithoutHiddenAnnouncementNestedInput
  }

  export type MessagesCreateWithoutRentInput = {
    message: string
    name: string
    email: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMessagesInput
    buy: BuyCreateNestedOneWithoutMessagesInput
    auction: AuctionCreateNestedOneWithoutMessagesInput
    agency: AgencyCreateNestedOneWithoutMessagesInput
  }

  export type MessagesUncheckedCreateWithoutRentInput = {
    id?: number
    message: string
    name: string
    email: string
    phone: string
    userId: number
    buyId: number
    auctionId: number
    agencyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessagesCreateOrConnectWithoutRentInput = {
    where: MessagesWhereUniqueInput
    create: XOR<MessagesCreateWithoutRentInput, MessagesUncheckedCreateWithoutRentInput>
  }

  export type MessagesCreateManyRentInputEnvelope = {
    data: Enumerable<MessagesCreateManyRentInput>
    skipDuplicates?: boolean
  }

  export type SavedAnnouncementsCreateWithoutRentInput = {
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSavedAnnouncementInput
    buy?: BuyCreateNestedOneWithoutSavedAnnouncementInput
    auction?: AuctionCreateNestedOneWithoutSavedAnnouncementInput
  }

  export type SavedAnnouncementsUncheckedCreateWithoutRentInput = {
    id?: number
    email: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    buy?: BuyUncheckedCreateNestedOneWithoutSavedAnnouncementInput
    auction?: AuctionUncheckedCreateNestedOneWithoutSavedAnnouncementInput
  }

  export type SavedAnnouncementsCreateOrConnectWithoutRentInput = {
    where: SavedAnnouncementsWhereUniqueInput
    create: XOR<SavedAnnouncementsCreateWithoutRentInput, SavedAnnouncementsUncheckedCreateWithoutRentInput>
  }

  export type HiddenAnnouncementsCreateWithoutRentInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHiddenAnnouncementInput
    buy?: BuyCreateNestedOneWithoutHiddenAnnouncementInput
    auction?: AuctionCreateNestedOneWithoutHiddenAnnouncementInput
  }

  export type HiddenAnnouncementsUncheckedCreateWithoutRentInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    buy?: BuyUncheckedCreateNestedOneWithoutHiddenAnnouncementInput
    auction?: AuctionUncheckedCreateNestedOneWithoutHiddenAnnouncementInput
  }

  export type HiddenAnnouncementsCreateOrConnectWithoutRentInput = {
    where: HiddenAnnouncementsWhereUniqueInput
    create: XOR<HiddenAnnouncementsCreateWithoutRentInput, HiddenAnnouncementsUncheckedCreateWithoutRentInput>
  }

  export type MessagesUpsertWithWhereUniqueWithoutRentInput = {
    where: MessagesWhereUniqueInput
    update: XOR<MessagesUpdateWithoutRentInput, MessagesUncheckedUpdateWithoutRentInput>
    create: XOR<MessagesCreateWithoutRentInput, MessagesUncheckedCreateWithoutRentInput>
  }

  export type MessagesUpdateWithWhereUniqueWithoutRentInput = {
    where: MessagesWhereUniqueInput
    data: XOR<MessagesUpdateWithoutRentInput, MessagesUncheckedUpdateWithoutRentInput>
  }

  export type MessagesUpdateManyWithWhereWithoutRentInput = {
    where: MessagesScalarWhereInput
    data: XOR<MessagesUpdateManyMutationInput, MessagesUncheckedUpdateManyWithoutMessagesInput>
  }

  export type SavedAnnouncementsUpsertWithoutRentInput = {
    update: XOR<SavedAnnouncementsUpdateWithoutRentInput, SavedAnnouncementsUncheckedUpdateWithoutRentInput>
    create: XOR<SavedAnnouncementsCreateWithoutRentInput, SavedAnnouncementsUncheckedCreateWithoutRentInput>
  }

  export type SavedAnnouncementsUpdateWithoutRentInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSavedAnnouncementNestedInput
    buy?: BuyUpdateOneWithoutSavedAnnouncementNestedInput
    auction?: AuctionUpdateOneWithoutSavedAnnouncementNestedInput
  }

  export type SavedAnnouncementsUncheckedUpdateWithoutRentInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy?: BuyUncheckedUpdateOneWithoutSavedAnnouncementNestedInput
    auction?: AuctionUncheckedUpdateOneWithoutSavedAnnouncementNestedInput
  }

  export type HiddenAnnouncementsUpsertWithoutRentInput = {
    update: XOR<HiddenAnnouncementsUpdateWithoutRentInput, HiddenAnnouncementsUncheckedUpdateWithoutRentInput>
    create: XOR<HiddenAnnouncementsCreateWithoutRentInput, HiddenAnnouncementsUncheckedCreateWithoutRentInput>
  }

  export type HiddenAnnouncementsUpdateWithoutRentInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHiddenAnnouncementNestedInput
    buy?: BuyUpdateOneWithoutHiddenAnnouncementNestedInput
    auction?: AuctionUpdateOneWithoutHiddenAnnouncementNestedInput
  }

  export type HiddenAnnouncementsUncheckedUpdateWithoutRentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy?: BuyUncheckedUpdateOneWithoutHiddenAnnouncementNestedInput
    auction?: AuctionUncheckedUpdateOneWithoutHiddenAnnouncementNestedInput
  }

  export type MessagesCreateWithoutAuctionInput = {
    message: string
    name: string
    email: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMessagesInput
    buy: BuyCreateNestedOneWithoutMessagesInput
    rent: RentCreateNestedOneWithoutMessagesInput
    agency: AgencyCreateNestedOneWithoutMessagesInput
  }

  export type MessagesUncheckedCreateWithoutAuctionInput = {
    id?: number
    message: string
    name: string
    email: string
    phone: string
    userId: number
    buyId: number
    rentId: number
    agencyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessagesCreateOrConnectWithoutAuctionInput = {
    where: MessagesWhereUniqueInput
    create: XOR<MessagesCreateWithoutAuctionInput, MessagesUncheckedCreateWithoutAuctionInput>
  }

  export type MessagesCreateManyAuctionInputEnvelope = {
    data: Enumerable<MessagesCreateManyAuctionInput>
    skipDuplicates?: boolean
  }

  export type SavedAnnouncementsCreateWithoutAuctionInput = {
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSavedAnnouncementInput
    buy?: BuyCreateNestedOneWithoutSavedAnnouncementInput
    rent?: RentCreateNestedOneWithoutSavedAnnouncementInput
  }

  export type SavedAnnouncementsUncheckedCreateWithoutAuctionInput = {
    id?: number
    email: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    buy?: BuyUncheckedCreateNestedOneWithoutSavedAnnouncementInput
    rent?: RentUncheckedCreateNestedOneWithoutSavedAnnouncementInput
  }

  export type SavedAnnouncementsCreateOrConnectWithoutAuctionInput = {
    where: SavedAnnouncementsWhereUniqueInput
    create: XOR<SavedAnnouncementsCreateWithoutAuctionInput, SavedAnnouncementsUncheckedCreateWithoutAuctionInput>
  }

  export type HiddenAnnouncementsCreateWithoutAuctionInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHiddenAnnouncementInput
    buy?: BuyCreateNestedOneWithoutHiddenAnnouncementInput
    rent?: RentCreateNestedOneWithoutHiddenAnnouncementInput
  }

  export type HiddenAnnouncementsUncheckedCreateWithoutAuctionInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    buy?: BuyUncheckedCreateNestedOneWithoutHiddenAnnouncementInput
    rent?: RentUncheckedCreateNestedOneWithoutHiddenAnnouncementInput
  }

  export type HiddenAnnouncementsCreateOrConnectWithoutAuctionInput = {
    where: HiddenAnnouncementsWhereUniqueInput
    create: XOR<HiddenAnnouncementsCreateWithoutAuctionInput, HiddenAnnouncementsUncheckedCreateWithoutAuctionInput>
  }

  export type MessagesUpsertWithWhereUniqueWithoutAuctionInput = {
    where: MessagesWhereUniqueInput
    update: XOR<MessagesUpdateWithoutAuctionInput, MessagesUncheckedUpdateWithoutAuctionInput>
    create: XOR<MessagesCreateWithoutAuctionInput, MessagesUncheckedCreateWithoutAuctionInput>
  }

  export type MessagesUpdateWithWhereUniqueWithoutAuctionInput = {
    where: MessagesWhereUniqueInput
    data: XOR<MessagesUpdateWithoutAuctionInput, MessagesUncheckedUpdateWithoutAuctionInput>
  }

  export type MessagesUpdateManyWithWhereWithoutAuctionInput = {
    where: MessagesScalarWhereInput
    data: XOR<MessagesUpdateManyMutationInput, MessagesUncheckedUpdateManyWithoutMessagesInput>
  }

  export type SavedAnnouncementsUpsertWithoutAuctionInput = {
    update: XOR<SavedAnnouncementsUpdateWithoutAuctionInput, SavedAnnouncementsUncheckedUpdateWithoutAuctionInput>
    create: XOR<SavedAnnouncementsCreateWithoutAuctionInput, SavedAnnouncementsUncheckedCreateWithoutAuctionInput>
  }

  export type SavedAnnouncementsUpdateWithoutAuctionInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSavedAnnouncementNestedInput
    buy?: BuyUpdateOneWithoutSavedAnnouncementNestedInput
    rent?: RentUpdateOneWithoutSavedAnnouncementNestedInput
  }

  export type SavedAnnouncementsUncheckedUpdateWithoutAuctionInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy?: BuyUncheckedUpdateOneWithoutSavedAnnouncementNestedInput
    rent?: RentUncheckedUpdateOneWithoutSavedAnnouncementNestedInput
  }

  export type HiddenAnnouncementsUpsertWithoutAuctionInput = {
    update: XOR<HiddenAnnouncementsUpdateWithoutAuctionInput, HiddenAnnouncementsUncheckedUpdateWithoutAuctionInput>
    create: XOR<HiddenAnnouncementsCreateWithoutAuctionInput, HiddenAnnouncementsUncheckedCreateWithoutAuctionInput>
  }

  export type HiddenAnnouncementsUpdateWithoutAuctionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHiddenAnnouncementNestedInput
    buy?: BuyUpdateOneWithoutHiddenAnnouncementNestedInput
    rent?: RentUpdateOneWithoutHiddenAnnouncementNestedInput
  }

  export type HiddenAnnouncementsUncheckedUpdateWithoutAuctionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy?: BuyUncheckedUpdateOneWithoutHiddenAnnouncementNestedInput
    rent?: RentUncheckedUpdateOneWithoutHiddenAnnouncementNestedInput
  }

  export type MessagesCreateWithoutAgencyInput = {
    message: string
    name: string
    email: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMessagesInput
    buy: BuyCreateNestedOneWithoutMessagesInput
    rent: RentCreateNestedOneWithoutMessagesInput
    auction: AuctionCreateNestedOneWithoutMessagesInput
  }

  export type MessagesUncheckedCreateWithoutAgencyInput = {
    id?: number
    message: string
    name: string
    email: string
    phone: string
    userId: number
    buyId: number
    rentId: number
    auctionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessagesCreateOrConnectWithoutAgencyInput = {
    where: MessagesWhereUniqueInput
    create: XOR<MessagesCreateWithoutAgencyInput, MessagesUncheckedCreateWithoutAgencyInput>
  }

  export type MessagesCreateManyAgencyInputEnvelope = {
    data: Enumerable<MessagesCreateManyAgencyInput>
    skipDuplicates?: boolean
  }

  export type MessagesUpsertWithWhereUniqueWithoutAgencyInput = {
    where: MessagesWhereUniqueInput
    update: XOR<MessagesUpdateWithoutAgencyInput, MessagesUncheckedUpdateWithoutAgencyInput>
    create: XOR<MessagesCreateWithoutAgencyInput, MessagesUncheckedCreateWithoutAgencyInput>
  }

  export type MessagesUpdateWithWhereUniqueWithoutAgencyInput = {
    where: MessagesWhereUniqueInput
    data: XOR<MessagesUpdateWithoutAgencyInput, MessagesUncheckedUpdateWithoutAgencyInput>
  }

  export type MessagesUpdateManyWithWhereWithoutAgencyInput = {
    where: MessagesScalarWhereInput
    data: XOR<MessagesUpdateManyMutationInput, MessagesUncheckedUpdateManyWithoutMessagesInput>
  }

  export type MessagesCreateManyUserInput = {
    id?: number
    message: string
    name: string
    email: string
    phone: string
    buyId: number
    rentId: number
    auctionId: number
    agencyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SavedAnnouncementsCreateManyUserInput = {
    id?: number
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SellCreateManyUserInput = {
    id?: number
    image: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValuateCreateManyUserInput = {
    id?: number
    image: string
    address: string
    bedrooms: number
    sqFootage: number
    bathrooms: number
    floors: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SavedSearchesCreateManyUserInput = {
    id?: number
    searchBar: string
    aquireType: string
    houseType: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HiddenAnnouncementsCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessagesUpdateWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy?: BuyUpdateOneRequiredWithoutMessagesNestedInput
    rent?: RentUpdateOneRequiredWithoutMessagesNestedInput
    auction?: AuctionUpdateOneRequiredWithoutMessagesNestedInput
    agency?: AgencyUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessagesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    buyId?: IntFieldUpdateOperationsInput | number
    rentId?: IntFieldUpdateOperationsInput | number
    auctionId?: IntFieldUpdateOperationsInput | number
    agencyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessagesUncheckedUpdateManyWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    buyId?: IntFieldUpdateOperationsInput | number
    rentId?: IntFieldUpdateOperationsInput | number
    auctionId?: IntFieldUpdateOperationsInput | number
    agencyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedAnnouncementsUpdateWithoutUserInput = {
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy?: BuyUpdateOneWithoutSavedAnnouncementNestedInput
    rent?: RentUpdateOneWithoutSavedAnnouncementNestedInput
    auction?: AuctionUpdateOneWithoutSavedAnnouncementNestedInput
  }

  export type SavedAnnouncementsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy?: BuyUncheckedUpdateOneWithoutSavedAnnouncementNestedInput
    rent?: RentUncheckedUpdateOneWithoutSavedAnnouncementNestedInput
    auction?: AuctionUncheckedUpdateOneWithoutSavedAnnouncementNestedInput
  }

  export type SavedAnnouncementsUncheckedUpdateManyWithoutSavedAnnouncementInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellUpdateWithoutUserInput = {
    image?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellUncheckedUpdateManyWithoutSellInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValuateUpdateWithoutUserInput = {
    image?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValuateUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValuateUncheckedUpdateManyWithoutValuateInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    sqFootage?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    floors?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedSearchesUpdateWithoutUserInput = {
    searchBar?: StringFieldUpdateOperationsInput | string
    aquireType?: StringFieldUpdateOperationsInput | string
    houseType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedSearchesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    searchBar?: StringFieldUpdateOperationsInput | string
    aquireType?: StringFieldUpdateOperationsInput | string
    houseType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedSearchesUncheckedUpdateManyWithoutSavedSearchInput = {
    id?: IntFieldUpdateOperationsInput | number
    searchBar?: StringFieldUpdateOperationsInput | string
    aquireType?: StringFieldUpdateOperationsInput | string
    houseType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HiddenAnnouncementsUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy?: BuyUpdateOneWithoutHiddenAnnouncementNestedInput
    rent?: RentUpdateOneWithoutHiddenAnnouncementNestedInput
    auction?: AuctionUpdateOneWithoutHiddenAnnouncementNestedInput
  }

  export type HiddenAnnouncementsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy?: BuyUncheckedUpdateOneWithoutHiddenAnnouncementNestedInput
    rent?: RentUncheckedUpdateOneWithoutHiddenAnnouncementNestedInput
    auction?: AuctionUncheckedUpdateOneWithoutHiddenAnnouncementNestedInput
  }

  export type HiddenAnnouncementsUncheckedUpdateManyWithoutHiddenAnnouncementInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessagesCreateManyBuyInput = {
    id?: number
    message: string
    name: string
    email: string
    phone: string
    userId: number
    rentId: number
    auctionId: number
    agencyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessagesUpdateWithoutBuyInput = {
    message?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
    rent?: RentUpdateOneRequiredWithoutMessagesNestedInput
    auction?: AuctionUpdateOneRequiredWithoutMessagesNestedInput
    agency?: AgencyUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessagesUncheckedUpdateWithoutBuyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    rentId?: IntFieldUpdateOperationsInput | number
    auctionId?: IntFieldUpdateOperationsInput | number
    agencyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessagesCreateManyRentInput = {
    id?: number
    message: string
    name: string
    email: string
    phone: string
    userId: number
    buyId: number
    auctionId: number
    agencyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessagesUpdateWithoutRentInput = {
    message?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
    buy?: BuyUpdateOneRequiredWithoutMessagesNestedInput
    auction?: AuctionUpdateOneRequiredWithoutMessagesNestedInput
    agency?: AgencyUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessagesUncheckedUpdateWithoutRentInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    buyId?: IntFieldUpdateOperationsInput | number
    auctionId?: IntFieldUpdateOperationsInput | number
    agencyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessagesCreateManyAuctionInput = {
    id?: number
    message: string
    name: string
    email: string
    phone: string
    userId: number
    buyId: number
    rentId: number
    agencyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessagesUpdateWithoutAuctionInput = {
    message?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
    buy?: BuyUpdateOneRequiredWithoutMessagesNestedInput
    rent?: RentUpdateOneRequiredWithoutMessagesNestedInput
    agency?: AgencyUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessagesUncheckedUpdateWithoutAuctionInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    buyId?: IntFieldUpdateOperationsInput | number
    rentId?: IntFieldUpdateOperationsInput | number
    agencyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessagesCreateManyAgencyInput = {
    id?: number
    message: string
    name: string
    email: string
    phone: string
    userId: number
    buyId: number
    rentId: number
    auctionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessagesUpdateWithoutAgencyInput = {
    message?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
    buy?: BuyUpdateOneRequiredWithoutMessagesNestedInput
    rent?: RentUpdateOneRequiredWithoutMessagesNestedInput
    auction?: AuctionUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessagesUncheckedUpdateWithoutAgencyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    buyId?: IntFieldUpdateOperationsInput | number
    rentId?: IntFieldUpdateOperationsInput | number
    auctionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}