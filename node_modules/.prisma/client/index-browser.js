
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "d9a4c5988f480fa576d43970d5a23641aa77bc9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.AgencyScalarFieldEnum = {
  id: 'id',
  image: 'image',
  name: 'name',
  address: 'address',
  history: 'history',
  phone: 'phone',
  announcements: 'announcements',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuctionScalarFieldEnum = {
  id: 'id',
  savedAnnouncementId: 'savedAnnouncementId',
  hiddenAnnouncementId: 'hiddenAnnouncementId',
  image: 'image',
  type: 'type',
  price: 'price',
  address: 'address',
  bedrooms: 'bedrooms',
  sqFootage: 'sqFootage',
  bathrooms: 'bathrooms',
  floors: 'floors',
  descriptionTitle: 'descriptionTitle',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BuyScalarFieldEnum = {
  id: 'id',
  savedAnnouncementId: 'savedAnnouncementId',
  hiddenAnnouncementId: 'hiddenAnnouncementId',
  image: 'image',
  type: 'type',
  price: 'price',
  address: 'address',
  bedrooms: 'bedrooms',
  sqFootage: 'sqFootage',
  bathrooms: 'bathrooms',
  floors: 'floors',
  descriptionTitle: 'descriptionTitle',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HiddenAnnouncementsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessagesScalarFieldEnum = {
  id: 'id',
  message: 'message',
  name: 'name',
  email: 'email',
  phone: 'phone',
  userId: 'userId',
  buyId: 'buyId',
  rentId: 'rentId',
  auctionId: 'auctionId',
  agencyId: 'agencyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.RentScalarFieldEnum = {
  id: 'id',
  savedAnnouncementId: 'savedAnnouncementId',
  hiddenAnnouncementId: 'hiddenAnnouncementId',
  image: 'image',
  type: 'type',
  price: 'price',
  address: 'address',
  bedrooms: 'bedrooms',
  sqFootage: 'sqFootage',
  bathrooms: 'bathrooms',
  floors: 'floors',
  descriptionTitle: 'descriptionTitle',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SavedAnnouncementsScalarFieldEnum = {
  id: 'id',
  email: 'email',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SavedSearchesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  searchBar: 'searchBar',
  aquireType: 'aquireType',
  houseType: 'houseType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SellScalarFieldEnum = {
  id: 'id',
  image: 'image',
  address: 'address',
  bedrooms: 'bedrooms',
  sqFootage: 'sqFootage',
  bathrooms: 'bathrooms',
  floors: 'floors',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ValuateScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  image: 'image',
  address: 'address',
  bedrooms: 'bedrooms',
  sqFootage: 'sqFootage',
  bathrooms: 'bathrooms',
  floors: 'floors',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};


exports.Prisma.ModelName = {
  User: 'User',
  Messages: 'Messages',
  SavedAnnouncements: 'SavedAnnouncements',
  Sell: 'Sell',
  Valuate: 'Valuate',
  SavedSearches: 'SavedSearches',
  HiddenAnnouncements: 'HiddenAnnouncements',
  Buy: 'Buy',
  Rent: 'Rent',
  Auction: 'Auction',
  Agency: 'Agency'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
